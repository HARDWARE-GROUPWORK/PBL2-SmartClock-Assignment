
PBL1_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  08009c38  08009c38  00019c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a31c  0800a31c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a324  0800a324  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000020c  0800a538  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800a538  00020574  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2ec  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f8  00000000  00000000  0003a526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0a8  00000000  00000000  00040798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa5c  00000000  00000000  0006b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010109c  00000000  00000000  0008629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c4  00000000  00000000  0018738c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000020c 	.word	0x2000020c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009c20 	.word	0x08009c20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000210 	.word	0x20000210
 800023c:	08009c20 	.word	0x08009c20

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fe:	4b93      	ldr	r3, [pc, #588]	; (800084c <MX_GPIO_Init+0x264>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a92      	ldr	r2, [pc, #584]	; (800084c <MX_GPIO_Init+0x264>)
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b90      	ldr	r3, [pc, #576]	; (800084c <MX_GPIO_Init+0x264>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0310 	and.w	r3, r3, #16
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b8d      	ldr	r3, [pc, #564]	; (800084c <MX_GPIO_Init+0x264>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a8c      	ldr	r2, [pc, #560]	; (800084c <MX_GPIO_Init+0x264>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b8a      	ldr	r3, [pc, #552]	; (800084c <MX_GPIO_Init+0x264>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	4b87      	ldr	r3, [pc, #540]	; (800084c <MX_GPIO_Init+0x264>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a86      	ldr	r2, [pc, #536]	; (800084c <MX_GPIO_Init+0x264>)
 8000634:	f043 0320 	orr.w	r3, r3, #32
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b84      	ldr	r3, [pc, #528]	; (800084c <MX_GPIO_Init+0x264>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	4b81      	ldr	r3, [pc, #516]	; (800084c <MX_GPIO_Init+0x264>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a80      	ldr	r2, [pc, #512]	; (800084c <MX_GPIO_Init+0x264>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b7e      	ldr	r3, [pc, #504]	; (800084c <MX_GPIO_Init+0x264>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b7b      	ldr	r3, [pc, #492]	; (800084c <MX_GPIO_Init+0x264>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a7a      	ldr	r2, [pc, #488]	; (800084c <MX_GPIO_Init+0x264>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b78      	ldr	r3, [pc, #480]	; (800084c <MX_GPIO_Init+0x264>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b75      	ldr	r3, [pc, #468]	; (800084c <MX_GPIO_Init+0x264>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a74      	ldr	r2, [pc, #464]	; (800084c <MX_GPIO_Init+0x264>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <MX_GPIO_Init+0x264>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b6f      	ldr	r3, [pc, #444]	; (800084c <MX_GPIO_Init+0x264>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a6e      	ldr	r2, [pc, #440]	; (800084c <MX_GPIO_Init+0x264>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <MX_GPIO_Init+0x264>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b69      	ldr	r3, [pc, #420]	; (800084c <MX_GPIO_Init+0x264>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a68      	ldr	r2, [pc, #416]	; (800084c <MX_GPIO_Init+0x264>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b66      	ldr	r3, [pc, #408]	; (800084c <MX_GPIO_Init+0x264>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2168      	movs	r1, #104	; 0x68
 80006c2:	4863      	ldr	r0, [pc, #396]	; (8000850 <MX_GPIO_Init+0x268>)
 80006c4:	f002 fb8a 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006ce:	4861      	ldr	r0, [pc, #388]	; (8000854 <MX_GPIO_Init+0x26c>)
 80006d0:	f002 fb84 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	485f      	ldr	r0, [pc, #380]	; (8000858 <MX_GPIO_Init+0x270>)
 80006da:	f002 fb7f 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006e4:	485d      	ldr	r0, [pc, #372]	; (800085c <MX_GPIO_Init+0x274>)
 80006e6:	f002 fb79 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006ea:	2314      	movs	r3, #20
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	4854      	ldr	r0, [pc, #336]	; (8000850 <MX_GPIO_Init+0x268>)
 80006fe:	f002 f9a9 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000702:	2368      	movs	r3, #104	; 0x68
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	4619      	mov	r1, r3
 8000718:	484d      	ldr	r0, [pc, #308]	; (8000850 <MX_GPIO_Init+0x268>)
 800071a:	f002 f99b 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	484a      	ldr	r0, [pc, #296]	; (800085c <MX_GPIO_Init+0x274>)
 8000734:	f002 f98e 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000748:	230b      	movs	r3, #11
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4842      	ldr	r0, [pc, #264]	; (800085c <MX_GPIO_Init+0x274>)
 8000754:	f002 f97e 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000758:	2386      	movs	r3, #134	; 0x86
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000768:	230b      	movs	r3, #11
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000770:	4619      	mov	r1, r3
 8000772:	483b      	ldr	r0, [pc, #236]	; (8000860 <MX_GPIO_Init+0x278>)
 8000774:	f002 f96e 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078a:	230b      	movs	r3, #11
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	482f      	ldr	r0, [pc, #188]	; (8000854 <MX_GPIO_Init+0x26c>)
 8000796:	f002 f95d 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800079a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4828      	ldr	r0, [pc, #160]	; (8000854 <MX_GPIO_Init+0x26c>)
 80007b4:	f002 f94e 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4822      	ldr	r0, [pc, #136]	; (8000858 <MX_GPIO_Init+0x270>)
 80007d0:	f002 f940 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4619      	mov	r1, r3
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <MX_GPIO_Init+0x270>)
 80007e8:	f002 f934 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	4815      	ldr	r0, [pc, #84]	; (800085c <MX_GPIO_Init+0x274>)
 8000806:	f002 f925 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800080a:	23f0      	movs	r3, #240	; 0xf0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_GPIO_Init+0x27c>)
 800081e:	f002 f919 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000822:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000834:	230b      	movs	r3, #11
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_GPIO_Init+0x270>)
 8000840:	f002 f908 	bl	8002a54 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3738      	adds	r7, #56	; 0x38
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40021000 	.word	0x40021000
 8000854:	40020400 	.word	0x40020400
 8000858:	40021800 	.word	0x40021800
 800085c:	40020800 	.word	0x40020800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020c00 	.word	0x40020c00

08000868 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_I2C1_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_I2C1_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_I2C1_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_I2C1_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_I2C1_Init+0x74>)
 80008a4:	f002 face 	bl	8002e44 <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f000 fd7b 	bl	80013a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_I2C1_Init+0x74>)
 80008b6:	f002 ff1f 	bl	80036f8 <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f000 fd72 	bl	80013a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2C1_Init+0x74>)
 80008c8:	f002 ff61 	bl	800378e <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 fd69 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000024c 	.word	0x2000024c
 80008e0:	40005400 	.word	0x40005400
 80008e4:	00c0eaff 	.word	0x00c0eaff

080008e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <HAL_I2C_MspInit+0x7c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d128      	bne.n	800095c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_I2C_MspInit+0x80>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <HAL_I2C_MspInit+0x80>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_I2C_MspInit+0x80>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000928:	2312      	movs	r3, #18
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000934:	2304      	movs	r3, #4
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <HAL_I2C_MspInit+0x84>)
 8000940:	f002 f888 	bl	8002a54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_I2C_MspInit+0x80>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_I2C_MspInit+0x80>)
 800094a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_I2C_MspInit+0x80>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005400 	.word	0x40005400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400

08000970 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000974:	f3bf 8f4f 	dsb	sy
}
 8000978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097a:	f3bf 8f6f 	isb	sy
}
 800097e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <SCB_EnableICache+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <SCB_EnableICache+0x48>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <SCB_EnableICache+0x48>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a0:	f3bf 8f4f 	dsb	sy
}
 80009a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a6:	f3bf 8f6f 	isb	sy
}
 80009aa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009d6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	0b5b      	lsrs	r3, r3, #13
 80009dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	015a      	lsls	r2, r3, #5
 80009f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009fa:	4911      	ldr	r1, [pc, #68]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	60ba      	str	r2, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1ef      	bne.n	80009ec <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	60fa      	str	r2, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1e5      	bne.n	80009e2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a16:	f3bf 8f4f 	dsb	sy
}
 8000a1a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SCB_EnableDCache+0x84>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <SCB_EnableDCache+0x84>)
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a28:	f3bf 8f4f 	dsb	sy
}
 8000a2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a2e:	f3bf 8f6f 	isb	sy
}
 8000a32:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <setHorizontalScreen>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Paint screen black
void setHorizontalScreen(uint16_t color){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fd01 	bl	8002458 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f001 faf8 	bl	800204c <ILI9341_Set_Rotation>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <printText>:

// Print text white font with black background
void printText(char arr[],int line,int offset,int size){ // text, line, offset, size
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	603b      	str	r3, [r7, #0]
	if (line == 0){ // Start with line 1,2,3,4,5...
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <printText+0x1a>
		line = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	e002      	b.n	8000a84 <printText+0x20>
	}else{
		line -=1;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
	}
	ILI9341_Draw_Text(arr, 10, 10+(offset*line), WHITE, size, BLACK);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	fb12 f303 	smulbb	r3, r2, r3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	330a      	adds	r3, #10
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	9101      	str	r1, [sp, #4]
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa4:	210a      	movs	r1, #10
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f001 f9d0 	bl	8001e4c <ILI9341_Draw_Text>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <newLine>:

void newLine(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
	char newLine[20] = "\n\r";
 8000aba:	f640 530a 	movw	r3, #3338	; 0xd0a
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, (uint8_t*) newLine, strlen(newLine), 1000);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fbb5 	bl	8000240 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	1d39      	adds	r1, r7, #4
 8000adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <newLine+0x3c>)
 8000ae2:	f005 fe09 	bl	80066f8 <HAL_UART_Transmit>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000458 	.word	0x20000458

08000af4 <resetPrevNum>:
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0.9 + offsetWidth-5, maxHeight*0.1, BLACK, 2, RED);


}

void resetPrevNum(){
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	prevSecondNum = -1;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <resetPrevNum+0x28>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	601a      	str	r2, [r3, #0]
	prevMinuteNum = -1;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <resetPrevNum+0x2c>)
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	601a      	str	r2, [r3, #0]
	prevHourNum = -1;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <resetPrevNum+0x30>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	2000001c 	.word	0x2000001c
 8000b20:	20000020 	.word	0x20000020
 8000b24:	20000024 	.word	0x20000024

08000b28 <buzzerSound>:
	sprintf(Temp_Buffer_text, "BWD");
	ILI9341_Draw_Text(Temp_Buffer_text, maxWidth*0.75 + offsetWidth, maxHeight*0.9, BLACK, size, GREEN);

}

void buzzerSound(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	  htim3.Instance -> CCR1 = (1000-1) * 0.5;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <buzzerSound+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b36:	2100      	movs	r1, #0
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <buzzerSound+0x28>)
 8000b3a:	f004 fc83 	bl	8005444 <HAL_TIM_PWM_Start>
	  HAL_Delay(70);
 8000b3e:	2046      	movs	r0, #70	; 0x46
 8000b40:	f001 fe52 	bl	80027e8 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000b44:	2100      	movs	r1, #0
 8000b46:	4802      	ldr	r0, [pc, #8]	; (8000b50 <buzzerSound+0x28>)
 8000b48:	f004 fd76 	bl	8005638 <HAL_TIM_PWM_Stop>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000374 	.word	0x20000374

08000b54 <assignmentOne>:
char str[50];
uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];


void assignmentOne(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af02      	add	r7, sp, #8

	setHorizontalScreen(BLACK);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff ff72 	bl	8000a44 <setHorizontalScreen>




	//Send Temp & Humid via UART2
	sprintf(str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", temp, humid);
 8000b60:	4b86      	ldr	r3, [pc, #536]	; (8000d7c <assignmentOne+0x228>)
 8000b62:	edd3 7a00 	vldr	s15, [r3]
 8000b66:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b6a:	4b85      	ldr	r3, [pc, #532]	; (8000d80 <assignmentOne+0x22c>)
 8000b6c:	edd3 7a00 	vldr	s15, [r3]
 8000b70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b74:	ed8d 7b00 	vstr	d7, [sp]
 8000b78:	ec53 2b16 	vmov	r2, r3, d6
 8000b7c:	4981      	ldr	r1, [pc, #516]	; (8000d84 <assignmentOne+0x230>)
 8000b7e:	4882      	ldr	r0, [pc, #520]	; (8000d88 <assignmentOne+0x234>)
 8000b80:	f006 fe8c 	bl	800789c <siprintf>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000b84:	bf00      	nop
 8000b86:	4b81      	ldr	r3, [pc, #516]	; (8000d8c <assignmentOne+0x238>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b90:	2b40      	cmp	r3, #64	; 0x40
 8000b92:	d1f8      	bne.n	8000b86 <assignmentOne+0x32>
	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8000b94:	487c      	ldr	r0, [pc, #496]	; (8000d88 <assignmentOne+0x234>)
 8000b96:	f7ff fb53 	bl	8000240 <strlen>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	23c8      	movs	r3, #200	; 0xc8
 8000ba0:	4979      	ldr	r1, [pc, #484]	; (8000d88 <assignmentOne+0x234>)
 8000ba2:	487a      	ldr	r0, [pc, #488]	; (8000d8c <assignmentOne+0x238>)
 8000ba4:	f005 fda8 	bl	80066f8 <HAL_UART_Transmit>

	//HAL_Delay(5000); //>3000 ms
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4879      	ldr	r0, [pc, #484]	; (8000d90 <assignmentOne+0x23c>)
 8000bac:	f002 f92f 	bl	8002e0e <HAL_GPIO_TogglePin>

	//Wake up sensor
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8000bb0:	23c8      	movs	r3, #200	; 0xc8
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4a77      	ldr	r2, [pc, #476]	; (8000d94 <assignmentOne+0x240>)
 8000bb8:	21b8      	movs	r1, #184	; 0xb8
 8000bba:	4877      	ldr	r0, [pc, #476]	; (8000d98 <assignmentOne+0x244>)
 8000bbc:	f002 f9d2 	bl	8002f64 <HAL_I2C_Master_Transmit>
	//Send reading command
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8000bc0:	23c8      	movs	r3, #200	; 0xc8
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	4a73      	ldr	r2, [pc, #460]	; (8000d94 <assignmentOne+0x240>)
 8000bc8:	21b8      	movs	r1, #184	; 0xb8
 8000bca:	4873      	ldr	r0, [pc, #460]	; (8000d98 <assignmentOne+0x244>)
 8000bcc:	f002 f9ca 	bl	8002f64 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1);

	//Receive sensor data
	HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 8000bd0:	23c8      	movs	r3, #200	; 0xc8
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	4a71      	ldr	r2, [pc, #452]	; (8000d9c <assignmentOne+0x248>)
 8000bd8:	21b8      	movs	r1, #184	; 0xb8
 8000bda:	486f      	ldr	r0, [pc, #444]	; (8000d98 <assignmentOne+0x244>)
 8000bdc:	f002 fab6 	bl	800314c <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8;
 8000be0:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <assignmentOne+0x248>)
 8000be2:	79db      	ldrb	r3, [r3, #7]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8000bea:	4b6c      	ldr	r3, [pc, #432]	; (8000d9c <assignmentOne+0x248>)
 8000bec:	799b      	ldrb	r3, [r3, #6]
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	80fb      	strh	r3, [r7, #6]
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8000bf6:	2106      	movs	r1, #6
 8000bf8:	4868      	ldr	r0, [pc, #416]	; (8000d9c <assignmentOne+0x248>)
 8000bfa:	f000 fb99 	bl	8001330 <CRC16_2>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d143      	bne.n	8000c90 <assignmentOne+0x13c>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8000c08:	4b64      	ldr	r3, [pc, #400]	; (8000d9c <assignmentOne+0x248>)
 8000c0a:	791b      	ldrb	r3, [r3, #4]
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b61      	ldr	r3, [pc, #388]	; (8000d9c <assignmentOne+0x248>)
 8000c18:	795b      	ldrb	r3, [r3, #5]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	80bb      	strh	r3, [r7, #4]
		temp = temperature / 10.0;
 8000c20:	88bb      	ldrh	r3, [r7, #4]
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c2a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000c2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c36:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <assignmentOne+0x228>)
 8000c38:	edc3 7a00 	vstr	s15, [r3]
		temp = (((dataBuffer[4] & 0x80) >> 7)== 1) ? (temp * (-1)) : temp ; // the temperature can be negative
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <assignmentOne+0x248>)
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	09db      	lsrs	r3, r3, #7
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d105      	bne.n	8000c54 <assignmentOne+0x100>
 8000c48:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <assignmentOne+0x228>)
 8000c4a:	edd3 7a00 	vldr	s15, [r3]
 8000c4e:	eef1 7a67 	vneg.f32	s15, s15
 8000c52:	e002      	b.n	8000c5a <assignmentOne+0x106>
 8000c54:	4b49      	ldr	r3, [pc, #292]	; (8000d7c <assignmentOne+0x228>)
 8000c56:	edd3 7a00 	vldr	s15, [r3]
 8000c5a:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <assignmentOne+0x228>)
 8000c5c:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <assignmentOne+0x248>)
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <assignmentOne+0x248>)
 8000c6c:	78db      	ldrb	r3, [r3, #3]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	807b      	strh	r3, [r7, #2]
		humid = humidity / 10.0;
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c7e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000c82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c8a:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <assignmentOne+0x22c>)
 8000c8c:	edc3 7a00 	vstr	s15, [r3]




	//Record
	sprintf(Temp_Buffer_text, "Record %05d", numberOfRecord);
 8000c90:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <assignmentOne+0x24c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4943      	ldr	r1, [pc, #268]	; (8000da4 <assignmentOne+0x250>)
 8000c98:	4843      	ldr	r0, [pc, #268]	; (8000da8 <assignmentOne+0x254>)
 8000c9a:	f006 fdff 	bl	800789c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) Temp_Buffer_text, strlen(Temp_Buffer_text), 1000);
 8000c9e:	4842      	ldr	r0, [pc, #264]	; (8000da8 <assignmentOne+0x254>)
 8000ca0:	f7ff face 	bl	8000240 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cac:	493e      	ldr	r1, [pc, #248]	; (8000da8 <assignmentOne+0x254>)
 8000cae:	4837      	ldr	r0, [pc, #220]	; (8000d8c <assignmentOne+0x238>)
 8000cb0:	f005 fd22 	bl	80066f8 <HAL_UART_Transmit>
	newLine();
 8000cb4:	f7ff fefe 	bl	8000ab4 <newLine>
	printText(Temp_Buffer_text,1,20,3);
 8000cb8:	2303      	movs	r3, #3
 8000cba:	2214      	movs	r2, #20
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	483a      	ldr	r0, [pc, #232]	; (8000da8 <assignmentOne+0x254>)
 8000cc0:	f7ff fed0 	bl	8000a64 <printText>

	//Light
	sprintf(Temp_Buffer_text, "Light %d %%", lightPercent);
 8000cc4:	4b39      	ldr	r3, [pc, #228]	; (8000dac <assignmentOne+0x258>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4939      	ldr	r1, [pc, #228]	; (8000db0 <assignmentOne+0x25c>)
 8000ccc:	4836      	ldr	r0, [pc, #216]	; (8000da8 <assignmentOne+0x254>)
 8000cce:	f006 fde5 	bl	800789c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) Temp_Buffer_text, strlen(Temp_Buffer_text), 1000);
 8000cd2:	4835      	ldr	r0, [pc, #212]	; (8000da8 <assignmentOne+0x254>)
 8000cd4:	f7ff fab4 	bl	8000240 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce0:	4931      	ldr	r1, [pc, #196]	; (8000da8 <assignmentOne+0x254>)
 8000ce2:	482a      	ldr	r0, [pc, #168]	; (8000d8c <assignmentOne+0x238>)
 8000ce4:	f005 fd08 	bl	80066f8 <HAL_UART_Transmit>
	newLine();
 8000ce8:	f7ff fee4 	bl	8000ab4 <newLine>
	printText(Temp_Buffer_text,2,20,3);
 8000cec:	2303      	movs	r3, #3
 8000cee:	2214      	movs	r2, #20
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	482d      	ldr	r0, [pc, #180]	; (8000da8 <assignmentOne+0x254>)
 8000cf4:	f7ff feb6 	bl	8000a64 <printText>

	//Temperature
	sprintf(Temp_Buffer_text, "Temp %0.1f C", temp);
 8000cf8:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <assignmentOne+0x228>)
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d02:	ec53 2b17 	vmov	r2, r3, d7
 8000d06:	492b      	ldr	r1, [pc, #172]	; (8000db4 <assignmentOne+0x260>)
 8000d08:	4827      	ldr	r0, [pc, #156]	; (8000da8 <assignmentOne+0x254>)
 8000d0a:	f006 fdc7 	bl	800789c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) Temp_Buffer_text, strlen(Temp_Buffer_text), 1000);
 8000d0e:	4826      	ldr	r0, [pc, #152]	; (8000da8 <assignmentOne+0x254>)
 8000d10:	f7ff fa96 	bl	8000240 <strlen>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1c:	4922      	ldr	r1, [pc, #136]	; (8000da8 <assignmentOne+0x254>)
 8000d1e:	481b      	ldr	r0, [pc, #108]	; (8000d8c <assignmentOne+0x238>)
 8000d20:	f005 fcea 	bl	80066f8 <HAL_UART_Transmit>
	newLine();
 8000d24:	f7ff fec6 	bl	8000ab4 <newLine>
	printText(Temp_Buffer_text,3,20,3);
 8000d28:	2303      	movs	r3, #3
 8000d2a:	2214      	movs	r2, #20
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	481e      	ldr	r0, [pc, #120]	; (8000da8 <assignmentOne+0x254>)
 8000d30:	f7ff fe98 	bl	8000a64 <printText>

	//Humidity
	sprintf(Temp_Buffer_text, "Humid  %0.1f %%", humid);
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <assignmentOne+0x22c>)
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d3e:	ec53 2b17 	vmov	r2, r3, d7
 8000d42:	491d      	ldr	r1, [pc, #116]	; (8000db8 <assignmentOne+0x264>)
 8000d44:	4818      	ldr	r0, [pc, #96]	; (8000da8 <assignmentOne+0x254>)
 8000d46:	f006 fda9 	bl	800789c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) Temp_Buffer_text, strlen(Temp_Buffer_text), 1000);
 8000d4a:	4817      	ldr	r0, [pc, #92]	; (8000da8 <assignmentOne+0x254>)
 8000d4c:	f7ff fa78 	bl	8000240 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d58:	4913      	ldr	r1, [pc, #76]	; (8000da8 <assignmentOne+0x254>)
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <assignmentOne+0x238>)
 8000d5c:	f005 fccc 	bl	80066f8 <HAL_UART_Transmit>
	newLine();
 8000d60:	f7ff fea8 	bl	8000ab4 <newLine>
	printText(Temp_Buffer_text,4,20,3);
 8000d64:	2303      	movs	r3, #3
 8000d66:	2214      	movs	r2, #20
 8000d68:	2104      	movs	r1, #4
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <assignmentOne+0x254>)
 8000d6c:	f7ff fe7a 	bl	8000a64 <printText>

	newLine();
 8000d70:	f7ff fea0 	bl	8000ab4 <newLine>
	//HAL_Delay(1000);	// refresh every 1 second
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	08009c60 	.word	0x08009c60
 8000d88:	200002a4 	.word	0x200002a4
 8000d8c:	20000458 	.word	0x20000458
 8000d90:	40020400 	.word	0x40020400
 8000d94:	20000298 	.word	0x20000298
 8000d98:	2000024c 	.word	0x2000024c
 8000d9c:	2000029c 	.word	0x2000029c
 8000da0:	20000000 	.word	0x20000000
 8000da4:	08009c88 	.word	0x08009c88
 8000da8:	200002d8 	.word	0x200002d8
 8000dac:	20000004 	.word	0x20000004
 8000db0:	08009c94 	.word	0x08009c94
 8000db4:	08009ca0 	.word	0x08009ca0
 8000db8:	08009cb0 	.word	0x08009cb0

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000dc0:	f7ff fdd6 	bl	8000970 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000dc4:	f7ff fdfa 	bl	80009bc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f001 fca2 	bl	8002710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dcc:	f000 fa14 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd0:	f7ff fc0a 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000dd4:	f000 febc 	bl	8001b50 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000dd8:	f000 fb1e 	bl	8001418 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000ddc:	f000 fce2 	bl	80017a4 <MX_TIM1_Init>
  MX_RNG_Init();
 8000de0:	f000 fae6 	bl	80013b0 <MX_RNG_Init>
  MX_I2C1_Init();
 8000de4:	f7ff fd40 	bl	8000868 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000de8:	f000 fd30 	bl	800184c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dec:	f000 fd7c 	bl	80018e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000df0:	f000 fe7e 	bl	8001af0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(str, "\n\rAM2320 I2C DEMO Starting . . .\n\r");
 8000df4:	4963      	ldr	r1, [pc, #396]	; (8000f84 <main+0x1c8>)
 8000df6:	4864      	ldr	r0, [pc, #400]	; (8000f88 <main+0x1cc>)
 8000df8:	f006 fd50 	bl	800789c <siprintf>

  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),200);
 8000dfc:	4862      	ldr	r0, [pc, #392]	; (8000f88 <main+0x1cc>)
 8000dfe:	f7ff fa1f 	bl	8000240 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	23c8      	movs	r3, #200	; 0xc8
 8000e08:	495f      	ldr	r1, [pc, #380]	; (8000f88 <main+0x1cc>)
 8000e0a:	4860      	ldr	r0, [pc, #384]	; (8000f8c <main+0x1d0>)
 8000e0c:	f005 fc74 	bl	80066f8 <HAL_UART_Transmit>

  cmdBuffer[0] = 0x03;
 8000e10:	4b5f      	ldr	r3, [pc, #380]	; (8000f90 <main+0x1d4>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	701a      	strb	r2, [r3, #0]
  cmdBuffer[1] = 0x00;
 8000e16:	4b5e      	ldr	r3, [pc, #376]	; (8000f90 <main+0x1d4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	705a      	strb	r2, [r3, #1]
  cmdBuffer[2] = 0x04;
 8000e1c:	4b5c      	ldr	r3, [pc, #368]	; (8000f90 <main+0x1d4>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	709a      	strb	r2, [r3, #2]

  //initial driver setup to drive ili9341
  ILI9341_Init();
 8000e22:	f001 f971 	bl	8002108 <ILI9341_Init>


  //Interrupt millisecond
  HAL_TIM_Base_Start_IT(&htim1);
 8000e26:	485b      	ldr	r0, [pc, #364]	; (8000f94 <main+0x1d8>)
 8000e28:	f004 fa32 	bl	8005290 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e2c:	485a      	ldr	r0, [pc, #360]	; (8000f98 <main+0x1dc>)
 8000e2e:	f004 fa2f 	bl	8005290 <HAL_TIM_Base_Start_IT>


  //Reset Screen
  setHorizontalScreen(BLACK);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fe06 	bl	8000a44 <setHorizontalScreen>
//	  char stringBuffer[30];
//	  sprintf(stringBuffer, "%d\r\n" , millisecond);
//	  HAL_UART_Transmit(&huart3, (uint8_t*) stringBuffer, strlen(stringBuffer), 200);


	  if(halfsecond == 1){  // interupt every 500 ms
 8000e38:	4b58      	ldr	r3, [pc, #352]	; (8000f9c <main+0x1e0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d111      	bne.n	8000e64 <main+0xa8>
		  halfsecondState = !halfsecondState; // check appearing of colon (:) in clock
 8000e40:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <main+0x1e4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bf14      	ite	ne
 8000e48:	2301      	movne	r3, #1
 8000e4a:	2300      	moveq	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f083 0301 	eor.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <main+0x1e4>)
 8000e5c:	701a      	strb	r2, [r3, #0]
		  //displayClock(millisecond);
		  halfsecond = 0;
 8000e5e:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <main+0x1e0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
		  //assignmentTwo();
	  }

	  assignmentOne();
 8000e64:	f7ff fe76 	bl	8000b54 <assignmentOne>

	  pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7); // pressButton1 is "true" when press, is "false" when not press
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	484e      	ldr	r0, [pc, #312]	; (8000fa4 <main+0x1e8>)
 8000e6c:	f001 ff9e 	bl	8002dac <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bf0c      	ite	eq
 8000e76:	2301      	moveq	r3, #1
 8000e78:	2300      	movne	r3, #0
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <main+0x1ec>)
 8000e7e:	701a      	strb	r2, [r3, #0]
	  pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6); // pressButton1 is "true" when press, is "false" when not press
 8000e80:	2140      	movs	r1, #64	; 0x40
 8000e82:	4848      	ldr	r0, [pc, #288]	; (8000fa4 <main+0x1e8>)
 8000e84:	f001 ff92 	bl	8002dac <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b45      	ldr	r3, [pc, #276]	; (8000fac <main+0x1f0>)
 8000e96:	701a      	strb	r2, [r3, #0]
	  pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5); // pressButton1 is "true" when press, is "false" when not press
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4842      	ldr	r0, [pc, #264]	; (8000fa4 <main+0x1e8>)
 8000e9c:	f001 ff86 	bl	8002dac <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2301      	moveq	r3, #1
 8000ea8:	2300      	movne	r3, #0
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <main+0x1f4>)
 8000eae:	701a      	strb	r2, [r3, #0]
	  pressButton4 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4); // pressButton1 is "true" when press, is "false" when not press
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	483c      	ldr	r0, [pc, #240]	; (8000fa4 <main+0x1e8>)
 8000eb4:	f001 ff7a 	bl	8002dac <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bf0c      	ite	eq
 8000ebe:	2301      	moveq	r3, #1
 8000ec0:	2300      	movne	r3, #0
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <main+0x1f8>)
 8000ec6:	701a      	strb	r2, [r3, #0]

	  //Buzzer
	  if((pressButton1 == true && isPressButton1 == false) ||
 8000ec8:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <main+0x1ec>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <main+0x122>
 8000ed0:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <main+0x1fc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	f083 0301 	eor.w	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d120      	bne.n	8000f20 <main+0x164>
		  (pressButton2 == true && isPressButton2 == false) ||
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <main+0x1f0>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
	  if((pressButton1 == true && isPressButton1 == false) ||
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <main+0x138>
		  (pressButton2 == true && isPressButton2 == false) ||
 8000ee6:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <main+0x200>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f083 0301 	eor.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d115      	bne.n	8000f20 <main+0x164>
		  (pressButton3 == true && isPressButton3 == false) ||
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <main+0x1f4>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
		  (pressButton2 == true && isPressButton2 == false) ||
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <main+0x14e>
		  (pressButton3 == true && isPressButton3 == false) ||
 8000efc:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <main+0x204>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f083 0301 	eor.w	r3, r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10a      	bne.n	8000f20 <main+0x164>
		  (pressButton4 == true && isPressButton4 == false)){
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <main+0x1f8>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
		  (pressButton3 == true && isPressButton3 == false) ||
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d008      	beq.n	8000f24 <main+0x168>
		  (pressButton4 == true && isPressButton4 == false)){
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <main+0x208>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f083 0301 	eor.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <main+0x168>
		  buzzerSound();
 8000f20:	f7ff fe02 	bl	8000b28 <buzzerSound>
	  }


	  //General Mode
	  if(pressButton1 == true && isPressButton1 == false && mode == 0){ // increase mode only once
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <main+0x1ec>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <main+0x198>
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <main+0x1fc>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00c      	beq.n	8000f54 <main+0x198>
 8000f3a:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <main+0x20c>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d108      	bne.n	8000f54 <main+0x198>
		  mode++;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <main+0x20c>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <main+0x20c>)
 8000f4c:	801a      	strh	r2, [r3, #0]
		  isPressButton1 = true;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <main+0x1fc>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
	  }


	  //Adjust Time Mode
  	  if(pressButton2 == true && isPressButton2 == false && mode == 0){ // initial time when pressButton2
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <main+0x1f0>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d03b      	beq.n	8000fd4 <main+0x218>
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <main+0x200>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f083 0301 	eor.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d034      	beq.n	8000fd4 <main+0x218>
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <main+0x20c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d130      	bne.n	8000fd4 <main+0x218>
  		  isPressButton2 = true;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <main+0x200>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
  		  prevSecondCounter = millisecondHAL;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <main+0x210>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <main+0x214>)
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	e046      	b.n	8001012 <main+0x256>
 8000f84:	08009cc0 	.word	0x08009cc0
 8000f88:	200002a4 	.word	0x200002a4
 8000f8c:	20000458 	.word	0x20000458
 8000f90:	20000298 	.word	0x20000298
 8000f94:	200003c0 	.word	0x200003c0
 8000f98:	2000040c 	.word	0x2000040c
 8000f9c:	2000022c 	.word	0x2000022c
 8000fa0:	20000028 	.word	0x20000028
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	20000232 	.word	0x20000232
 8000fac:	20000233 	.word	0x20000233
 8000fb0:	20000234 	.word	0x20000234
 8000fb4:	20000235 	.word	0x20000235
 8000fb8:	20000236 	.word	0x20000236
 8000fbc:	20000237 	.word	0x20000237
 8000fc0:	20000238 	.word	0x20000238
 8000fc4:	20000239 	.word	0x20000239
 8000fc8:	20000230 	.word	0x20000230
 8000fcc:	2000023c 	.word	0x2000023c
 8000fd0:	2000023a 	.word	0x2000023a
  	  }else if(pressButton2 == true && isPressButton2 == true && mode == 0 && millisecondHAL - prevSecondCounter >= 3000){ // hold for 3 seconds
 8000fd4:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <main+0x3fc>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01a      	beq.n	8001012 <main+0x256>
 8000fdc:	4b77      	ldr	r3, [pc, #476]	; (80011bc <main+0x400>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d016      	beq.n	8001012 <main+0x256>
 8000fe4:	4b76      	ldr	r3, [pc, #472]	; (80011c0 <main+0x404>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d112      	bne.n	8001012 <main+0x256>
 8000fec:	4b75      	ldr	r3, [pc, #468]	; (80011c4 <main+0x408>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a75      	ldr	r2, [pc, #468]	; (80011c8 <main+0x40c>)
 8000ff2:	8812      	ldrh	r2, [r2, #0]
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d909      	bls.n	8001012 <main+0x256>
		  buzzerSound();
 8000ffe:	f7ff fd93 	bl	8000b28 <buzzerSound>
  		  mode = 100;
 8001002:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <main+0x404>)
 8001004:	2264      	movs	r2, #100	; 0x64
 8001006:	801a      	strh	r2, [r3, #0]
		  prevSecondCounter = millisecondHAL;
 8001008:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <main+0x408>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b6e      	ldr	r3, [pc, #440]	; (80011c8 <main+0x40c>)
 8001010:	801a      	strh	r2, [r3, #0]
	  }

  	  //Exit Adjust Time Mode
  	  if(pressButton2 == true && isPressButton2 == false && millisecondHAL - prevSecondCounter >= 1000 && mode == 100){
 8001012:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <main+0x3fc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01d      	beq.n	8001056 <main+0x29a>
 800101a:	4b68      	ldr	r3, [pc, #416]	; (80011bc <main+0x400>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	f083 0301 	eor.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d016      	beq.n	8001056 <main+0x29a>
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <main+0x408>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a66      	ldr	r2, [pc, #408]	; (80011c8 <main+0x40c>)
 800102e:	8812      	ldrh	r2, [r2, #0]
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001036:	d30e      	bcc.n	8001056 <main+0x29a>
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <main+0x404>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	2b64      	cmp	r3, #100	; 0x64
 800103e:	d10a      	bne.n	8001056 <main+0x29a>
  		  isPressButton2 = true;
 8001040:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <main+0x400>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
  		  mode = 0;
 8001046:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <main+0x404>)
 8001048:	2200      	movs	r2, #0
 800104a:	801a      	strh	r2, [r3, #0]
  		  prevSecondCounter = millisecondHAL;
 800104c:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <main+0x408>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <main+0x40c>)
 8001054:	801a      	strh	r2, [r3, #0]
  	  }

  	  //Edit Mode
	  if(pressButton1 == true && isPressButton1 == false && mode == 100){ // increase mode only once
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <main+0x410>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01d      	beq.n	800109a <main+0x2de>
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <main+0x414>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d016      	beq.n	800109a <main+0x2de>
 800106c:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <main+0x404>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	2b64      	cmp	r3, #100	; 0x64
 8001072:	d112      	bne.n	800109a <main+0x2de>
		  modeEdit++;
 8001074:	4b57      	ldr	r3, [pc, #348]	; (80011d4 <main+0x418>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b55      	ldr	r3, [pc, #340]	; (80011d4 <main+0x418>)
 800107e:	801a      	strh	r2, [r3, #0]
		  isPressButton1 = true;
 8001080:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <main+0x414>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
		  if(modeEdit == 4){ // finish loop edit
 8001086:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <main+0x418>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	2b04      	cmp	r3, #4
 800108c:	d105      	bne.n	800109a <main+0x2de>
			  modeEdit = 1; // Reset to hour
 800108e:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <main+0x418>)
 8001090:	2201      	movs	r2, #1
 8001092:	801a      	strh	r2, [r3, #0]
			  mode = 0;	// Back to General Mode
 8001094:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <main+0x404>)
 8001096:	2200      	movs	r2, #0
 8001098:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  //Forward
	  if(pressButton3 == true && isPressButton3 == false && mode == 100){ // increase value
 800109a:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <main+0x41c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d02d      	beq.n	80010fe <main+0x342>
 80010a2:	4b4e      	ldr	r3, [pc, #312]	; (80011dc <main+0x420>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d026      	beq.n	80010fe <main+0x342>
 80010b0:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <main+0x404>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d122      	bne.n	80010fe <main+0x342>
		  if(modeEdit == 1){
 80010b8:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <main+0x418>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d105      	bne.n	80010cc <main+0x310>
			  hourNum--;
 80010c0:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <main+0x424>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a46      	ldr	r2, [pc, #280]	; (80011e0 <main+0x424>)
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e010      	b.n	80010ee <main+0x332>
		  }else if(modeEdit == 2){
 80010cc:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <main+0x418>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d105      	bne.n	80010e0 <main+0x324>
			  minuteNum--;
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <main+0x428>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <main+0x428>)
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e006      	b.n	80010ee <main+0x332>
		  }else if(modeEdit == 3){
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <main+0x418>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d102      	bne.n	80010ee <main+0x332>
			  secondNum = 0;
 80010e8:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <main+0x42c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
		  }
		  halfsecondState = false;
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <main+0x430>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		  resetPrevNum();
 80010f4:	f7ff fcfe 	bl	8000af4 <resetPrevNum>
		  isPressButton3 = true;
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <main+0x420>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
	  }

	  //Backward
	  if(pressButton4 == true && isPressButton4 == false && mode == 100){ // decrease value
 80010fe:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <main+0x434>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d02d      	beq.n	8001162 <main+0x3a6>
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <main+0x438>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f083 0301 	eor.w	r3, r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d026      	beq.n	8001162 <main+0x3a6>
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <main+0x404>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d122      	bne.n	8001162 <main+0x3a6>
		  if(modeEdit == 1){
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <main+0x418>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d105      	bne.n	8001130 <main+0x374>
			  hourNum++;
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <main+0x424>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <main+0x424>)
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e010      	b.n	8001152 <main+0x396>
		  }else if(modeEdit == 2){
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <main+0x418>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d105      	bne.n	8001144 <main+0x388>
			  minuteNum++;
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <main+0x428>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <main+0x428>)
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e006      	b.n	8001152 <main+0x396>
		  }else if(modeEdit == 3){
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <main+0x418>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d102      	bne.n	8001152 <main+0x396>
			  secondNum = 0;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <main+0x42c>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
		  }
		  halfsecondState = false;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <main+0x430>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
		  resetPrevNum();
 8001158:	f7ff fccc 	bl	8000af4 <resetPrevNum>
		  isPressButton4 = true;
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <main+0x438>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
	  }


  	  //Reset isPressButton
	  if(pressButton1 == false){
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <main+0x410>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <main+0x3ba>
		  isPressButton1 = false;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <main+0x414>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
	  }
  	  if(pressButton2 == false){
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <main+0x3fc>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <main+0x3ce>
		  isPressButton2 = false;
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <main+0x400>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	  }
	  if(pressButton3 == false){
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <main+0x41c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	f083 0301 	eor.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <main+0x3e2>
		  isPressButton3 = false;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <main+0x420>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
	  }
	  if(pressButton4 == false){
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <main+0x434>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f083 0301 	eor.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f43f ae45 	beq.w	8000e38 <main+0x7c>
		  isPressButton4 = false;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <main+0x438>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
	  if(halfsecond == 1){  // interupt every 500 ms
 80011b4:	e640      	b.n	8000e38 <main+0x7c>
 80011b6:	bf00      	nop
 80011b8:	20000233 	.word	0x20000233
 80011bc:	20000237 	.word	0x20000237
 80011c0:	20000230 	.word	0x20000230
 80011c4:	2000023c 	.word	0x2000023c
 80011c8:	2000023a 	.word	0x2000023a
 80011cc:	20000232 	.word	0x20000232
 80011d0:	20000236 	.word	0x20000236
 80011d4:	2000002a 	.word	0x2000002a
 80011d8:	20000234 	.word	0x20000234
 80011dc:	20000238 	.word	0x20000238
 80011e0:	20000018 	.word	0x20000018
 80011e4:	20000014 	.word	0x20000014
 80011e8:	20000010 	.word	0x20000010
 80011ec:	20000028 	.word	0x20000028
 80011f0:	20000235 	.word	0x20000235
 80011f4:	20000239 	.word	0x20000239

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0b8      	sub	sp, #224	; 0xe0
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001202:	2234      	movs	r2, #52	; 0x34
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f005 fefe 	bl	8007008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2290      	movs	r2, #144	; 0x90
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f005 feef 	bl	8007008 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800122a:	f002 fafd 	bl	8003828 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <SystemClock_Config+0x12c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a3c      	ldr	r2, [pc, #240]	; (8001324 <SystemClock_Config+0x12c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <SystemClock_Config+0x12c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <SystemClock_Config+0x130>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a37      	ldr	r2, [pc, #220]	; (8001328 <SystemClock_Config+0x130>)
 800124c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <SystemClock_Config+0x130>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125e:	2301      	movs	r3, #1
 8001260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001264:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800127a:	2304      	movs	r3, #4
 800127c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001280:	23c8      	movs	r3, #200	; 0xc8
 8001282:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800128c:	2309      	movs	r3, #9
 800128e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fb23 	bl	80038e8 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012a8:	f000 f87e 	bl	80013a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012ac:	f002 facc 	bl	8003848 <HAL_PWREx_EnableOverDrive>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b6:	f000 f877 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ba:	230f      	movs	r3, #15
 80012bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012e0:	2106      	movs	r1, #6
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fdae 	bl	8003e44 <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80012ee:	f000 f85b 	bl	80013a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <SystemClock_Config+0x134>)
 80012f4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f6:	2300      	movs	r3, #0
 80012f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012fe:	2300      	movs	r3, #0
 8001300:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4618      	mov	r0, r3
 800130e:	f002 ff9b 	bl	8004248 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001318:	f000 f846 	bl	80013a8 <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	37e0      	adds	r7, #224	; 0xe0
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000
 800132c:	00204140 	.word	0x00204140

08001330 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
      uint16_t 	crc = 0xFFFF;
 800133c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001340:	81fb      	strh	r3, [r7, #14]
      uint8_t 	s 	= 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	737b      	strb	r3, [r7, #13]

      while(length--) {
 8001346:	e023      	b.n	8001390 <CRC16_2+0x60>
        crc ^= *ptr++;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b29a      	uxth	r2, r3
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	4053      	eors	r3, r2
 8001356:	81fb      	strh	r3, [r7, #14]
        for(s = 0; s < 8; s++) {
 8001358:	2300      	movs	r3, #0
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	e015      	b.n	800138a <CRC16_2+0x5a>
          if((crc & 0x01) != 0) {
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00a      	beq.n	800137e <CRC16_2+0x4e>
            crc >>= 1;
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	81fb      	strh	r3, [r7, #14]
            crc ^= 0xA001;
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001374:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001378:	43db      	mvns	r3, r3
 800137a:	81fb      	strh	r3, [r7, #14]
 800137c:	e002      	b.n	8001384 <CRC16_2+0x54>
          } else crc >>= 1;
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	81fb      	strh	r3, [r7, #14]
        for(s = 0; s < 8; s++) {
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	3301      	adds	r3, #1
 8001388:	737b      	strb	r3, [r7, #13]
 800138a:	7b7b      	ldrb	r3, [r7, #13]
 800138c:	2b07      	cmp	r3, #7
 800138e:	d9e6      	bls.n	800135e <CRC16_2+0x2e>
      while(length--) {
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	1e5a      	subs	r2, r3, #1
 8001394:	70fa      	strb	r2, [r7, #3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1d6      	bne.n	8001348 <CRC16_2+0x18>
        }
      }
      return crc;
 800139a:	89fb      	ldrh	r3, [r7, #14]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x4>
	...

080013b0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_RNG_Init+0x20>)
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <MX_RNG_Init+0x24>)
 80013b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_RNG_Init+0x20>)
 80013bc:	f003 fb6c 	bl	8004a98 <HAL_RNG_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80013c6:	f7ff ffef 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000300 	.word	0x20000300
 80013d4:	50060800 	.word	0x50060800

080013d8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_RNG_MspInit+0x38>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10b      	bne.n	8001402 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_RNG_MspInit+0x3c>)
 80013ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <HAL_RNG_MspInit+0x3c>)
 80013f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f4:	6353      	str	r3, [r2, #52]	; 0x34
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_RNG_MspInit+0x3c>)
 80013f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	50060800 	.word	0x50060800
 8001414:	40023800 	.word	0x40023800

08001418 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_SPI5_Init+0x74>)
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <MX_SPI5_Init+0x78>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_SPI5_Init+0x74>)
 8001424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001428:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_SPI5_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_SPI5_Init+0x74>)
 8001432:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001436:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_SPI5_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_SPI5_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_SPI5_Init+0x74>)
 8001446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_SPI5_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_SPI5_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_SPI5_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_SPI5_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_SPI5_Init+0x74>)
 8001466:	2207      	movs	r2, #7
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_SPI5_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_SPI5_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_SPI5_Init+0x74>)
 8001478:	f003 fb38 	bl	8004aec <HAL_SPI_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001482:	f7ff ff91 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000310 	.word	0x20000310
 8001490:	40015000 	.word	0x40015000

08001494 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_SPI_MspInit+0x7c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d128      	bne.n	8001508 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_SPI_MspInit+0x80>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <HAL_SPI_MspInit+0x80>)
 80014bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_SPI_MspInit+0x80>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_SPI_MspInit+0x80>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_SPI_MspInit+0x80>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_SPI_MspInit+0x80>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80014e6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014f8:	2305      	movs	r3, #5
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_SPI_MspInit+0x84>)
 8001504:	f001 faa6 	bl	8002a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40015000 	.word	0x40015000
 8001514:	40023800 	.word	0x40023800
 8001518:	40021400 	.word	0x40021400

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x44>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x44>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x44>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_MspInit+0x44>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_MspInit+0x44>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_MspInit+0x44>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f001 f91e 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001576:	f004 f8df 	bl	8005738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  millisecond++;
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	4a02      	ldr	r2, [pc, #8]	; (800158c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001582:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200003c0 	.word	0x200003c0
 800158c:	20000228 	.word	0x20000228

08001590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <TIM2_IRQHandler+0x14>)
 8001596:	f004 f8cf 	bl	8005738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  halfsecond = 1;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <TIM2_IRQHandler+0x18>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000040c 	.word	0x2000040c
 80015a8:	2000022c 	.word	0x2000022c

080015ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_kill>:

int _kill(int pid, int sig)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015c6:	f005 fcf5 	bl	8006fb4 <__errno>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2216      	movs	r2, #22
 80015ce:	601a      	str	r2, [r3, #0]
	return -1;
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_exit>:

void _exit (int status)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffe7 	bl	80015bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ee:	e7fe      	b.n	80015ee <_exit+0x12>

080015f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00a      	b.n	8001618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001602:	f3af 8000 	nop.w
 8001606:	4601      	mov	r1, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf0      	blt.n	8001602 <_read+0x12>
	}

return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e009      	b.n	8001650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf1      	blt.n	800163c <_write+0x12>
	}
	return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_close>:

int _close(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168a:	605a      	str	r2, [r3, #4]
	return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_isatty>:

int _isatty(int file)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
	return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f005 fc5a 	bl	8006fb4 <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20080000 	.word	0x20080000
 800172c:	00000400 	.word	0x00000400
 8001730:	20000240 	.word	0x20000240
 8001734:	20000578 	.word	0x20000578

08001738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <SystemInit+0x5c>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <SystemInit+0x5c>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <SystemInit+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <SystemInit+0x60>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <SystemInit+0x60>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <SystemInit+0x60>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <SystemInit+0x60>)
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <SystemInit+0x64>)
 8001766:	4013      	ands	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <SystemInit+0x60>)
 800176c:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <SystemInit+0x68>)
 800176e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <SystemInit+0x60>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a08      	ldr	r2, [pc, #32]	; (8001798 <SystemInit+0x60>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x60>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SystemInit+0x5c>)
 8001784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001788:	609a      	str	r2, [r3, #8]
#endif
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	40023800 	.word	0x40023800
 800179c:	fef6ffff 	.word	0xfef6ffff
 80017a0:	24003010 	.word	0x24003010

080017a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_TIM1_Init+0xa0>)
 80017c4:	4a20      	ldr	r2, [pc, #128]	; (8001848 <MX_TIM1_Init+0xa4>)
 80017c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_TIM1_Init+0xa0>)
 80017ca:	22c7      	movs	r2, #199	; 0xc7
 80017cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_TIM1_Init+0xa0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_TIM1_Init+0xa0>)
 80017d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <MX_TIM1_Init+0xa0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_TIM1_Init+0xa0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_TIM1_Init+0xa0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ee:	4815      	ldr	r0, [pc, #84]	; (8001844 <MX_TIM1_Init+0xa0>)
 80017f0:	f003 fcf6 	bl	80051e0 <HAL_TIM_Base_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80017fa:	f7ff fdd5 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001802:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	480e      	ldr	r0, [pc, #56]	; (8001844 <MX_TIM1_Init+0xa0>)
 800180c:	f004 f9c4 	bl	8005b98 <HAL_TIM_ConfigClockSource>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001816:	f7ff fdc7 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <MX_TIM1_Init+0xa0>)
 800182c:	f004 fe6a 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001836:	f7ff fdb7 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200003c0 	.word	0x200003c0
 8001848:	40010000 	.word	0x40010000

0800184c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <MX_TIM2_Init+0x98>)
 800186c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001870:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <MX_TIM2_Init+0x98>)
 8001874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_TIM2_Init+0x98>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_TIM2_Init+0x98>)
 8001882:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_TIM2_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_TIM2_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001894:	4813      	ldr	r0, [pc, #76]	; (80018e4 <MX_TIM2_Init+0x98>)
 8001896:	f003 fca3 	bl	80051e0 <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80018a0:	f7ff fd82 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <MX_TIM2_Init+0x98>)
 80018b2:	f004 f971 	bl	8005b98 <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80018bc:	f7ff fd74 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_TIM2_Init+0x98>)
 80018ce:	f004 fe19 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80018d8:	f7ff fd66 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000040c 	.word	0x2000040c

080018e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001908:	463b      	mov	r3, r7
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <MX_TIM3_Init+0xe8>)
 800191c:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <MX_TIM3_Init+0xec>)
 800191e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250-1;
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <MX_TIM3_Init+0xe8>)
 8001922:	22f9      	movs	r2, #249	; 0xf9
 8001924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_TIM3_Init+0xe8>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <MX_TIM3_Init+0xe8>)
 800192e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <MX_TIM3_Init+0xe8>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <MX_TIM3_Init+0xe8>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001940:	4823      	ldr	r0, [pc, #140]	; (80019d0 <MX_TIM3_Init+0xe8>)
 8001942:	f003 fc4d 	bl	80051e0 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800194c:	f7ff fd2c 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	4619      	mov	r1, r3
 800195c:	481c      	ldr	r0, [pc, #112]	; (80019d0 <MX_TIM3_Init+0xe8>)
 800195e:	f004 f91b 	bl	8005b98 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001968:	f7ff fd1e 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800196c:	4818      	ldr	r0, [pc, #96]	; (80019d0 <MX_TIM3_Init+0xe8>)
 800196e:	f003 fd07 	bl	8005380 <HAL_TIM_PWM_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001978:	f7ff fd16 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4811      	ldr	r0, [pc, #68]	; (80019d0 <MX_TIM3_Init+0xe8>)
 800198c:	f004 fdba 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001996:	f7ff fd07 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199a:	2360      	movs	r3, #96	; 0x60
 800199c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 800199e:	f240 33e7 	movw	r3, #999	; 0x3e7
 80019a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	4619      	mov	r1, r3
 80019b2:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM3_Init+0xe8>)
 80019b4:	f003 ffe0 	bl	8005978 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80019be:	f7ff fcf3 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM3_Init+0xe8>)
 80019c4:	f000 f85c 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 80019c8:	bf00      	nop
 80019ca:	3738      	adds	r7, #56	; 0x38
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000374 	.word	0x20000374
 80019d4:	40000400 	.word	0x40000400

080019d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_TIM_Base_MspInit+0x9c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d114      	bne.n	8001a14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2101      	movs	r1, #1
 8001a06:	2019      	movs	r0, #25
 8001a08:	f000 ffed 	bl	80029e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a0c:	2019      	movs	r0, #25
 8001a0e:	f001 f806 	bl	8002a1e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a12:	e02a      	b.n	8001a6a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d114      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2102      	movs	r1, #2
 8001a3a:	201c      	movs	r0, #28
 8001a3c:	f000 ffd3 	bl	80029e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a40:	201c      	movs	r0, #28
 8001a42:	f000 ffec 	bl	8002a1e <HAL_NVIC_EnableIRQ>
}
 8001a46:	e010      	b.n	8001a6a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_Base_MspInit+0xa4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10b      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40010000 	.word	0x40010000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40000400 	.word	0x40000400

08001a80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_TIM_MspPostInit+0x64>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d11b      	bne.n	8001ada <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aba:	2340      	movs	r3, #64	; 0x40
 8001abc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <HAL_TIM_MspPostInit+0x6c>)
 8001ad6:	f000 ffbd 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020000 	.word	0x40020000

08001af0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <MX_USART1_UART_Init+0x5c>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b34:	f004 fd92 	bl	800665c <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b3e:	f7ff fc33 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200004dc 	.word	0x200004dc
 8001b4c:	40011000 	.word	0x40011000

08001b50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b56:	4a15      	ldr	r2, [pc, #84]	; (8001bac <MX_USART3_UART_Init+0x5c>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b94:	f004 fd62 	bl	800665c <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b9e:	f7ff fc03 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000458 	.word	0x20000458
 8001bac:	40004800 	.word	0x40004800

08001bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a37      	ldr	r2, [pc, #220]	; (8001cac <HAL_UART_MspInit+0xfc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d139      	bne.n	8001c46 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a36      	ldr	r2, [pc, #216]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c14:	2304      	movs	r3, #4
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4825      	ldr	r0, [pc, #148]	; (8001cb4 <HAL_UART_MspInit+0x104>)
 8001c20:	f000 ff18 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c24:	2340      	movs	r3, #64	; 0x40
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c34:	2307      	movs	r3, #7
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	481d      	ldr	r0, [pc, #116]	; (8001cb4 <HAL_UART_MspInit+0x104>)
 8001c40:	f000 ff08 	bl	8002a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c44:	e02d      	b.n	8001ca2 <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_UART_MspInit+0x108>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d128      	bne.n	8001ca2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_UART_MspInit+0x100>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c92:	2307      	movs	r3, #7
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <HAL_UART_MspInit+0x10c>)
 8001c9e:	f000 fed9 	bl	8002a54 <HAL_GPIO_Init>
}
 8001ca2:	bf00      	nop
 8001ca4:	3730      	adds	r7, #48	; 0x30
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40004800 	.word	0x40004800
 8001cbc:	40020c00 	.word	0x40020c00

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cd0:	480b      	ldr	r0, [pc, #44]	; (8001d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cea:	f7ff fd25 	bl	8001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f005 f967 	bl	8006fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7ff f863 	bl	8000dbc <main>
  bx  lr    
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001cfc:	0800a32c 	.word	0x0800a32c
  ldr  r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d04:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8001d08:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8001d0c:	20000574 	.word	0x20000574

08001d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>
	...

08001d14 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	4603      	mov	r3, r0
 8001d28:	71bb      	strb	r3, [r7, #6]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	717b      	strb	r3, [r7, #5]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b1f      	cmp	r3, #31
 8001d3a:	d802      	bhi.n	8001d42 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]
 8001d40:	e002      	b.n	8001d48 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	3b20      	subs	r3, #32
 8001d46:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	753b      	strb	r3, [r7, #20]
 8001d4c:	e012      	b.n	8001d74 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001d4e:	7dfa      	ldrb	r2, [r7, #23]
 8001d50:	7d38      	ldrb	r0, [r7, #20]
 8001d52:	7d39      	ldrb	r1, [r7, #20]
 8001d54:	4c3c      	ldr	r4, [pc, #240]	; (8001e48 <ILI9341_Draw_Char+0x134>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4423      	add	r3, r4
 8001d60:	4403      	add	r3, r0
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	440b      	add	r3, r1
 8001d6a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001d6e:	7d3b      	ldrb	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	753b      	strb	r3, [r7, #20]
 8001d74:	7d3b      	ldrb	r3, [r7, #20]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d9e9      	bls.n	8001d4e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	b298      	uxth	r0, r3
 8001d7e:	797b      	ldrb	r3, [r7, #5]
 8001d80:	b299      	uxth	r1, r3
 8001d82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d84:	461a      	mov	r2, r3
 8001d86:	0052      	lsls	r2, r2, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	b29c      	uxth	r4, r3
 8001d94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4623      	mov	r3, r4
 8001d9a:	f000 fc5d 	bl	8002658 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001d9e:	2300      	movs	r3, #0
 8001da0:	757b      	strb	r3, [r7, #21]
 8001da2:	e048      	b.n	8001e36 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001da4:	2300      	movs	r3, #0
 8001da6:	75bb      	strb	r3, [r7, #22]
 8001da8:	e03f      	b.n	8001e2a <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8001daa:	7d7b      	ldrb	r3, [r7, #21]
 8001dac:	f107 0218 	add.w	r2, r7, #24
 8001db0:	4413      	add	r3, r2
 8001db2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001db6:	461a      	mov	r2, r3
 8001db8:	7dbb      	ldrb	r3, [r7, #22]
 8001dba:	fa42 f303 	asr.w	r3, r2, r3
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d02e      	beq.n	8001e24 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8001dc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d110      	bne.n	8001dee <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	7d7b      	ldrb	r3, [r7, #21]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b298      	uxth	r0, r3
 8001dd8:	797b      	ldrb	r3, [r7, #5]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	7dbb      	ldrb	r3, [r7, #22]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	887a      	ldrh	r2, [r7, #2]
 8001de6:	4619      	mov	r1, r3
 8001de8:	f000 fb5c 	bl	80024a4 <ILI9341_Draw_Pixel>
 8001dec:	e01a      	b.n	8001e24 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	7d7b      	ldrb	r3, [r7, #21]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001df8:	fb11 f303 	smulbb	r3, r1, r3
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	b298      	uxth	r0, r3
 8001e02:	797b      	ldrb	r3, [r7, #5]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	7dbb      	ldrb	r3, [r7, #22]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001e0c:	fb11 f303 	smulbb	r3, r1, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	b299      	uxth	r1, r3
 8001e16:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001e18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	4623      	mov	r3, r4
 8001e20:	f000 fc1a 	bl	8002658 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001e24:	7dbb      	ldrb	r3, [r7, #22]
 8001e26:	3301      	adds	r3, #1
 8001e28:	75bb      	strb	r3, [r7, #22]
 8001e2a:	7dbb      	ldrb	r3, [r7, #22]
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	d9bc      	bls.n	8001daa <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001e30:	7d7b      	ldrb	r3, [r7, #21]
 8001e32:	3301      	adds	r3, #1
 8001e34:	757b      	strb	r3, [r7, #21]
 8001e36:	7d7b      	ldrb	r3, [r7, #21]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d9b3      	bls.n	8001da4 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	08009cfc 	.word	0x08009cfc

08001e4c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	70fb      	strb	r3, [r7, #3]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70bb      	strb	r3, [r7, #2]
 8001e62:	4613      	mov	r3, r2
 8001e64:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001e66:	e017      	b.n	8001e98 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	7818      	ldrb	r0, [r3, #0]
 8001e70:	883c      	ldrh	r4, [r7, #0]
 8001e72:	78ba      	ldrb	r2, [r7, #2]
 8001e74:	78f9      	ldrb	r1, [r7, #3]
 8001e76:	8bbb      	ldrh	r3, [r7, #28]
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	8b3b      	ldrh	r3, [r7, #24]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4623      	mov	r3, r4
 8001e80:	f7ff ff48 	bl	8001d14 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001e84:	8b3b      	ldrh	r3, [r7, #24]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	0052      	lsls	r2, r2, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	4413      	add	r3, r2
 8001e96:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e3      	bne.n	8001e68 <ILI9341_Draw_Text+0x1c>
    }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
	...

08001eac <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8001eb0:	f7ff fab2 	bl	8001418 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001eb4:	f7fe fb98 	bl	80005e8 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ebe:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <ILI9341_SPI_Init+0x1c>)
 8001ec0:	f000 ff8c 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40020800 	.word	0x40020800

08001ecc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001ed6:	1df9      	adds	r1, r7, #7
 8001ed8:	2301      	movs	r3, #1
 8001eda:	2201      	movs	r2, #1
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <ILI9341_SPI_Send+0x20>)
 8001ede:	f002 feb0 	bl	8004c42 <HAL_SPI_Transmit>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000310 	.word	0x20000310

08001ef0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <ILI9341_Write_Command+0x40>)
 8001f02:	f000 ff6b 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001f06:	2200      	movs	r2, #0
 8001f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f0c:	4808      	ldr	r0, [pc, #32]	; (8001f30 <ILI9341_Write_Command+0x40>)
 8001f0e:	f000 ff65 	bl	8002ddc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ffd9 	bl	8001ecc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <ILI9341_Write_Command+0x40>)
 8001f22:	f000 ff5b 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40020800 	.word	0x40020800

08001f34 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f44:	480b      	ldr	r0, [pc, #44]	; (8001f74 <ILI9341_Write_Data+0x40>)
 8001f46:	f000 ff49 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f50:	4808      	ldr	r0, [pc, #32]	; (8001f74 <ILI9341_Write_Data+0x40>)
 8001f52:	f000 ff43 	bl	8002ddc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ffb7 	bl	8001ecc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <ILI9341_Write_Data+0x40>)
 8001f66:	f000 ff39 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40020800 	.word	0x40020800

08001f78 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4604      	mov	r4, r0
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	80fb      	strh	r3, [r7, #6]
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80bb      	strh	r3, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
 8001f92:	4613      	mov	r3, r2
 8001f94:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001f96:	202a      	movs	r0, #42	; 0x2a
 8001f98:	f7ff ffaa 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ffc5 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ffc0 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ffb9 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ffb4 	bl	8001f34 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001fcc:	202b      	movs	r0, #43	; 0x2b
 8001fce:	f7ff ff8f 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ffaa 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001fe0:	88bb      	ldrh	r3, [r7, #4]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ffa5 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001fea:	883b      	ldrh	r3, [r7, #0]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff9e 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001ff8:	883b      	ldrh	r3, [r7, #0]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff99 	bl	8001f34 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002002:	202c      	movs	r0, #44	; 0x2c
 8002004:	f7ff ff74 	bl	8001ef0 <ILI9341_Write_Command>
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}

08002010 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201a:	480b      	ldr	r0, [pc, #44]	; (8002048 <ILI9341_Reset+0x38>)
 800201c:	f000 fede 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002020:	20c8      	movs	r0, #200	; 0xc8
 8002022:	f000 fbe1 	bl	80027e8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <ILI9341_Reset+0x38>)
 800202e:	f000 fed5 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002032:	20c8      	movs	r0, #200	; 0xc8
 8002034:	f000 fbd8 	bl	80027e8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002038:	2201      	movs	r2, #1
 800203a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203e:	4802      	ldr	r0, [pc, #8]	; (8002048 <ILI9341_Reset+0x38>)
 8002040:	f000 fecc 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40020800 	.word	0x40020800

0800204c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800205a:	2036      	movs	r0, #54	; 0x36
 800205c:	f7ff ff48 	bl	8001ef0 <ILI9341_Write_Command>
HAL_Delay(1);
 8002060:	2001      	movs	r0, #1
 8002062:	f000 fbc1 	bl	80027e8 <HAL_Delay>
	
switch(screen_rotation) 
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d837      	bhi.n	80020dc <ILI9341_Set_Rotation+0x90>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <ILI9341_Set_Rotation+0x28>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002085 	.word	0x08002085
 8002078:	0800209b 	.word	0x0800209b
 800207c:	080020b1 	.word	0x080020b1
 8002080:	080020c7 	.word	0x080020c7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002084:	2048      	movs	r0, #72	; 0x48
 8002086:	f7ff ff55 	bl	8001f34 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <ILI9341_Set_Rotation+0x9c>)
 800208c:	22f0      	movs	r2, #240	; 0xf0
 800208e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <ILI9341_Set_Rotation+0xa0>)
 8002092:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002096:	801a      	strh	r2, [r3, #0]
			break;
 8002098:	e021      	b.n	80020de <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800209a:	2028      	movs	r0, #40	; 0x28
 800209c:	f7ff ff4a 	bl	8001f34 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <ILI9341_Set_Rotation+0x9c>)
 80020a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020a6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <ILI9341_Set_Rotation+0xa0>)
 80020aa:	22f0      	movs	r2, #240	; 0xf0
 80020ac:	801a      	strh	r2, [r3, #0]
			break;
 80020ae:	e016      	b.n	80020de <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80020b0:	2088      	movs	r0, #136	; 0x88
 80020b2:	f7ff ff3f 	bl	8001f34 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <ILI9341_Set_Rotation+0x9c>)
 80020b8:	22f0      	movs	r2, #240	; 0xf0
 80020ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <ILI9341_Set_Rotation+0xa0>)
 80020be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020c2:	801a      	strh	r2, [r3, #0]
			break;
 80020c4:	e00b      	b.n	80020de <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80020c6:	20e8      	movs	r0, #232	; 0xe8
 80020c8:	f7ff ff34 	bl	8001f34 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <ILI9341_Set_Rotation+0x9c>)
 80020ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020d2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <ILI9341_Set_Rotation+0xa0>)
 80020d6:	22f0      	movs	r2, #240	; 0xf0
 80020d8:	801a      	strh	r2, [r3, #0]
			break;
 80020da:	e000      	b.n	80020de <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80020dc:	bf00      	nop
	}
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000032 	.word	0x20000032
 80020ec:	20000030 	.word	0x20000030

080020f0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020fa:	4802      	ldr	r0, [pc, #8]	; (8002104 <ILI9341_Enable+0x14>)
 80020fc:	f000 fe6e 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020800 	.word	0x40020800

08002108 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800210c:	f7ff fff0 	bl	80020f0 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002110:	f7ff fecc 	bl	8001eac <ILI9341_SPI_Init>
ILI9341_Reset();
 8002114:	f7ff ff7c 	bl	8002010 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff fee9 	bl	8001ef0 <ILI9341_Write_Command>
HAL_Delay(1000);
 800211e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002122:	f000 fb61 	bl	80027e8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002126:	20cb      	movs	r0, #203	; 0xcb
 8002128:	f7ff fee2 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800212c:	2039      	movs	r0, #57	; 0x39
 800212e:	f7ff ff01 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002132:	202c      	movs	r0, #44	; 0x2c
 8002134:	f7ff fefe 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff fefb 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800213e:	2034      	movs	r0, #52	; 0x34
 8002140:	f7ff fef8 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002144:	2002      	movs	r0, #2
 8002146:	f7ff fef5 	bl	8001f34 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800214a:	20cf      	movs	r0, #207	; 0xcf
 800214c:	f7ff fed0 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff feef 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002156:	20c1      	movs	r0, #193	; 0xc1
 8002158:	f7ff feec 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800215c:	2030      	movs	r0, #48	; 0x30
 800215e:	f7ff fee9 	bl	8001f34 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002162:	20e8      	movs	r0, #232	; 0xe8
 8002164:	f7ff fec4 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002168:	2085      	movs	r0, #133	; 0x85
 800216a:	f7ff fee3 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff fee0 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002174:	2078      	movs	r0, #120	; 0x78
 8002176:	f7ff fedd 	bl	8001f34 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800217a:	20ea      	movs	r0, #234	; 0xea
 800217c:	f7ff feb8 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002180:	2000      	movs	r0, #0
 8002182:	f7ff fed7 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff fed4 	bl	8001f34 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800218c:	20ed      	movs	r0, #237	; 0xed
 800218e:	f7ff feaf 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002192:	2064      	movs	r0, #100	; 0x64
 8002194:	f7ff fece 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002198:	2003      	movs	r0, #3
 800219a:	f7ff fecb 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800219e:	2012      	movs	r0, #18
 80021a0:	f7ff fec8 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80021a4:	2081      	movs	r0, #129	; 0x81
 80021a6:	f7ff fec5 	bl	8001f34 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80021aa:	20f7      	movs	r0, #247	; 0xf7
 80021ac:	f7ff fea0 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80021b0:	2020      	movs	r0, #32
 80021b2:	f7ff febf 	bl	8001f34 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80021b6:	20c0      	movs	r0, #192	; 0xc0
 80021b8:	f7ff fe9a 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80021bc:	2023      	movs	r0, #35	; 0x23
 80021be:	f7ff feb9 	bl	8001f34 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80021c2:	20c1      	movs	r0, #193	; 0xc1
 80021c4:	f7ff fe94 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80021c8:	2010      	movs	r0, #16
 80021ca:	f7ff feb3 	bl	8001f34 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80021ce:	20c5      	movs	r0, #197	; 0xc5
 80021d0:	f7ff fe8e 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80021d4:	203e      	movs	r0, #62	; 0x3e
 80021d6:	f7ff fead 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80021da:	2028      	movs	r0, #40	; 0x28
 80021dc:	f7ff feaa 	bl	8001f34 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80021e0:	20c7      	movs	r0, #199	; 0xc7
 80021e2:	f7ff fe85 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80021e6:	2086      	movs	r0, #134	; 0x86
 80021e8:	f7ff fea4 	bl	8001f34 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80021ec:	2036      	movs	r0, #54	; 0x36
 80021ee:	f7ff fe7f 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80021f2:	2048      	movs	r0, #72	; 0x48
 80021f4:	f7ff fe9e 	bl	8001f34 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80021f8:	203a      	movs	r0, #58	; 0x3a
 80021fa:	f7ff fe79 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80021fe:	2055      	movs	r0, #85	; 0x55
 8002200:	f7ff fe98 	bl	8001f34 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002204:	20b1      	movs	r0, #177	; 0xb1
 8002206:	f7ff fe73 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff fe92 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002210:	2018      	movs	r0, #24
 8002212:	f7ff fe8f 	bl	8001f34 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002216:	20b6      	movs	r0, #182	; 0xb6
 8002218:	f7ff fe6a 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800221c:	2008      	movs	r0, #8
 800221e:	f7ff fe89 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002222:	2082      	movs	r0, #130	; 0x82
 8002224:	f7ff fe86 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002228:	2027      	movs	r0, #39	; 0x27
 800222a:	f7ff fe83 	bl	8001f34 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800222e:	20f2      	movs	r0, #242	; 0xf2
 8002230:	f7ff fe5e 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff fe7d 	bl	8001f34 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800223a:	2026      	movs	r0, #38	; 0x26
 800223c:	f7ff fe58 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002240:	2001      	movs	r0, #1
 8002242:	f7ff fe77 	bl	8001f34 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002246:	20e0      	movs	r0, #224	; 0xe0
 8002248:	f7ff fe52 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800224c:	200f      	movs	r0, #15
 800224e:	f7ff fe71 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002252:	2031      	movs	r0, #49	; 0x31
 8002254:	f7ff fe6e 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002258:	202b      	movs	r0, #43	; 0x2b
 800225a:	f7ff fe6b 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800225e:	200c      	movs	r0, #12
 8002260:	f7ff fe68 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002264:	200e      	movs	r0, #14
 8002266:	f7ff fe65 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800226a:	2008      	movs	r0, #8
 800226c:	f7ff fe62 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002270:	204e      	movs	r0, #78	; 0x4e
 8002272:	f7ff fe5f 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002276:	20f1      	movs	r0, #241	; 0xf1
 8002278:	f7ff fe5c 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800227c:	2037      	movs	r0, #55	; 0x37
 800227e:	f7ff fe59 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002282:	2007      	movs	r0, #7
 8002284:	f7ff fe56 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002288:	2010      	movs	r0, #16
 800228a:	f7ff fe53 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800228e:	2003      	movs	r0, #3
 8002290:	f7ff fe50 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002294:	200e      	movs	r0, #14
 8002296:	f7ff fe4d 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800229a:	2009      	movs	r0, #9
 800229c:	f7ff fe4a 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff fe47 	bl	8001f34 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80022a6:	20e1      	movs	r0, #225	; 0xe1
 80022a8:	f7ff fe22 	bl	8001ef0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff fe41 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80022b2:	200e      	movs	r0, #14
 80022b4:	f7ff fe3e 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80022b8:	2014      	movs	r0, #20
 80022ba:	f7ff fe3b 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80022be:	2003      	movs	r0, #3
 80022c0:	f7ff fe38 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80022c4:	2011      	movs	r0, #17
 80022c6:	f7ff fe35 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80022ca:	2007      	movs	r0, #7
 80022cc:	f7ff fe32 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80022d0:	2031      	movs	r0, #49	; 0x31
 80022d2:	f7ff fe2f 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80022d6:	20c1      	movs	r0, #193	; 0xc1
 80022d8:	f7ff fe2c 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80022dc:	2048      	movs	r0, #72	; 0x48
 80022de:	f7ff fe29 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80022e2:	2008      	movs	r0, #8
 80022e4:	f7ff fe26 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80022e8:	200f      	movs	r0, #15
 80022ea:	f7ff fe23 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80022ee:	200c      	movs	r0, #12
 80022f0:	f7ff fe20 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80022f4:	2031      	movs	r0, #49	; 0x31
 80022f6:	f7ff fe1d 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80022fa:	2036      	movs	r0, #54	; 0x36
 80022fc:	f7ff fe1a 	bl	8001f34 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002300:	200f      	movs	r0, #15
 8002302:	f7ff fe17 	bl	8001f34 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002306:	2011      	movs	r0, #17
 8002308:	f7ff fdf2 	bl	8001ef0 <ILI9341_Write_Command>
HAL_Delay(120);
 800230c:	2078      	movs	r0, #120	; 0x78
 800230e:	f000 fa6b 	bl	80027e8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002312:	2029      	movs	r0, #41	; 0x29
 8002314:	f7ff fdec 	bl	8001ef0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff fe97 	bl	800204c <ILI9341_Set_Rotation>
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	80fb      	strh	r3, [r7, #6]
 8002330:	466b      	mov	r3, sp
 8002332:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002340:	d202      	bcs.n	8002348 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	e002      	b.n	800234e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002348:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002354:	483e      	ldr	r0, [pc, #248]	; (8002450 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002356:	f000 fd41 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002360:	483b      	ldr	r0, [pc, #236]	; (8002450 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002362:	f000 fd3b 	bl	8002ddc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b29b      	uxth	r3, r3
 800236c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002370:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002372:	4623      	mov	r3, r4
 8002374:	3b01      	subs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	4620      	mov	r0, r4
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	00cb      	lsls	r3, r1, #3
 8002388:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800238c:	00c2      	lsls	r2, r0, #3
 800238e:	4620      	mov	r0, r4
 8002390:	f04f 0100 	mov.w	r1, #0
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	00cb      	lsls	r3, r1, #3
 800239e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80023a2:	00c2      	lsls	r2, r0, #3
 80023a4:	1de3      	adds	r3, r4, #7
 80023a6:	08db      	lsrs	r3, r3, #3
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	ebad 0d03 	sub.w	sp, sp, r3
 80023ae:	466b      	mov	r3, sp
 80023b0:	3300      	adds	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b8:	e00e      	b.n	80023d8 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	4413      	add	r3, r2
 80023c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023c4:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	3301      	adds	r3, #1
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	b2d1      	uxtb	r1, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	3302      	adds	r3, #2
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3ec      	bcc.n	80023ba <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80023f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fa:	fb01 f202 	mul.w	r2, r1, r2
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d010      	beq.n	800242a <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240c:	e009      	b.n	8002422 <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	b29a      	uxth	r2, r3
 8002414:	230a      	movs	r3, #10
 8002416:	480f      	ldr	r0, [pc, #60]	; (8002454 <ILI9341_Draw_Colour_Burst+0x130>)
 8002418:	f002 fc13 	bl	8004c42 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	3301      	adds	r3, #1
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	429a      	cmp	r2, r3
 8002428:	d3f1      	bcc.n	800240e <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	b29a      	uxth	r2, r3
 8002430:	230a      	movs	r3, #10
 8002432:	4808      	ldr	r0, [pc, #32]	; (8002454 <ILI9341_Draw_Colour_Burst+0x130>)
 8002434:	f002 fc05 	bl	8004c42 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800243e:	4804      	ldr	r0, [pc, #16]	; (8002450 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002440:	f000 fccc 	bl	8002ddc <HAL_GPIO_WritePin>
 8002444:	46ad      	mov	sp, r5
}
 8002446:	bf00      	nop
 8002448:	3730      	adds	r7, #48	; 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bdb0      	pop	{r4, r5, r7, pc}
 800244e:	bf00      	nop
 8002450:	40020800 	.word	0x40020800
 8002454:	20000310 	.word	0x20000310

08002458 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <ILI9341_Fill_Screen+0x44>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <ILI9341_Fill_Screen+0x48>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	2100      	movs	r1, #0
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff fd81 	bl	8001f78 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <ILI9341_Fill_Screen+0x44>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <ILI9341_Fill_Screen+0x48>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	fb03 f302 	mul.w	r3, r3, r2
 8002488:	461a      	mov	r2, r3
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff48 	bl	8002324 <ILI9341_Draw_Colour_Burst>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000032 	.word	0x20000032
 80024a0:	20000030 	.word	0x20000030

080024a4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
 80024ae:	460b      	mov	r3, r1
 80024b0:	80bb      	strh	r3, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80024b6:	4b64      	ldr	r3, [pc, #400]	; (8002648 <ILI9341_Draw_Pixel+0x1a4>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	429a      	cmp	r2, r3
 80024c0:	f080 80be 	bcs.w	8002640 <ILI9341_Draw_Pixel+0x19c>
 80024c4:	4b61      	ldr	r3, [pc, #388]	; (800264c <ILI9341_Draw_Pixel+0x1a8>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	88ba      	ldrh	r2, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f080 80b7 	bcs.w	8002640 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80024d2:	2200      	movs	r2, #0
 80024d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d8:	485d      	ldr	r0, [pc, #372]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 80024da:	f000 fc7f 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e4:	485a      	ldr	r0, [pc, #360]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 80024e6:	f000 fc79 	bl	8002ddc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80024ea:	202a      	movs	r0, #42	; 0x2a
 80024ec:	f7ff fcee 	bl	8001ecc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80024f0:	2201      	movs	r2, #1
 80024f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024f6:	4856      	ldr	r0, [pc, #344]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 80024f8:	f000 fc70 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80024fc:	2201      	movs	r2, #1
 80024fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002502:	4853      	ldr	r0, [pc, #332]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 8002504:	f000 fc6a 	bl	8002ddc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002508:	2200      	movs	r2, #0
 800250a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800250e:	4850      	ldr	r0, [pc, #320]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 8002510:	f000 fc64 	bl	8002ddc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	b29b      	uxth	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	753b      	strb	r3, [r7, #20]
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	757b      	strb	r3, [r7, #21]
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	3301      	adds	r3, #1
 8002528:	121b      	asrs	r3, r3, #8
 800252a:	b2db      	uxtb	r3, r3
 800252c:	75bb      	strb	r3, [r7, #22]
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002538:	f107 0114 	add.w	r1, r7, #20
 800253c:	2301      	movs	r3, #1
 800253e:	2204      	movs	r2, #4
 8002540:	4844      	ldr	r0, [pc, #272]	; (8002654 <ILI9341_Draw_Pixel+0x1b0>)
 8002542:	f002 fb7e 	bl	8004c42 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800254c:	4840      	ldr	r0, [pc, #256]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 800254e:	f000 fc45 	bl	8002ddc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002552:	2200      	movs	r2, #0
 8002554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002558:	483d      	ldr	r0, [pc, #244]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 800255a:	f000 fc3f 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800255e:	2200      	movs	r2, #0
 8002560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002564:	483a      	ldr	r0, [pc, #232]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 8002566:	f000 fc39 	bl	8002ddc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800256a:	202b      	movs	r0, #43	; 0x2b
 800256c:	f7ff fcae 	bl	8001ecc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002570:	2201      	movs	r2, #1
 8002572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002576:	4836      	ldr	r0, [pc, #216]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 8002578:	f000 fc30 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002582:	4833      	ldr	r0, [pc, #204]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 8002584:	f000 fc2a 	bl	8002ddc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800258e:	4830      	ldr	r0, [pc, #192]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 8002590:	f000 fc24 	bl	8002ddc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b29b      	uxth	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	743b      	strb	r3, [r7, #16]
 800259e:	88bb      	ldrh	r3, [r7, #4]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	747b      	strb	r3, [r7, #17]
 80025a4:	88bb      	ldrh	r3, [r7, #4]
 80025a6:	3301      	adds	r3, #1
 80025a8:	121b      	asrs	r3, r3, #8
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	74bb      	strb	r3, [r7, #18]
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80025b8:	f107 0110 	add.w	r1, r7, #16
 80025bc:	2301      	movs	r3, #1
 80025be:	2204      	movs	r2, #4
 80025c0:	4824      	ldr	r0, [pc, #144]	; (8002654 <ILI9341_Draw_Pixel+0x1b0>)
 80025c2:	f002 fb3e 	bl	8004c42 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025cc:	4820      	ldr	r0, [pc, #128]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 80025ce:	f000 fc05 	bl	8002ddc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d8:	481d      	ldr	r0, [pc, #116]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 80025da:	f000 fbff 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80025de:	2200      	movs	r2, #0
 80025e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e4:	481a      	ldr	r0, [pc, #104]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 80025e6:	f000 fbf9 	bl	8002ddc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80025ea:	202c      	movs	r0, #44	; 0x2c
 80025ec:	f7ff fc6e 	bl	8001ecc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80025f0:	2201      	movs	r2, #1
 80025f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f6:	4816      	ldr	r0, [pc, #88]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 80025f8:	f000 fbf0 	bl	8002ddc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002602:	4813      	ldr	r0, [pc, #76]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 8002604:	f000 fbea 	bl	8002ddc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002608:	2200      	movs	r2, #0
 800260a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800260e:	4810      	ldr	r0, [pc, #64]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 8002610:	f000 fbe4 	bl	8002ddc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	b29b      	uxth	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	733b      	strb	r3, [r7, #12]
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002624:	f107 010c 	add.w	r1, r7, #12
 8002628:	2301      	movs	r3, #1
 800262a:	2202      	movs	r2, #2
 800262c:	4809      	ldr	r0, [pc, #36]	; (8002654 <ILI9341_Draw_Pixel+0x1b0>)
 800262e:	f002 fb08 	bl	8004c42 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002638:	4805      	ldr	r0, [pc, #20]	; (8002650 <ILI9341_Draw_Pixel+0x1ac>)
 800263a:	f000 fbcf 	bl	8002ddc <HAL_GPIO_WritePin>
 800263e:	e000      	b.n	8002642 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002640:	bf00      	nop
	
}
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000032 	.word	0x20000032
 800264c:	20000030 	.word	0x20000030
 8002650:	40020800 	.word	0x40020800
 8002654:	20000310 	.word	0x20000310

08002658 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4604      	mov	r4, r0
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4623      	mov	r3, r4
 8002668:	80fb      	strh	r3, [r7, #6]
 800266a:	4603      	mov	r3, r0
 800266c:	80bb      	strh	r3, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	807b      	strh	r3, [r7, #2]
 8002672:	4613      	mov	r3, r2
 8002674:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <ILI9341_Draw_Rectangle+0xb0>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	88fa      	ldrh	r2, [r7, #6]
 800267e:	429a      	cmp	r2, r3
 8002680:	d23d      	bcs.n	80026fe <ILI9341_Draw_Rectangle+0xa6>
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <ILI9341_Draw_Rectangle+0xb4>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	88ba      	ldrh	r2, [r7, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d237      	bcs.n	80026fe <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	4413      	add	r3, r2
 8002694:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <ILI9341_Draw_Rectangle+0xb0>)
 8002696:	8812      	ldrh	r2, [r2, #0]
 8002698:	b292      	uxth	r2, r2
 800269a:	4293      	cmp	r3, r2
 800269c:	dd05      	ble.n	80026aa <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <ILI9341_Draw_Rectangle+0xb0>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80026aa:	88ba      	ldrh	r2, [r7, #4]
 80026ac:	883b      	ldrh	r3, [r7, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <ILI9341_Draw_Rectangle+0xb4>)
 80026b2:	8812      	ldrh	r2, [r2, #0]
 80026b4:	b292      	uxth	r2, r2
 80026b6:	4293      	cmp	r3, r2
 80026b8:	dd05      	ble.n	80026c6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <ILI9341_Draw_Rectangle+0xb4>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	88bb      	ldrh	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	4413      	add	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29c      	uxth	r4, r3
 80026d2:	88ba      	ldrh	r2, [r7, #4]
 80026d4:	883b      	ldrh	r3, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29b      	uxth	r3, r3
 80026de:	88b9      	ldrh	r1, [r7, #4]
 80026e0:	88f8      	ldrh	r0, [r7, #6]
 80026e2:	4622      	mov	r2, r4
 80026e4:	f7ff fc48 	bl	8001f78 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80026e8:	883b      	ldrh	r3, [r7, #0]
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	8b3b      	ldrh	r3, [r7, #24]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fe14 	bl	8002324 <ILI9341_Draw_Colour_Burst>
 80026fc:	e000      	b.n	8002700 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80026fe:	bf00      	nop
}
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	20000032 	.word	0x20000032
 800270c:	20000030 	.word	0x20000030

08002710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_Init+0x34>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_Init+0x34>)
 800271a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_Init+0x34>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a07      	ldr	r2, [pc, #28]	; (8002744 <HAL_Init+0x34>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800272c:	2003      	movs	r0, #3
 800272e:	f000 f94f 	bl	80029d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002732:	2000      	movs	r0, #0
 8002734:	f000 f808 	bl	8002748 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002738:	f7fe fef0 	bl	800151c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00

08002748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_InitTick+0x54>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x58>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f967 	bl	8002a3a <HAL_SYSTICK_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00e      	b.n	8002794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0f      	cmp	r3, #15
 800277a:	d80a      	bhi.n	8002792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800277c:	2200      	movs	r2, #0
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f000 f92f 	bl	80029e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002788:	4a06      	ldr	r2, [pc, #24]	; (80027a4 <HAL_InitTick+0x5c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000002c 	.word	0x2000002c
 80027a0:	20000038 	.word	0x20000038
 80027a4:	20000034 	.word	0x20000034

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000038 	.word	0x20000038
 80027cc:	20000560 	.word	0x20000560

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000560 	.word	0x20000560

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff ffee 	bl	80027d0 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffde 	bl	80027d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000038 	.word	0x20000038

08002830 <__NVIC_SetPriorityGrouping>:
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <__NVIC_SetPriorityGrouping+0x40>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 800285a:	4313      	orrs	r3, r2
 800285c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285e:	4a04      	ldr	r2, [pc, #16]	; (8002870 <__NVIC_SetPriorityGrouping+0x40>)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	60d3      	str	r3, [r2, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00
 8002874:	05fa0000 	.word	0x05fa0000

08002878 <__NVIC_GetPriorityGrouping>:
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4907      	ldr	r1, [pc, #28]	; (80028cc <__NVIC_EnableIRQ+0x38>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e100 	.word	0xe000e100

080028d0 <__NVIC_SetPriority>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	db0a      	blt.n	80028fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	490c      	ldr	r1, [pc, #48]	; (800291c <__NVIC_SetPriority+0x4c>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	0112      	lsls	r2, r2, #4
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028f8:	e00a      	b.n	8002910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4908      	ldr	r1, [pc, #32]	; (8002920 <__NVIC_SetPriority+0x50>)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	3b04      	subs	r3, #4
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	440b      	add	r3, r1
 800290e:	761a      	strb	r2, [r3, #24]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000e100 	.word	0xe000e100
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <NVIC_EncodePriority>:
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	; 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f1c3 0307 	rsb	r3, r3, #7
 800293e:	2b04      	cmp	r3, #4
 8002940:	bf28      	it	cs
 8002942:	2304      	movcs	r3, #4
 8002944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3304      	adds	r3, #4
 800294a:	2b06      	cmp	r3, #6
 800294c:	d902      	bls.n	8002954 <NVIC_EncodePriority+0x30>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3b03      	subs	r3, #3
 8002952:	e000      	b.n	8002956 <NVIC_EncodePriority+0x32>
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	f04f 32ff 	mov.w	r2, #4294967295
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800296c:	f04f 31ff 	mov.w	r1, #4294967295
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43d9      	mvns	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	4313      	orrs	r3, r2
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	; 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800299c:	d301      	bcc.n	80029a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299e:	2301      	movs	r3, #1
 80029a0:	e00f      	b.n	80029c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <SysTick_Config+0x40>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029aa:	210f      	movs	r1, #15
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f7ff ff8e 	bl	80028d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <SysTick_Config+0x40>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ba:	4b04      	ldr	r3, [pc, #16]	; (80029cc <SysTick_Config+0x40>)
 80029bc:	2207      	movs	r2, #7
 80029be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	e000e010 	.word	0xe000e010

080029d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff29 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f8:	f7ff ff3e 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f7ff ff8e 	bl	8002924 <NVIC_EncodePriority>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff5d 	bl	80028d0 <__NVIC_SetPriority>
}
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff31 	bl	8002894 <__NVIC_EnableIRQ>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ffa2 	bl	800298c <SysTick_Config>
 8002a48:	4603      	mov	r3, r0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e175      	b.n	8002d60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8164 	bne.w	8002d5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d00b      	beq.n	8002ab2 <HAL_GPIO_Init+0x5e>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aa6:	2b11      	cmp	r3, #17
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d130      	bne.n	8002b14 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 0201 	and.w	r2, r3, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x100>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b12      	cmp	r3, #18
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80be 	beq.w	8002d5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	4b66      	ldr	r3, [pc, #408]	; (8002d78 <HAL_GPIO_Init+0x324>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <HAL_GPIO_Init+0x324>)
 8002be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_GPIO_Init+0x324>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bf6:	4a61      	ldr	r2, [pc, #388]	; (8002d7c <HAL_GPIO_Init+0x328>)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_GPIO_Init+0x32c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d037      	beq.n	8002c92 <HAL_GPIO_Init+0x23e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a57      	ldr	r2, [pc, #348]	; (8002d84 <HAL_GPIO_Init+0x330>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d031      	beq.n	8002c8e <HAL_GPIO_Init+0x23a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a56      	ldr	r2, [pc, #344]	; (8002d88 <HAL_GPIO_Init+0x334>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d02b      	beq.n	8002c8a <HAL_GPIO_Init+0x236>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a55      	ldr	r2, [pc, #340]	; (8002d8c <HAL_GPIO_Init+0x338>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d025      	beq.n	8002c86 <HAL_GPIO_Init+0x232>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <HAL_GPIO_Init+0x33c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01f      	beq.n	8002c82 <HAL_GPIO_Init+0x22e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a53      	ldr	r2, [pc, #332]	; (8002d94 <HAL_GPIO_Init+0x340>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d019      	beq.n	8002c7e <HAL_GPIO_Init+0x22a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_GPIO_Init+0x344>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_GPIO_Init+0x226>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_GPIO_Init+0x348>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00d      	beq.n	8002c76 <HAL_GPIO_Init+0x222>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a50      	ldr	r2, [pc, #320]	; (8002da0 <HAL_GPIO_Init+0x34c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d007      	beq.n	8002c72 <HAL_GPIO_Init+0x21e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4f      	ldr	r2, [pc, #316]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_GPIO_Init+0x21a>
 8002c6a:	2309      	movs	r3, #9
 8002c6c:	e012      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c6e:	230a      	movs	r3, #10
 8002c70:	e010      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c72:	2308      	movs	r3, #8
 8002c74:	e00e      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c76:	2307      	movs	r3, #7
 8002c78:	e00c      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	e00a      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c7e:	2305      	movs	r3, #5
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x240>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x328>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_GPIO_Init+0x354>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd6:	4a34      	ldr	r2, [pc, #208]	; (8002da8 <HAL_GPIO_Init+0x354>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cdc:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <HAL_GPIO_Init+0x354>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d00:	4a29      	ldr	r2, [pc, #164]	; (8002da8 <HAL_GPIO_Init+0x354>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_GPIO_Init+0x354>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a1f      	ldr	r2, [pc, #124]	; (8002da8 <HAL_GPIO_Init+0x354>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_GPIO_Init+0x354>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_GPIO_Init+0x354>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f ae86 	bls.w	8002a74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40021400 	.word	0x40021400
 8002d98:	40021800 	.word	0x40021800
 8002d9c:	40021c00 	.word	0x40021c00
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40022400 	.word	0x40022400
 8002da8:	40013c00 	.word	0x40013c00

08002dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e001      	b.n	8002dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002df8:	e003      	b.n	8002e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	041a      	lsls	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4013      	ands	r3, r2
 8002e26:	041a      	lsls	r2, r3, #16
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	400b      	ands	r3, r1
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fd3c 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e006      	b.n	8002ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d104      	bne.n	8002ede <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_I2C_Init+0x11c>)
 8002eea:	430b      	orrs	r3, r1
 8002eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	ea42 0103 	orr.w	r1, r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69d9      	ldr	r1, [r3, #28]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	02008000 	.word	0x02008000

08002f64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	460b      	mov	r3, r1
 8002f72:	817b      	strh	r3, [r7, #10]
 8002f74:	4613      	mov	r3, r2
 8002f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	f040 80da 	bne.w	800313a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2C_Master_Transmit+0x30>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0d3      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f9c:	f7ff fc18 	bl	80027d0 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2319      	movs	r3, #25
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f9e6 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0be      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	893a      	ldrh	r2, [r7, #8]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2bff      	cmp	r3, #255	; 0xff
 8002fee:	d90e      	bls.n	800300e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	22ff      	movs	r2, #255	; 0xff
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	8979      	ldrh	r1, [r7, #10]
 8002ffe:	4b51      	ldr	r3, [pc, #324]	; (8003144 <HAL_I2C_Master_Transmit+0x1e0>)
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fb48 	bl	800369c <I2C_TransferConfig>
 800300c:	e06c      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_I2C_Master_Transmit+0x1e0>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fb37 	bl	800369c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800302e:	e05b      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f9e3 	bl	8003400 <I2C_WaitOnTXISFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e07b      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d034      	beq.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d130      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f975 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04d      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2bff      	cmp	r3, #255	; 0xff
 80030a8:	d90e      	bls.n	80030c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	22ff      	movs	r2, #255	; 0xff
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	8979      	ldrh	r1, [r7, #10]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 faeb 	bl	800369c <I2C_TransferConfig>
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fada 	bl	800369c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d19e      	bne.n	8003030 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6a39      	ldr	r1, [r7, #32]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f9c2 	bl	8003480 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01a      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2220      	movs	r2, #32
 800310c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_I2C_Master_Transmit+0x1e4>)
 800311a:	400b      	ands	r3, r1
 800311c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	80002000 	.word	0x80002000
 8003148:	fe00e800 	.word	0xfe00e800

0800314c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	461a      	mov	r2, r3
 8003158:	460b      	mov	r3, r1
 800315a:	817b      	strh	r3, [r7, #10]
 800315c:	4613      	mov	r3, r2
 800315e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b20      	cmp	r3, #32
 800316a:	f040 80db 	bne.w	8003324 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Master_Receive+0x30>
 8003178:	2302      	movs	r3, #2
 800317a:	e0d4      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003184:	f7ff fb24 	bl	80027d0 <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2319      	movs	r3, #25
 8003190:	2201      	movs	r2, #1
 8003192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f8f2 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0bf      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2222      	movs	r2, #34	; 0x22
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2210      	movs	r2, #16
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	893a      	ldrh	r2, [r7, #8]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d90e      	bls.n	80031f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	4b52      	ldr	r3, [pc, #328]	; (8003330 <HAL_I2C_Master_Receive+0x1e4>)
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fa54 	bl	800369c <I2C_TransferConfig>
 80031f4:	e06d      	b.n	80032d2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	b2da      	uxtb	r2, r3
 8003206:	8979      	ldrh	r1, [r7, #10]
 8003208:	4b49      	ldr	r3, [pc, #292]	; (8003330 <HAL_I2C_Master_Receive+0x1e4>)
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fa43 	bl	800369c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003216:	e05c      	b.n	80032d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	6a39      	ldr	r1, [r7, #32]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f96b 	bl	80034f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e07c      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d034      	beq.n	80032d2 <HAL_I2C_Master_Receive+0x186>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d130      	bne.n	80032d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	2200      	movs	r2, #0
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f880 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e04d      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	2bff      	cmp	r3, #255	; 0xff
 8003292:	d90e      	bls.n	80032b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	22ff      	movs	r2, #255	; 0xff
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	8979      	ldrh	r1, [r7, #10]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f9f6 	bl	800369c <I2C_TransferConfig>
 80032b0:	e00f      	b.n	80032d2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	8979      	ldrh	r1, [r7, #10]
 80032c4:	2300      	movs	r3, #0
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f9e5 	bl	800369c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d19d      	bne.n	8003218 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	6a39      	ldr	r1, [r7, #32]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f8cd 	bl	8003480 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e01a      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2220      	movs	r2, #32
 80032f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_I2C_Master_Receive+0x1e8>)
 8003304:	400b      	ands	r3, r1
 8003306:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	80002400 	.word	0x80002400
 8003334:	fe00e800 	.word	0xfe00e800

08003338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d103      	bne.n	8003356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d007      	beq.n	8003374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	619a      	str	r2, [r3, #24]
  }
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003390:	e022      	b.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d01e      	beq.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7ff fa19 	bl	80027d0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d113      	bne.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e00f      	b.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4013      	ands	r3, r2
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d0cd      	beq.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800340c:	e02c      	b.n	8003468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f8dc 	bl	80035d0 <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e02a      	b.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d01e      	beq.n	8003468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7ff f9d1 	bl	80027d0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e007      	b.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d1cb      	bne.n	800340e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800348c:	e028      	b.n	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f89c 	bl	80035d0 <I2C_IsAcknowledgeFailed>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e026      	b.n	80034f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7ff f995 	bl	80027d0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d113      	bne.n	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e007      	b.n	80034f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d1cf      	bne.n	800348e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003504:	e055      	b.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f860 	bl	80035d0 <I2C_IsAcknowledgeFailed>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e053      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b20      	cmp	r3, #32
 8003526:	d129      	bne.n	800357c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d105      	bne.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e03f      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2220      	movs	r2, #32
 8003548:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003556:	400b      	ands	r3, r1
 8003558:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e022      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357c:	f7ff f928 	bl	80027d0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	d302      	bcc.n	8003592 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e007      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d1a2      	bne.n	8003506 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	fe00e800 	.word	0xfe00e800

080035d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d151      	bne.n	800368e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ea:	e022      	b.n	8003632 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d01e      	beq.n	8003632 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7ff f8ec 	bl	80027d0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_IsAcknowledgeFailed+0x3a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0220 	orr.w	r2, r3, #32
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e02e      	b.n	8003690 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b20      	cmp	r3, #32
 800363e:	d1d5      	bne.n	80035ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2210      	movs	r2, #16
 8003646:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2220      	movs	r2, #32
 800364e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fe71 	bl	8003338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <I2C_IsAcknowledgeFailed+0xc8>)
 8003662:	400b      	ands	r3, r1
 8003664:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	fe00e800 	.word	0xfe00e800

0800369c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	4613      	mov	r3, r2
 80036ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	0d5b      	lsrs	r3, r3, #21
 80036b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036bc:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <I2C_TransferConfig+0x58>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	43db      	mvns	r3, r3
 80036c2:	ea02 0103 	and.w	r1, r2, r3
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036cc:	7a7b      	ldrb	r3, [r7, #9]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	431a      	orrs	r2, r3
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	03ff63ff 	.word	0x03ff63ff

080036f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b20      	cmp	r3, #32
 800370c:	d138      	bne.n	8003780 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003718:	2302      	movs	r3, #2
 800371a:	e032      	b.n	8003782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800374a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d139      	bne.n	8003818 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e033      	b.n	800381a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2224      	movs	r2, #36	; 0x24
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003874:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003876:	f7fe ffab 	bl	80027d0 <HAL_GetTick>
 800387a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800387c:	e009      	b.n	8003892 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800387e:	f7fe ffa7 	bl	80027d0 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800388c:	d901      	bls.n	8003892 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e022      	b.n	80038d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003892:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d1ee      	bne.n	800387e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038ac:	f7fe ff90 	bl	80027d0 <HAL_GetTick>
 80038b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038b2:	e009      	b.n	80038c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038b4:	f7fe ff8c 	bl	80027d0 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c2:	d901      	bls.n	80038c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e007      	b.n	80038d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038d4:	d1ee      	bne.n	80038b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40007000 	.word	0x40007000

080038e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038f0:	2300      	movs	r3, #0
 80038f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e29b      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8087 	beq.w	8003a1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800390c:	4b96      	ldr	r3, [pc, #600]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b04      	cmp	r3, #4
 8003916:	d00c      	beq.n	8003932 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003918:	4b93      	ldr	r3, [pc, #588]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d112      	bne.n	800394a <HAL_RCC_OscConfig+0x62>
 8003924:	4b90      	ldr	r3, [pc, #576]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003930:	d10b      	bne.n	800394a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003932:	4b8d      	ldr	r3, [pc, #564]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06c      	beq.n	8003a18 <HAL_RCC_OscConfig+0x130>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d168      	bne.n	8003a18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e275      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003952:	d106      	bne.n	8003962 <HAL_RCC_OscConfig+0x7a>
 8003954:	4b84      	ldr	r3, [pc, #528]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a83      	ldr	r2, [pc, #524]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 800395a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e02e      	b.n	80039c0 <HAL_RCC_OscConfig+0xd8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0x9c>
 800396a:	4b7f      	ldr	r3, [pc, #508]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7e      	ldr	r2, [pc, #504]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b7c      	ldr	r3, [pc, #496]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7b      	ldr	r2, [pc, #492]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 800397c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e01d      	b.n	80039c0 <HAL_RCC_OscConfig+0xd8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0xc0>
 800398e:	4b76      	ldr	r3, [pc, #472]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a75      	ldr	r2, [pc, #468]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a72      	ldr	r2, [pc, #456]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0xd8>
 80039a8:	4b6f      	ldr	r3, [pc, #444]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a6e      	ldr	r2, [pc, #440]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b6c      	ldr	r3, [pc, #432]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a6b      	ldr	r2, [pc, #428]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe ff02 	bl	80027d0 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fe fefe 	bl	80027d0 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e229      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0xe8>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe feee 	bl	80027d0 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe feea 	bl	80027d0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e215      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	4b57      	ldr	r3, [pc, #348]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x110>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d069      	beq.n	8003afa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a26:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a32:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d11c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x190>
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x17a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e1e9      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	493d      	ldr	r1, [pc, #244]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	e040      	b.n	8003afa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d023      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fea0 	bl	80027d0 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fe fe9c 	bl	80027d0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e1c7      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4929      	ldr	r1, [pc, #164]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
 8003ac6:	e018      	b.n	8003afa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fe7c 	bl	80027d0 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fe fe78 	bl	80027d0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e1a3      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d038      	beq.n	8003b78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d019      	beq.n	8003b42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0e:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b12:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fe59 	bl	80027d0 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fe fe55 	bl	80027d0 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e180      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x23a>
 8003b40:	e01a      	b.n	8003b78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <HAL_RCC_OscConfig+0x280>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fe fe3f 	bl	80027d0 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fe fe3b 	bl	80027d0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d903      	bls.n	8003b6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e166      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
 8003b68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b6c:	4b92      	ldr	r3, [pc, #584]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ee      	bne.n	8003b56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80a4 	beq.w	8003cce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b86:	4b8c      	ldr	r3, [pc, #560]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10d      	bne.n	8003bae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	4b89      	ldr	r3, [pc, #548]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a88      	ldr	r2, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9e:	4b86      	ldr	r3, [pc, #536]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bae:	4b83      	ldr	r3, [pc, #524]	; (8003dbc <HAL_RCC_OscConfig+0x4d4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d118      	bne.n	8003bec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bba:	4b80      	ldr	r3, [pc, #512]	; (8003dbc <HAL_RCC_OscConfig+0x4d4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a7f      	ldr	r2, [pc, #508]	; (8003dbc <HAL_RCC_OscConfig+0x4d4>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe fe03 	bl	80027d0 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bce:	f7fe fdff 	bl	80027d0 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b64      	cmp	r3, #100	; 0x64
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e12a      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be0:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <HAL_RCC_OscConfig+0x4d4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x31a>
 8003bf4:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	4a6f      	ldr	r2, [pc, #444]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003c00:	e02d      	b.n	8003c5e <HAL_RCC_OscConfig+0x376>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x33c>
 8003c0a:	4b6b      	ldr	r3, [pc, #428]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a6a      	ldr	r2, [pc, #424]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a67      	ldr	r2, [pc, #412]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
 8003c22:	e01c      	b.n	8003c5e <HAL_RCC_OscConfig+0x376>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	d10c      	bne.n	8003c46 <HAL_RCC_OscConfig+0x35e>
 8003c2c:	4b62      	ldr	r3, [pc, #392]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4a61      	ldr	r2, [pc, #388]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c32:	f043 0304 	orr.w	r3, r3, #4
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70
 8003c38:	4b5f      	ldr	r3, [pc, #380]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a5e      	ldr	r2, [pc, #376]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	e00b      	b.n	8003c5e <HAL_RCC_OscConfig+0x376>
 8003c46:	4b5c      	ldr	r3, [pc, #368]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a5b      	ldr	r2, [pc, #364]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d015      	beq.n	8003c92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fe fdb3 	bl	80027d0 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fe fdaf 	bl	80027d0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e0d8      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ee      	beq.n	8003c6e <HAL_RCC_OscConfig+0x386>
 8003c90:	e014      	b.n	8003cbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe fd9d 	bl	80027d0 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fe fd99 	bl	80027d0 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e0c2      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb0:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ee      	bne.n	8003c9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	4a3c      	ldr	r2, [pc, #240]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80ae 	beq.w	8003e34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd8:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d06d      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d14b      	bne.n	8003d84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cec:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a31      	ldr	r2, [pc, #196]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fd6a 	bl	80027d0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe fd66 	bl	80027d0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e091      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	019b      	lsls	r3, r3, #6
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	3b01      	subs	r3, #1
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	071b      	lsls	r3, r3, #28
 8003d4a:	491b      	ldr	r1, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fd38 	bl	80027d0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe fd34 	bl	80027d0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e05f      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x47c>
 8003d82:	e057      	b.n	8003e34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a0b      	ldr	r2, [pc, #44]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fd1e 	bl	80027d0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe fd1a 	bl	80027d0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e045      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4b0>
 8003db6:	e03d      	b.n	8003e34 <HAL_RCC_OscConfig+0x54c>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <HAL_RCC_OscConfig+0x558>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d030      	beq.n	8003e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d129      	bne.n	8003e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d122      	bne.n	8003e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003df6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d119      	bne.n	8003e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d10f      	bne.n	8003e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800

08003e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0d0      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d910      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b67      	ldr	r3, [pc, #412]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 020f 	bic.w	r2, r3, #15
 8003e72:	4965      	ldr	r1, [pc, #404]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d040      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d115      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b41      	ldr	r3, [pc, #260]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e073      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b3d      	ldr	r3, [pc, #244]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e06b      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4936      	ldr	r1, [pc, #216]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f38:	f7fe fc4a 	bl	80027d0 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fe fc46 	bl	80027d0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e053      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2d      	ldr	r3, [pc, #180]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b27      	ldr	r3, [pc, #156]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d210      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 020f 	bic.w	r2, r3, #15
 8003f7e:	4922      	ldr	r1, [pc, #136]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f821 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490a      	ldr	r1, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x1cc>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1d0>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1d4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fba6 	bl	8002748 <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00
 800400c:	40023800 	.word	0x40023800
 8004010:	08009ce4 	.word	0x08009ce4
 8004014:	2000002c 	.word	0x2000002c
 8004018:	20000034 	.word	0x20000034

0800401c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800401c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	2300      	movs	r3, #0
 800402e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004034:	4b67      	ldr	r3, [pc, #412]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d00d      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x40>
 8004040:	2b08      	cmp	r3, #8
 8004042:	f200 80bd 	bhi.w	80041c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x34>
 800404a:	2b04      	cmp	r3, #4
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x3a>
 800404e:	e0b7      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004052:	60bb      	str	r3, [r7, #8]
      break;
 8004054:	e0b7      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004056:	4b61      	ldr	r3, [pc, #388]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004058:	60bb      	str	r3, [r7, #8]
      break;
 800405a:	e0b4      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800405c:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004064:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004066:	4b5b      	ldr	r3, [pc, #364]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04d      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	461a      	mov	r2, r3
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	ea02 0800 	and.w	r8, r2, r0
 800408a:	ea03 0901 	and.w	r9, r3, r1
 800408e:	4640      	mov	r0, r8
 8004090:	4649      	mov	r1, r9
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	014b      	lsls	r3, r1, #5
 800409c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040a0:	0142      	lsls	r2, r0, #5
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	ebb0 0008 	subs.w	r0, r0, r8
 80040aa:	eb61 0109 	sbc.w	r1, r1, r9
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	018b      	lsls	r3, r1, #6
 80040b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040bc:	0182      	lsls	r2, r0, #6
 80040be:	1a12      	subs	r2, r2, r0
 80040c0:	eb63 0301 	sbc.w	r3, r3, r1
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	00d9      	lsls	r1, r3, #3
 80040ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d2:	00d0      	lsls	r0, r2, #3
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	eb12 0208 	adds.w	r2, r2, r8
 80040dc:	eb43 0309 	adc.w	r3, r3, r9
 80040e0:	f04f 0000 	mov.w	r0, #0
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	0259      	lsls	r1, r3, #9
 80040ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040ee:	0250      	lsls	r0, r2, #9
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	f7fc f8f6 	bl	80002f0 <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4613      	mov	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e04a      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410e:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	099b      	lsrs	r3, r3, #6
 8004114:	461a      	mov	r2, r3
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	ea02 0400 	and.w	r4, r2, r0
 8004126:	ea03 0501 	and.w	r5, r3, r1
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	014b      	lsls	r3, r1, #5
 8004138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800413c:	0142      	lsls	r2, r0, #5
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	1b00      	subs	r0, r0, r4
 8004144:	eb61 0105 	sbc.w	r1, r1, r5
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	018b      	lsls	r3, r1, #6
 8004152:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004156:	0182      	lsls	r2, r0, #6
 8004158:	1a12      	subs	r2, r2, r0
 800415a:	eb63 0301 	sbc.w	r3, r3, r1
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	00d9      	lsls	r1, r3, #3
 8004168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800416c:	00d0      	lsls	r0, r2, #3
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	1912      	adds	r2, r2, r4
 8004174:	eb45 0303 	adc.w	r3, r5, r3
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	0299      	lsls	r1, r3, #10
 8004182:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004186:	0290      	lsls	r0, r2, #10
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	461a      	mov	r2, r3
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	f7fc f8aa 	bl	80002f0 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4613      	mov	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	3301      	adds	r3, #1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	60bb      	str	r3, [r7, #8]
      break;
 80041be:	e002      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041c2:	60bb      	str	r3, [r7, #8]
      break;
 80041c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c6:	68bb      	ldr	r3, [r7, #8]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	007a1200 	.word	0x007a1200

080041e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2000002c 	.word	0x2000002c

080041f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041fc:	f7ff fff0 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	0a9b      	lsrs	r3, r3, #10
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4903      	ldr	r1, [pc, #12]	; (800421c <HAL_RCC_GetPCLK1Freq+0x24>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004214:	4618      	mov	r0, r3
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40023800 	.word	0x40023800
 800421c:	08009cf4 	.word	0x08009cf4

08004220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004224:	f7ff ffdc 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	0b5b      	lsrs	r3, r3, #13
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4903      	ldr	r1, [pc, #12]	; (8004244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40023800 	.word	0x40023800
 8004244:	08009cf4 	.word	0x08009cf4

08004248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d012      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004270:	4b69      	ldr	r3, [pc, #420]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4a68      	ldr	r2, [pc, #416]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004276:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800427a:	6093      	str	r3, [r2, #8]
 800427c:	4b66      	ldr	r3, [pc, #408]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	4964      	ldr	r1, [pc, #400]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004292:	2301      	movs	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d017      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a2:	4b5d      	ldr	r3, [pc, #372]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	4959      	ldr	r1, [pc, #356]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c0:	d101      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042c2:	2301      	movs	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d017      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042de:	4b4e      	ldr	r3, [pc, #312]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	494a      	ldr	r1, [pc, #296]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fc:	d101      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 808b 	beq.w	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800432c:	4b3a      	ldr	r3, [pc, #232]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	4a39      	ldr	r2, [pc, #228]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004336:	6413      	str	r3, [r2, #64]	; 0x40
 8004338:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004344:	4b35      	ldr	r3, [pc, #212]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a34      	ldr	r2, [pc, #208]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800434a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004350:	f7fe fa3e 	bl	80027d0 <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004358:	f7fe fa3a 	bl	80027d0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e38f      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800436a:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004376:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d035      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	429a      	cmp	r2, r3
 8004392:	d02e      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004394:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043b6:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d114      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fe fa02 	bl	80027d0 <HAL_GetTick>
 80043cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fe f9fe 	bl	80027d0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e351      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ee      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043fe:	d111      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800440e:	400b      	ands	r3, r1
 8004410:	4901      	ldr	r1, [pc, #4]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
 8004416:	e00b      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004418:	40023800 	.word	0x40023800
 800441c:	40007000 	.word	0x40007000
 8004420:	0ffffcff 	.word	0x0ffffcff
 8004424:	4bb3      	ldr	r3, [pc, #716]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4ab2      	ldr	r2, [pc, #712]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800442a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800442e:	6093      	str	r3, [r2, #8]
 8004430:	4bb0      	ldr	r3, [pc, #704]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004432:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443c:	49ad      	ldr	r1, [pc, #692]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800443e:	4313      	orrs	r3, r2
 8004440:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b00      	cmp	r3, #0
 800444c:	d010      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800444e:	4ba9      	ldr	r3, [pc, #676]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004454:	4aa7      	ldr	r2, [pc, #668]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800445a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800445e:	4ba5      	ldr	r3, [pc, #660]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004460:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	49a2      	ldr	r1, [pc, #648]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800447c:	4b9d      	ldr	r3, [pc, #628]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448a:	499a      	ldr	r1, [pc, #616]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800449e:	4b95      	ldr	r3, [pc, #596]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ac:	4991      	ldr	r1, [pc, #580]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044c0:	4b8c      	ldr	r3, [pc, #560]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ce:	4989      	ldr	r1, [pc, #548]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044e2:	4b84      	ldr	r3, [pc, #528]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	4980      	ldr	r1, [pc, #512]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004504:	4b7b      	ldr	r3, [pc, #492]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f023 0203 	bic.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	4978      	ldr	r1, [pc, #480]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004526:	4b73      	ldr	r3, [pc, #460]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f023 020c 	bic.w	r2, r3, #12
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004534:	496f      	ldr	r1, [pc, #444]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004548:	4b6a      	ldr	r3, [pc, #424]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	4967      	ldr	r1, [pc, #412]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800456a:	4b62      	ldr	r3, [pc, #392]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	495e      	ldr	r1, [pc, #376]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800458c:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	4956      	ldr	r1, [pc, #344]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045ae:	4b51      	ldr	r3, [pc, #324]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	494d      	ldr	r1, [pc, #308]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045d0:	4b48      	ldr	r3, [pc, #288]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	4945      	ldr	r1, [pc, #276]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045f2:	4b40      	ldr	r3, [pc, #256]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004600:	493c      	ldr	r1, [pc, #240]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004614:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004622:	4934      	ldr	r1, [pc, #208]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d011      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004636:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004644:	492b      	ldr	r1, [pc, #172]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004654:	d101      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004656:	2301      	movs	r3, #1
 8004658:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004676:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004684:	491b      	ldr	r1, [pc, #108]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004698:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a8:	4912      	ldr	r1, [pc, #72]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	4909      	ldr	r1, [pc, #36]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00f      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800
 80046f8:	4986      	ldr	r1, [pc, #536]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800470c:	4b81      	ldr	r3, [pc, #516]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800470e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004712:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471c:	497d      	ldr	r1, [pc, #500]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d006      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80d6 	beq.w	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004738:	4b76      	ldr	r3, [pc, #472]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a75      	ldr	r2, [pc, #468]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004744:	f7fe f844 	bl	80027d0 <HAL_GetTick>
 8004748:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800474c:	f7fe f840 	bl	80027d0 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e195      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800475e:	4b6d      	ldr	r3, [pc, #436]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d021      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11d      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800477e:	4b65      	ldr	r3, [pc, #404]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800478c:	4b61      	ldr	r3, [pc, #388]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004792:	0e1b      	lsrs	r3, r3, #24
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	019a      	lsls	r2, r3, #6
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	431a      	orrs	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	061b      	lsls	r3, r3, #24
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	071b      	lsls	r3, r3, #28
 80047b2:	4958      	ldr	r1, [pc, #352]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d02e      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e4:	d129      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047e6:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047f4:	4b47      	ldr	r3, [pc, #284]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fa:	0f1b      	lsrs	r3, r3, #28
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	019a      	lsls	r2, r3, #6
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	071b      	lsls	r3, r3, #28
 800481a:	493e      	ldr	r1, [pc, #248]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004822:	4b3c      	ldr	r3, [pc, #240]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004828:	f023 021f 	bic.w	r2, r3, #31
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	3b01      	subs	r3, #1
 8004832:	4938      	ldr	r1, [pc, #224]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01d      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004846:	4b33      	ldr	r3, [pc, #204]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484c:	0e1b      	lsrs	r3, r3, #24
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004854:	4b2f      	ldr	r3, [pc, #188]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485a:	0f1b      	lsrs	r3, r3, #28
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	019a      	lsls	r2, r3, #6
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	431a      	orrs	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	061b      	lsls	r3, r3, #24
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	071b      	lsls	r3, r3, #28
 800487a:	4926      	ldr	r1, [pc, #152]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d011      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	019a      	lsls	r2, r3, #6
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	071b      	lsls	r3, r3, #28
 80048aa:	491a      	ldr	r1, [pc, #104]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048b2:	4b18      	ldr	r3, [pc, #96]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048be:	f7fd ff87 	bl	80027d0 <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048c6:	f7fd ff83 	bl	80027d0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b64      	cmp	r3, #100	; 0x64
 80048d2:	d901      	bls.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e0d8      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	f040 80ce 	bne.w	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a08      	ldr	r2, [pc, #32]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f8:	f7fd ff6a 	bl	80027d0 <HAL_GetTick>
 80048fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048fe:	e00b      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004900:	f7fd ff66 	bl	80027d0 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b64      	cmp	r3, #100	; 0x64
 800490c:	d904      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e0bb      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004918:	4b5e      	ldr	r3, [pc, #376]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004924:	d0ec      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004942:	2b00      	cmp	r3, #0
 8004944:	d02e      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d12a      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800494e:	4b51      	ldr	r3, [pc, #324]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800495c:	4b4d      	ldr	r3, [pc, #308]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	0f1b      	lsrs	r3, r3, #28
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	019a      	lsls	r2, r3, #6
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	061b      	lsls	r3, r3, #24
 800497c:	431a      	orrs	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	071b      	lsls	r3, r3, #28
 8004982:	4944      	ldr	r1, [pc, #272]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800498a:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	3b01      	subs	r3, #1
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	493d      	ldr	r1, [pc, #244]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d022      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b8:	d11d      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049ba:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	0e1b      	lsrs	r3, r3, #24
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049c8:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	0f1b      	lsrs	r3, r3, #28
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	019a      	lsls	r2, r3, #6
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	431a      	orrs	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	4929      	ldr	r1, [pc, #164]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d028      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a02:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	0e1b      	lsrs	r3, r3, #24
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	0c1b      	lsrs	r3, r3, #16
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	019a      	lsls	r2, r3, #6
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	4917      	ldr	r1, [pc, #92]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	4911      	ldr	r1, [pc, #68]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a60:	f7fd feb6 	bl	80027d0 <HAL_GetTick>
 8004a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a68:	f7fd feb2 	bl	80027d0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e007      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a86:	d1ef      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800

08004a98 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e01c      	b.n	8004ae4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	795b      	ldrb	r3, [r3, #5]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fc fc8c 	bl	80013d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0204 	orr.w	r2, r2, #4
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e09d      	b.n	8004c3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b0e:	d009      	beq.n	8004b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
 8004b16:	e005      	b.n	8004b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc fca8 	bl	8001494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b64:	d902      	bls.n	8004b6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e002      	b.n	8004b72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b7a:	d007      	beq.n	8004b8c <HAL_SPI_Init+0xa0>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	ea42 0103 	orr.w	r1, r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	f003 0204 	and.w	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c08:	ea42 0103 	orr.w	r1, r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b088      	sub	sp, #32
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_SPI_Transmit+0x22>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e158      	b.n	8004f16 <HAL_SPI_Transmit+0x2d4>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c6c:	f7fd fdb0 	bl	80027d0 <HAL_GetTick>
 8004c70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d002      	beq.n	8004c88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
 8004c84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c86:	e13d      	b.n	8004f04 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_SPI_Transmit+0x52>
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c98:	e134      	b.n	8004f04 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88fa      	ldrh	r2, [r7, #6]
 8004cb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce4:	d10f      	bne.n	8004d06 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d007      	beq.n	8004d24 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d2c:	d94b      	bls.n	8004dc6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_SPI_Transmit+0xfa>
 8004d36:	8afb      	ldrh	r3, [r7, #22]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d13e      	bne.n	8004dba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d60:	e02b      	b.n	8004dba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d112      	bne.n	8004d96 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	881a      	ldrh	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	1c9a      	adds	r2, r3, #2
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d94:	e011      	b.n	8004dba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d96:	f7fd fd1b 	bl	80027d0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d803      	bhi.n	8004dae <HAL_SPI_Transmit+0x16c>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d102      	bne.n	8004db4 <HAL_SPI_Transmit+0x172>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004db8:	e0a4      	b.n	8004f04 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1ce      	bne.n	8004d62 <HAL_SPI_Transmit+0x120>
 8004dc4:	e07c      	b.n	8004ec0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Transmit+0x192>
 8004dce:	8afb      	ldrh	r3, [r7, #22]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d170      	bne.n	8004eb6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d912      	bls.n	8004e04 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	881a      	ldrh	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	1c9a      	adds	r2, r3, #2
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b02      	subs	r3, #2
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e02:	e058      	b.n	8004eb6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e2a:	e044      	b.n	8004eb6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d12b      	bne.n	8004e92 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d912      	bls.n	8004e6a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	881a      	ldrh	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b02      	subs	r3, #2
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e68:	e025      	b.n	8004eb6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e90:	e011      	b.n	8004eb6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e92:	f7fd fc9d 	bl	80027d0 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d803      	bhi.n	8004eaa <HAL_SPI_Transmit+0x268>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_Transmit+0x26e>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eb4:	e026      	b.n	8004f04 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1b5      	bne.n	8004e2c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f945 	bl	8005154 <SPI_EndRxTxTransaction>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e000      	b.n	8004f04 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f30:	f7fd fc4e 	bl	80027d0 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f40:	f7fd fc46 	bl	80027d0 <HAL_GetTick>
 8004f44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	015b      	lsls	r3, r3, #5
 8004f4c:	0d1b      	lsrs	r3, r3, #20
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f56:	e054      	b.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d050      	beq.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f60:	f7fd fc36 	bl	80027d0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d902      	bls.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d13d      	bne.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8e:	d111      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d004      	beq.n	8004fa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d107      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbc:	d10f      	bne.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e017      	b.n	8005022 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	429a      	cmp	r2, r3
 800501e:	d19b      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	2000002c 	.word	0x2000002c

08005030 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800503e:	f7fd fbc7 	bl	80027d0 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	4413      	add	r3, r2
 800504c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800504e:	f7fd fbbf 	bl	80027d0 <HAL_GetTick>
 8005052:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005054:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	00da      	lsls	r2, r3, #3
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	0d1b      	lsrs	r3, r3, #20
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800506c:	e062      	b.n	8005134 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005074:	d109      	bne.n	800508a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005088:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d050      	beq.n	8005134 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005092:	f7fd fb9d 	bl	80027d0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d902      	bls.n	80050a8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d13d      	bne.n	8005124 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050c0:	d111      	bne.n	80050e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ca:	d004      	beq.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d4:	d107      	bne.n	80050e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ee:	d10f      	bne.n	8005110 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800510e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e010      	b.n	8005146 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3b01      	subs	r3, #1
 8005132:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d194      	bne.n	800506e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	2000002c 	.word	0x2000002c

08005154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff ff5f 	bl	8005030 <SPI_WaitFifoStateUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e027      	b.n	80051d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	2180      	movs	r1, #128	; 0x80
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff fec4 	bl	8004f20 <SPI_WaitFlagStateUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e014      	b.n	80051d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff ff38 	bl	8005030 <SPI_WaitFifoStateUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e000      	b.n	80051d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e049      	b.n	8005286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fbe6 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fdb2 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d001      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e054      	b.n	8005352 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a26      	ldr	r2, [pc, #152]	; (8005360 <HAL_TIM_Base_Start_IT+0xd0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d022      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d01d      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a22      	ldr	r2, [pc, #136]	; (8005364 <HAL_TIM_Base_Start_IT+0xd4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d018      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a21      	ldr	r2, [pc, #132]	; (8005368 <HAL_TIM_Base_Start_IT+0xd8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d013      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <HAL_TIM_Base_Start_IT+0xdc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00e      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <HAL_TIM_Base_Start_IT+0xe0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d009      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <HAL_TIM_Base_Start_IT+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d004      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <HAL_TIM_Base_Start_IT+0xe8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d115      	bne.n	800533c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_TIM_Base_Start_IT+0xec>)
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d015      	beq.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d011      	beq.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533a:	e008      	b.n	800534e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e000      	b.n	8005350 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40010400 	.word	0x40010400
 8005374:	40014000 	.word	0x40014000
 8005378:	40001800 	.word	0x40001800
 800537c:	00010007 	.word	0x00010007

08005380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e049      	b.n	8005426 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f841 	bl	800542e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f000 fce2 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <HAL_TIM_PWM_Start+0x24>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e03c      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b04      	cmp	r3, #4
 800546c:	d109      	bne.n	8005482 <HAL_TIM_PWM_Start+0x3e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	bf14      	ite	ne
 800547a:	2301      	movne	r3, #1
 800547c:	2300      	moveq	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	e02f      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d109      	bne.n	800549c <HAL_TIM_PWM_Start+0x58>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	bf14      	ite	ne
 8005494:	2301      	movne	r3, #1
 8005496:	2300      	moveq	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e022      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b0c      	cmp	r3, #12
 80054a0:	d109      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x72>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	e015      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d109      	bne.n	80054d0 <HAL_TIM_PWM_Start+0x8c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e008      	b.n	80054e2 <HAL_TIM_PWM_Start+0x9e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e092      	b.n	8005610 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start+0xb6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f8:	e023      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start+0xc6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005508:	e01b      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Start+0xd6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005518:	e013      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d104      	bne.n	800552a <HAL_TIM_PWM_Start+0xe6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005528:	e00b      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b10      	cmp	r3, #16
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0xf6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005538:	e003      	b.n	8005542 <HAL_TIM_PWM_Start+0xfe>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 ffb4 	bl	80064b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a30      	ldr	r2, [pc, #192]	; (8005618 <HAL_TIM_PWM_Start+0x1d4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIM_PWM_Start+0x120>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2f      	ldr	r2, [pc, #188]	; (800561c <HAL_TIM_PWM_Start+0x1d8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d101      	bne.n	8005568 <HAL_TIM_PWM_Start+0x124>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <HAL_TIM_PWM_Start+0x126>
 8005568:	2300      	movs	r3, #0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800557c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a25      	ldr	r2, [pc, #148]	; (8005618 <HAL_TIM_PWM_Start+0x1d4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_TIM_PWM_Start+0x18a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d01d      	beq.n	80055ce <HAL_TIM_PWM_Start+0x18a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a22      	ldr	r2, [pc, #136]	; (8005620 <HAL_TIM_PWM_Start+0x1dc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_TIM_PWM_Start+0x18a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a20      	ldr	r2, [pc, #128]	; (8005624 <HAL_TIM_PWM_Start+0x1e0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_TIM_PWM_Start+0x18a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <HAL_TIM_PWM_Start+0x1e4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_TIM_PWM_Start+0x18a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_TIM_PWM_Start+0x1d8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIM_PWM_Start+0x18a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1b      	ldr	r2, [pc, #108]	; (800562c <HAL_TIM_PWM_Start+0x1e8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIM_PWM_Start+0x18a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a19      	ldr	r2, [pc, #100]	; (8005630 <HAL_TIM_PWM_Start+0x1ec>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d115      	bne.n	80055fa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	4b17      	ldr	r3, [pc, #92]	; (8005634 <HAL_TIM_PWM_Start+0x1f0>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d015      	beq.n	800560c <HAL_TIM_PWM_Start+0x1c8>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e6:	d011      	beq.n	800560c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f8:	e008      	b.n	800560c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0201 	orr.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e000      	b.n	800560e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40010000 	.word	0x40010000
 800561c:	40010400 	.word	0x40010400
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40014000 	.word	0x40014000
 8005630:	40001800 	.word	0x40001800
 8005634:	00010007 	.word	0x00010007

08005638 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 ff34 	bl	80064b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a36      	ldr	r2, [pc, #216]	; (8005730 <HAL_TIM_PWM_Stop+0xf8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_PWM_Stop+0x2c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a35      	ldr	r2, [pc, #212]	; (8005734 <HAL_TIM_PWM_Stop+0xfc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_TIM_PWM_Stop+0x30>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_TIM_PWM_Stop+0x32>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d017      	beq.n	800569e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	f241 1311 	movw	r3, #4369	; 0x1111
 8005678:	4013      	ands	r3, r2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <HAL_TIM_PWM_Stop+0x66>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1a      	ldr	r2, [r3, #32]
 8005684:	f240 4344 	movw	r3, #1092	; 0x444
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <HAL_TIM_PWM_Stop+0x66>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800569c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a1a      	ldr	r2, [r3, #32]
 80056a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10f      	bne.n	80056ce <HAL_TIM_PWM_Stop+0x96>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6a1a      	ldr	r2, [r3, #32]
 80056b4:	f240 4344 	movw	r3, #1092	; 0x444
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d107      	bne.n	80056ce <HAL_TIM_PWM_Stop+0x96>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <HAL_TIM_PWM_Stop+0xa6>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056dc:	e023      	b.n	8005726 <HAL_TIM_PWM_Stop+0xee>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_PWM_Stop+0xb6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ec:	e01b      	b.n	8005726 <HAL_TIM_PWM_Stop+0xee>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_PWM_Stop+0xc6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056fc:	e013      	b.n	8005726 <HAL_TIM_PWM_Stop+0xee>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_Stop+0xd6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800570c:	e00b      	b.n	8005726 <HAL_TIM_PWM_Stop+0xee>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b10      	cmp	r3, #16
 8005712:	d104      	bne.n	800571e <HAL_TIM_PWM_Stop+0xe6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800571c:	e003      	b.n	8005726 <HAL_TIM_PWM_Stop+0xee>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40010000 	.word	0x40010000
 8005734:	40010400 	.word	0x40010400

08005738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d122      	bne.n	8005794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	d11b      	bne.n	8005794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0202 	mvn.w	r2, #2
 8005764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fae6 	bl	8005d4c <HAL_TIM_IC_CaptureCallback>
 8005780:	e005      	b.n	800578e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fad8 	bl	8005d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fae9 	bl	8005d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d122      	bne.n	80057e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d11b      	bne.n	80057e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0204 	mvn.w	r2, #4
 80057b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fabc 	bl	8005d4c <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 faae 	bl	8005d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fabf 	bl	8005d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b08      	cmp	r3, #8
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0208 	mvn.w	r2, #8
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa92 	bl	8005d4c <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa84 	bl	8005d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa95 	bl	8005d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b10      	cmp	r3, #16
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b10      	cmp	r3, #16
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0210 	mvn.w	r2, #16
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2208      	movs	r2, #8
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa68 	bl	8005d4c <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fa5a 	bl	8005d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fa6b 	bl	8005d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	d10e      	bne.n	80058bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d107      	bne.n	80058bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0201 	mvn.w	r2, #1
 80058b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fa34 	bl	8005d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d10e      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d4:	2b80      	cmp	r3, #128	; 0x80
 80058d6:	d107      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fea6 	bl	8006634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f6:	d10e      	bne.n	8005916 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	d107      	bne.n	8005916 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800590e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fe99 	bl	8006648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d10e      	bne.n	8005942 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d107      	bne.n	8005942 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800593a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fa19 	bl	8005d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b20      	cmp	r3, #32
 800594e:	d10e      	bne.n	800596e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b20      	cmp	r3, #32
 800595c:	d107      	bne.n	800596e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f06f 0220 	mvn.w	r2, #32
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fe59 	bl	8006620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800598e:	2302      	movs	r3, #2
 8005990:	e0fd      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b14      	cmp	r3, #20
 800599e:	f200 80f0 	bhi.w	8005b82 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	08005b83 	.word	0x08005b83
 80059b0:	08005b83 	.word	0x08005b83
 80059b4:	08005b83 	.word	0x08005b83
 80059b8:	08005a3d 	.word	0x08005a3d
 80059bc:	08005b83 	.word	0x08005b83
 80059c0:	08005b83 	.word	0x08005b83
 80059c4:	08005b83 	.word	0x08005b83
 80059c8:	08005a7f 	.word	0x08005a7f
 80059cc:	08005b83 	.word	0x08005b83
 80059d0:	08005b83 	.word	0x08005b83
 80059d4:	08005b83 	.word	0x08005b83
 80059d8:	08005abf 	.word	0x08005abf
 80059dc:	08005b83 	.word	0x08005b83
 80059e0:	08005b83 	.word	0x08005b83
 80059e4:	08005b83 	.word	0x08005b83
 80059e8:	08005b01 	.word	0x08005b01
 80059ec:	08005b83 	.word	0x08005b83
 80059f0:	08005b83 	.word	0x08005b83
 80059f4:	08005b83 	.word	0x08005b83
 80059f8:	08005b41 	.word	0x08005b41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fa60 	bl	8005ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0208 	orr.w	r2, r2, #8
 8005a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0204 	bic.w	r2, r2, #4
 8005a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6999      	ldr	r1, [r3, #24]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	619a      	str	r2, [r3, #24]
      break;
 8005a3a:	e0a3      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fab2 	bl	8005fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6999      	ldr	r1, [r3, #24]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	021a      	lsls	r2, r3, #8
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	619a      	str	r2, [r3, #24]
      break;
 8005a7c:	e082      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fb09 	bl	800609c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0208 	orr.w	r2, r2, #8
 8005a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0204 	bic.w	r2, r2, #4
 8005aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69d9      	ldr	r1, [r3, #28]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	61da      	str	r2, [r3, #28]
      break;
 8005abc:	e062      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fb5f 	bl	8006188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69d9      	ldr	r1, [r3, #28]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	021a      	lsls	r2, r3, #8
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	61da      	str	r2, [r3, #28]
      break;
 8005afe:	e041      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fb96 	bl	8006238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0208 	orr.w	r2, r2, #8
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0204 	bic.w	r2, r2, #4
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b3e:	e021      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fbc8 	bl	80062dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b80:	e000      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005b82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop

08005b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_ConfigClockSource+0x18>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e0b3      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x180>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4b55      	ldr	r3, [pc, #340]	; (8005d20 <HAL_TIM_ConfigClockSource+0x188>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be8:	d03e      	beq.n	8005c68 <HAL_TIM_ConfigClockSource+0xd0>
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	f200 8087 	bhi.w	8005d00 <HAL_TIM_ConfigClockSource+0x168>
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf6:	f000 8085 	beq.w	8005d04 <HAL_TIM_ConfigClockSource+0x16c>
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d87f      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x168>
 8005c00:	2b70      	cmp	r3, #112	; 0x70
 8005c02:	d01a      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0xa2>
 8005c04:	2b70      	cmp	r3, #112	; 0x70
 8005c06:	d87b      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x168>
 8005c08:	2b60      	cmp	r3, #96	; 0x60
 8005c0a:	d050      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x116>
 8005c0c:	2b60      	cmp	r3, #96	; 0x60
 8005c0e:	d877      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x168>
 8005c10:	2b50      	cmp	r3, #80	; 0x50
 8005c12:	d03c      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0xf6>
 8005c14:	2b50      	cmp	r3, #80	; 0x50
 8005c16:	d873      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x168>
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d058      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x136>
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d86f      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x168>
 8005c20:	2b30      	cmp	r3, #48	; 0x30
 8005c22:	d064      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x156>
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d86b      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x168>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d060      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x156>
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d867      	bhi.n	8005d00 <HAL_TIM_ConfigClockSource+0x168>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d05c      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x156>
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d05a      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005c38:	e062      	b.n	8005d00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6899      	ldr	r1, [r3, #8]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f000 fc15 	bl	8006478 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	609a      	str	r2, [r3, #8]
      break;
 8005c66:	e04e      	b.n	8005d06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6899      	ldr	r1, [r3, #8]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f000 fbfe 	bl	8006478 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c8a:	609a      	str	r2, [r3, #8]
      break;
 8005c8c:	e03b      	b.n	8005d06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6859      	ldr	r1, [r3, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f000 fb72 	bl	8006384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2150      	movs	r1, #80	; 0x50
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fbcb 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005cac:	e02b      	b.n	8005d06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6859      	ldr	r1, [r3, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f000 fb91 	bl	80063e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2160      	movs	r1, #96	; 0x60
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fbbb 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005ccc:	e01b      	b.n	8005d06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 fb52 	bl	8006384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2140      	movs	r1, #64	; 0x40
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fbab 	bl	8006442 <TIM_ITRx_SetConfig>
      break;
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f000 fba2 	bl	8006442 <TIM_ITRx_SetConfig>
        break;
 8005cfe:	e002      	b.n	8005d06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d00:	bf00      	nop
 8005d02:	e000      	b.n	8005d06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	fffeff88 	.word	0xfffeff88

08005d24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a40      	ldr	r2, [pc, #256]	; (8005e9c <TIM_Base_SetConfig+0x114>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da6:	d00f      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a3d      	ldr	r2, [pc, #244]	; (8005ea0 <TIM_Base_SetConfig+0x118>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a3c      	ldr	r2, [pc, #240]	; (8005ea4 <TIM_Base_SetConfig+0x11c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d007      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3b      	ldr	r2, [pc, #236]	; (8005ea8 <TIM_Base_SetConfig+0x120>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3a      	ldr	r2, [pc, #232]	; (8005eac <TIM_Base_SetConfig+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2f      	ldr	r2, [pc, #188]	; (8005e9c <TIM_Base_SetConfig+0x114>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d02b      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de8:	d027      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2c      	ldr	r2, [pc, #176]	; (8005ea0 <TIM_Base_SetConfig+0x118>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d023      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a2b      	ldr	r2, [pc, #172]	; (8005ea4 <TIM_Base_SetConfig+0x11c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d01f      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2a      	ldr	r2, [pc, #168]	; (8005ea8 <TIM_Base_SetConfig+0x120>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d01b      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a29      	ldr	r2, [pc, #164]	; (8005eac <TIM_Base_SetConfig+0x124>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d017      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <TIM_Base_SetConfig+0x128>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a27      	ldr	r2, [pc, #156]	; (8005eb4 <TIM_Base_SetConfig+0x12c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00f      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a26      	ldr	r2, [pc, #152]	; (8005eb8 <TIM_Base_SetConfig+0x130>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00b      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <TIM_Base_SetConfig+0x134>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d007      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a24      	ldr	r2, [pc, #144]	; (8005ec0 <TIM_Base_SetConfig+0x138>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a23      	ldr	r2, [pc, #140]	; (8005ec4 <TIM_Base_SetConfig+0x13c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d108      	bne.n	8005e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <TIM_Base_SetConfig+0x114>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_Base_SetConfig+0xf8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <TIM_Base_SetConfig+0x124>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d103      	bne.n	8005e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	615a      	str	r2, [r3, #20]
}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40014400 	.word	0x40014400
 8005eb8:	40014800 	.word	0x40014800
 8005ebc:	40001800 	.word	0x40001800
 8005ec0:	40001c00 	.word	0x40001c00
 8005ec4:	40002000 	.word	0x40002000

08005ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f023 0201 	bic.w	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <TIM_OC1_SetConfig+0xd8>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 0302 	bic.w	r3, r3, #2
 8005f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a21      	ldr	r2, [pc, #132]	; (8005fa4 <TIM_OC1_SetConfig+0xdc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC1_SetConfig+0x64>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <TIM_OC1_SetConfig+0xe0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d10c      	bne.n	8005f46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f023 0308 	bic.w	r3, r3, #8
 8005f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f023 0304 	bic.w	r3, r3, #4
 8005f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a16      	ldr	r2, [pc, #88]	; (8005fa4 <TIM_OC1_SetConfig+0xdc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_OC1_SetConfig+0x8e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <TIM_OC1_SetConfig+0xe0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d111      	bne.n	8005f7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	621a      	str	r2, [r3, #32]
}
 8005f94:	bf00      	nop
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	fffeff8f 	.word	0xfffeff8f
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40010400 	.word	0x40010400

08005fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f023 0210 	bic.w	r2, r3, #16
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4b2e      	ldr	r3, [pc, #184]	; (8006090 <TIM_OC2_SetConfig+0xe4>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a23      	ldr	r2, [pc, #140]	; (8006094 <TIM_OC2_SetConfig+0xe8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_OC2_SetConfig+0x68>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a22      	ldr	r2, [pc, #136]	; (8006098 <TIM_OC2_SetConfig+0xec>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d10d      	bne.n	8006030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a18      	ldr	r2, [pc, #96]	; (8006094 <TIM_OC2_SetConfig+0xe8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_OC2_SetConfig+0x94>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <TIM_OC2_SetConfig+0xec>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d113      	bne.n	8006068 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	feff8fff 	.word	0xfeff8fff
 8006094:	40010000 	.word	0x40010000
 8006098:	40010400 	.word	0x40010400

0800609c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4b2d      	ldr	r3, [pc, #180]	; (800617c <TIM_OC3_SetConfig+0xe0>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0303 	bic.w	r3, r3, #3
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a22      	ldr	r2, [pc, #136]	; (8006180 <TIM_OC3_SetConfig+0xe4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_OC3_SetConfig+0x66>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a21      	ldr	r2, [pc, #132]	; (8006184 <TIM_OC3_SetConfig+0xe8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10d      	bne.n	800611e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800611c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a17      	ldr	r2, [pc, #92]	; (8006180 <TIM_OC3_SetConfig+0xe4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_OC3_SetConfig+0x92>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a16      	ldr	r2, [pc, #88]	; (8006184 <TIM_OC3_SetConfig+0xe8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d113      	bne.n	8006156 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800613c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	621a      	str	r2, [r3, #32]
}
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	fffeff8f 	.word	0xfffeff8f
 8006180:	40010000 	.word	0x40010000
 8006184:	40010400 	.word	0x40010400

08006188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <TIM_OC4_SetConfig+0xa4>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	031b      	lsls	r3, r3, #12
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a13      	ldr	r2, [pc, #76]	; (8006230 <TIM_OC4_SetConfig+0xa8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC4_SetConfig+0x68>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <TIM_OC4_SetConfig+0xac>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d109      	bne.n	8006204 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	019b      	lsls	r3, r3, #6
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	feff8fff 	.word	0xfeff8fff
 8006230:	40010000 	.word	0x40010000
 8006234:	40010400 	.word	0x40010400

08006238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <TIM_OC5_SetConfig+0x98>)
 8006264:	4013      	ands	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	041b      	lsls	r3, r3, #16
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a12      	ldr	r2, [pc, #72]	; (80062d4 <TIM_OC5_SetConfig+0x9c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC5_SetConfig+0x5e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a11      	ldr	r2, [pc, #68]	; (80062d8 <TIM_OC5_SetConfig+0xa0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d109      	bne.n	80062aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	621a      	str	r2, [r3, #32]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	fffeff8f 	.word	0xfffeff8f
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400

080062dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <TIM_OC6_SetConfig+0x9c>)
 8006308:	4013      	ands	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800631e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	051b      	lsls	r3, r3, #20
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a13      	ldr	r2, [pc, #76]	; (800637c <TIM_OC6_SetConfig+0xa0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_OC6_SetConfig+0x60>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <TIM_OC6_SetConfig+0xa4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d109      	bne.n	8006350 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	029b      	lsls	r3, r3, #10
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	feff8fff 	.word	0xfeff8fff
 800637c:	40010000 	.word	0x40010000
 8006380:	40010400 	.word	0x40010400

08006384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 030a 	bic.w	r3, r3, #10
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f023 0210 	bic.w	r2, r3, #16
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800640c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	031b      	lsls	r3, r3, #12
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800641e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	f043 0307 	orr.w	r3, r3, #7
 8006464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	609a      	str	r2, [r3, #8]
}
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	021a      	lsls	r2, r3, #8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	431a      	orrs	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4313      	orrs	r3, r2
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	609a      	str	r2, [r3, #8]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2201      	movs	r2, #1
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1a      	ldr	r2, [r3, #32]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	43db      	mvns	r3, r3
 80064da:	401a      	ands	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1a      	ldr	r2, [r3, #32]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	431a      	orrs	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006518:	2302      	movs	r3, #2
 800651a:	e06d      	b.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a30      	ldr	r2, [pc, #192]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2f      	ldr	r2, [pc, #188]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d108      	bne.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006556:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006568:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a20      	ldr	r2, [pc, #128]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d022      	beq.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658e:	d01d      	beq.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1d      	ldr	r2, [pc, #116]	; (800660c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a15      	ldr	r2, [pc, #84]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a16      	ldr	r2, [pc, #88]	; (8006618 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a15      	ldr	r2, [pc, #84]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d10c      	bne.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	40010000 	.word	0x40010000
 8006608:	40010400 	.word	0x40010400
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40014000 	.word	0x40014000
 800661c:	40001800 	.word	0x40001800

08006620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e040      	b.n	80066f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fb fa96 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2224      	movs	r2, #36	; 0x24
 8006688:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0201 	bic.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f8c0 	bl	8006820 <UART_SetConfig>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e022      	b.n	80066f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fb16 	bl	8006ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fb9d 	bl	8006e28 <UART_CheckIdleState>
 80066ee:	4603      	mov	r3, r0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	; 0x28
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	4613      	mov	r3, r2
 8006706:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800670c:	2b20      	cmp	r3, #32
 800670e:	f040 8081 	bne.w	8006814 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <HAL_UART_Transmit+0x26>
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e079      	b.n	8006816 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_UART_Transmit+0x38>
 800672c:	2302      	movs	r3, #2
 800672e:	e072      	b.n	8006816 <HAL_UART_Transmit+0x11e>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2221      	movs	r2, #33	; 0x21
 8006744:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006746:	f7fc f843 	bl	80027d0 <HAL_GetTick>
 800674a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	88fa      	ldrh	r2, [r7, #6]
 8006758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006764:	d108      	bne.n	8006778 <HAL_UART_Transmit+0x80>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	e003      	b.n	8006780 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800677c:	2300      	movs	r3, #0
 800677e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006788:	e02c      	b.n	80067e4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2200      	movs	r2, #0
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fb90 	bl	8006eba <UART_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e038      	b.n	8006816 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10b      	bne.n	80067c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	3302      	adds	r3, #2
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	e007      	b.n	80067d2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	3301      	adds	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1cc      	bne.n	800678a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	2140      	movs	r1, #64	; 0x40
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fb5d 	bl	8006eba <UART_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e005      	b.n	8006816 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2220      	movs	r2, #32
 800680e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	e000      	b.n	8006816 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006814:	2302      	movs	r3, #2
  }
}
 8006816:	4618      	mov	r0, r3
 8006818:	3720      	adds	r7, #32
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4ba7      	ldr	r3, [pc, #668]	; (8006ae8 <UART_SetConfig+0x2c8>)
 800684c:	4013      	ands	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	6979      	ldr	r1, [r7, #20]
 8006854:	430b      	orrs	r3, r1
 8006856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a95      	ldr	r2, [pc, #596]	; (8006aec <UART_SetConfig+0x2cc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d120      	bne.n	80068de <UART_SetConfig+0xbe>
 800689c:	4b94      	ldr	r3, [pc, #592]	; (8006af0 <UART_SetConfig+0x2d0>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d816      	bhi.n	80068d8 <UART_SetConfig+0xb8>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x90>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	080068c7 	.word	0x080068c7
 80068bc:	080068d3 	.word	0x080068d3
 80068c0:	2301      	movs	r3, #1
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e14f      	b.n	8006b66 <UART_SetConfig+0x346>
 80068c6:	2302      	movs	r3, #2
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e14c      	b.n	8006b66 <UART_SetConfig+0x346>
 80068cc:	2304      	movs	r3, #4
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e149      	b.n	8006b66 <UART_SetConfig+0x346>
 80068d2:	2308      	movs	r3, #8
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	e146      	b.n	8006b66 <UART_SetConfig+0x346>
 80068d8:	2310      	movs	r3, #16
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e143      	b.n	8006b66 <UART_SetConfig+0x346>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a84      	ldr	r2, [pc, #528]	; (8006af4 <UART_SetConfig+0x2d4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d132      	bne.n	800694e <UART_SetConfig+0x12e>
 80068e8:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <UART_SetConfig+0x2d0>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	f003 030c 	and.w	r3, r3, #12
 80068f2:	2b0c      	cmp	r3, #12
 80068f4:	d828      	bhi.n	8006948 <UART_SetConfig+0x128>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0xdc>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	08006931 	.word	0x08006931
 8006900:	08006949 	.word	0x08006949
 8006904:	08006949 	.word	0x08006949
 8006908:	08006949 	.word	0x08006949
 800690c:	0800693d 	.word	0x0800693d
 8006910:	08006949 	.word	0x08006949
 8006914:	08006949 	.word	0x08006949
 8006918:	08006949 	.word	0x08006949
 800691c:	08006937 	.word	0x08006937
 8006920:	08006949 	.word	0x08006949
 8006924:	08006949 	.word	0x08006949
 8006928:	08006949 	.word	0x08006949
 800692c:	08006943 	.word	0x08006943
 8006930:	2300      	movs	r3, #0
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e117      	b.n	8006b66 <UART_SetConfig+0x346>
 8006936:	2302      	movs	r3, #2
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e114      	b.n	8006b66 <UART_SetConfig+0x346>
 800693c:	2304      	movs	r3, #4
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e111      	b.n	8006b66 <UART_SetConfig+0x346>
 8006942:	2308      	movs	r3, #8
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e10e      	b.n	8006b66 <UART_SetConfig+0x346>
 8006948:	2310      	movs	r3, #16
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e10b      	b.n	8006b66 <UART_SetConfig+0x346>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a69      	ldr	r2, [pc, #420]	; (8006af8 <UART_SetConfig+0x2d8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d120      	bne.n	800699a <UART_SetConfig+0x17a>
 8006958:	4b65      	ldr	r3, [pc, #404]	; (8006af0 <UART_SetConfig+0x2d0>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006962:	2b30      	cmp	r3, #48	; 0x30
 8006964:	d013      	beq.n	800698e <UART_SetConfig+0x16e>
 8006966:	2b30      	cmp	r3, #48	; 0x30
 8006968:	d814      	bhi.n	8006994 <UART_SetConfig+0x174>
 800696a:	2b20      	cmp	r3, #32
 800696c:	d009      	beq.n	8006982 <UART_SetConfig+0x162>
 800696e:	2b20      	cmp	r3, #32
 8006970:	d810      	bhi.n	8006994 <UART_SetConfig+0x174>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <UART_SetConfig+0x15c>
 8006976:	2b10      	cmp	r3, #16
 8006978:	d006      	beq.n	8006988 <UART_SetConfig+0x168>
 800697a:	e00b      	b.n	8006994 <UART_SetConfig+0x174>
 800697c:	2300      	movs	r3, #0
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e0f1      	b.n	8006b66 <UART_SetConfig+0x346>
 8006982:	2302      	movs	r3, #2
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e0ee      	b.n	8006b66 <UART_SetConfig+0x346>
 8006988:	2304      	movs	r3, #4
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e0eb      	b.n	8006b66 <UART_SetConfig+0x346>
 800698e:	2308      	movs	r3, #8
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e0e8      	b.n	8006b66 <UART_SetConfig+0x346>
 8006994:	2310      	movs	r3, #16
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e0e5      	b.n	8006b66 <UART_SetConfig+0x346>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a57      	ldr	r2, [pc, #348]	; (8006afc <UART_SetConfig+0x2dc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d120      	bne.n	80069e6 <UART_SetConfig+0x1c6>
 80069a4:	4b52      	ldr	r3, [pc, #328]	; (8006af0 <UART_SetConfig+0x2d0>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ae:	2bc0      	cmp	r3, #192	; 0xc0
 80069b0:	d013      	beq.n	80069da <UART_SetConfig+0x1ba>
 80069b2:	2bc0      	cmp	r3, #192	; 0xc0
 80069b4:	d814      	bhi.n	80069e0 <UART_SetConfig+0x1c0>
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	d009      	beq.n	80069ce <UART_SetConfig+0x1ae>
 80069ba:	2b80      	cmp	r3, #128	; 0x80
 80069bc:	d810      	bhi.n	80069e0 <UART_SetConfig+0x1c0>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <UART_SetConfig+0x1a8>
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d006      	beq.n	80069d4 <UART_SetConfig+0x1b4>
 80069c6:	e00b      	b.n	80069e0 <UART_SetConfig+0x1c0>
 80069c8:	2300      	movs	r3, #0
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e0cb      	b.n	8006b66 <UART_SetConfig+0x346>
 80069ce:	2302      	movs	r3, #2
 80069d0:	77fb      	strb	r3, [r7, #31]
 80069d2:	e0c8      	b.n	8006b66 <UART_SetConfig+0x346>
 80069d4:	2304      	movs	r3, #4
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e0c5      	b.n	8006b66 <UART_SetConfig+0x346>
 80069da:	2308      	movs	r3, #8
 80069dc:	77fb      	strb	r3, [r7, #31]
 80069de:	e0c2      	b.n	8006b66 <UART_SetConfig+0x346>
 80069e0:	2310      	movs	r3, #16
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e0bf      	b.n	8006b66 <UART_SetConfig+0x346>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a45      	ldr	r2, [pc, #276]	; (8006b00 <UART_SetConfig+0x2e0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d125      	bne.n	8006a3c <UART_SetConfig+0x21c>
 80069f0:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <UART_SetConfig+0x2d0>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069fe:	d017      	beq.n	8006a30 <UART_SetConfig+0x210>
 8006a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a04:	d817      	bhi.n	8006a36 <UART_SetConfig+0x216>
 8006a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0a:	d00b      	beq.n	8006a24 <UART_SetConfig+0x204>
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a10:	d811      	bhi.n	8006a36 <UART_SetConfig+0x216>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <UART_SetConfig+0x1fe>
 8006a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1a:	d006      	beq.n	8006a2a <UART_SetConfig+0x20a>
 8006a1c:	e00b      	b.n	8006a36 <UART_SetConfig+0x216>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e0a0      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a24:	2302      	movs	r3, #2
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e09d      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a2a:	2304      	movs	r3, #4
 8006a2c:	77fb      	strb	r3, [r7, #31]
 8006a2e:	e09a      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a30:	2308      	movs	r3, #8
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e097      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a36:	2310      	movs	r3, #16
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e094      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a30      	ldr	r2, [pc, #192]	; (8006b04 <UART_SetConfig+0x2e4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d125      	bne.n	8006a92 <UART_SetConfig+0x272>
 8006a46:	4b2a      	ldr	r3, [pc, #168]	; (8006af0 <UART_SetConfig+0x2d0>)
 8006a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a54:	d017      	beq.n	8006a86 <UART_SetConfig+0x266>
 8006a56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a5a:	d817      	bhi.n	8006a8c <UART_SetConfig+0x26c>
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a60:	d00b      	beq.n	8006a7a <UART_SetConfig+0x25a>
 8006a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a66:	d811      	bhi.n	8006a8c <UART_SetConfig+0x26c>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <UART_SetConfig+0x254>
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d006      	beq.n	8006a80 <UART_SetConfig+0x260>
 8006a72:	e00b      	b.n	8006a8c <UART_SetConfig+0x26c>
 8006a74:	2301      	movs	r3, #1
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e075      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e072      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a80:	2304      	movs	r3, #4
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e06f      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a86:	2308      	movs	r3, #8
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e06c      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	e069      	b.n	8006b66 <UART_SetConfig+0x346>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <UART_SetConfig+0x2e8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d137      	bne.n	8006b0c <UART_SetConfig+0x2ec>
 8006a9c:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <UART_SetConfig+0x2d0>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006aa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aaa:	d017      	beq.n	8006adc <UART_SetConfig+0x2bc>
 8006aac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ab0:	d817      	bhi.n	8006ae2 <UART_SetConfig+0x2c2>
 8006ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab6:	d00b      	beq.n	8006ad0 <UART_SetConfig+0x2b0>
 8006ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006abc:	d811      	bhi.n	8006ae2 <UART_SetConfig+0x2c2>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <UART_SetConfig+0x2aa>
 8006ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac6:	d006      	beq.n	8006ad6 <UART_SetConfig+0x2b6>
 8006ac8:	e00b      	b.n	8006ae2 <UART_SetConfig+0x2c2>
 8006aca:	2300      	movs	r3, #0
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e04a      	b.n	8006b66 <UART_SetConfig+0x346>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e047      	b.n	8006b66 <UART_SetConfig+0x346>
 8006ad6:	2304      	movs	r3, #4
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e044      	b.n	8006b66 <UART_SetConfig+0x346>
 8006adc:	2308      	movs	r3, #8
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e041      	b.n	8006b66 <UART_SetConfig+0x346>
 8006ae2:	2310      	movs	r3, #16
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e03e      	b.n	8006b66 <UART_SetConfig+0x346>
 8006ae8:	efff69f3 	.word	0xefff69f3
 8006aec:	40011000 	.word	0x40011000
 8006af0:	40023800 	.word	0x40023800
 8006af4:	40004400 	.word	0x40004400
 8006af8:	40004800 	.word	0x40004800
 8006afc:	40004c00 	.word	0x40004c00
 8006b00:	40005000 	.word	0x40005000
 8006b04:	40011400 	.word	0x40011400
 8006b08:	40007800 	.word	0x40007800
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a71      	ldr	r2, [pc, #452]	; (8006cd8 <UART_SetConfig+0x4b8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d125      	bne.n	8006b62 <UART_SetConfig+0x342>
 8006b16:	4b71      	ldr	r3, [pc, #452]	; (8006cdc <UART_SetConfig+0x4bc>)
 8006b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b24:	d017      	beq.n	8006b56 <UART_SetConfig+0x336>
 8006b26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b2a:	d817      	bhi.n	8006b5c <UART_SetConfig+0x33c>
 8006b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b30:	d00b      	beq.n	8006b4a <UART_SetConfig+0x32a>
 8006b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b36:	d811      	bhi.n	8006b5c <UART_SetConfig+0x33c>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <UART_SetConfig+0x324>
 8006b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b40:	d006      	beq.n	8006b50 <UART_SetConfig+0x330>
 8006b42:	e00b      	b.n	8006b5c <UART_SetConfig+0x33c>
 8006b44:	2300      	movs	r3, #0
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e00d      	b.n	8006b66 <UART_SetConfig+0x346>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e00a      	b.n	8006b66 <UART_SetConfig+0x346>
 8006b50:	2304      	movs	r3, #4
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e007      	b.n	8006b66 <UART_SetConfig+0x346>
 8006b56:	2308      	movs	r3, #8
 8006b58:	77fb      	strb	r3, [r7, #31]
 8006b5a:	e004      	b.n	8006b66 <UART_SetConfig+0x346>
 8006b5c:	2310      	movs	r3, #16
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	e001      	b.n	8006b66 <UART_SetConfig+0x346>
 8006b62:	2310      	movs	r3, #16
 8006b64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6e:	d15b      	bne.n	8006c28 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006b70:	7ffb      	ldrb	r3, [r7, #31]
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d827      	bhi.n	8006bc6 <UART_SetConfig+0x3a6>
 8006b76:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <UART_SetConfig+0x35c>)
 8006b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006ba9 	.word	0x08006ba9
 8006b84:	08006bb1 	.word	0x08006bb1
 8006b88:	08006bc7 	.word	0x08006bc7
 8006b8c:	08006bb7 	.word	0x08006bb7
 8006b90:	08006bc7 	.word	0x08006bc7
 8006b94:	08006bc7 	.word	0x08006bc7
 8006b98:	08006bc7 	.word	0x08006bc7
 8006b9c:	08006bbf 	.word	0x08006bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba0:	f7fd fb2a 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8006ba4:	61b8      	str	r0, [r7, #24]
        break;
 8006ba6:	e013      	b.n	8006bd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba8:	f7fd fb3a 	bl	8004220 <HAL_RCC_GetPCLK2Freq>
 8006bac:	61b8      	str	r0, [r7, #24]
        break;
 8006bae:	e00f      	b.n	8006bd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb0:	4b4b      	ldr	r3, [pc, #300]	; (8006ce0 <UART_SetConfig+0x4c0>)
 8006bb2:	61bb      	str	r3, [r7, #24]
        break;
 8006bb4:	e00c      	b.n	8006bd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb6:	f7fd fa31 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8006bba:	61b8      	str	r0, [r7, #24]
        break;
 8006bbc:	e008      	b.n	8006bd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc2:	61bb      	str	r3, [r7, #24]
        break;
 8006bc4:	e004      	b.n	8006bd0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	77bb      	strb	r3, [r7, #30]
        break;
 8006bce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d074      	beq.n	8006cc0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	005a      	lsls	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	441a      	add	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d916      	bls.n	8006c22 <UART_SetConfig+0x402>
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfa:	d212      	bcs.n	8006c22 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f023 030f 	bic.w	r3, r3, #15
 8006c04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	89fb      	ldrh	r3, [r7, #14]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	89fa      	ldrh	r2, [r7, #14]
 8006c1e:	60da      	str	r2, [r3, #12]
 8006c20:	e04e      	b.n	8006cc0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	77bb      	strb	r3, [r7, #30]
 8006c26:	e04b      	b.n	8006cc0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c28:	7ffb      	ldrb	r3, [r7, #31]
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d827      	bhi.n	8006c7e <UART_SetConfig+0x45e>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <UART_SetConfig+0x414>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c61 	.word	0x08006c61
 8006c3c:	08006c69 	.word	0x08006c69
 8006c40:	08006c7f 	.word	0x08006c7f
 8006c44:	08006c6f 	.word	0x08006c6f
 8006c48:	08006c7f 	.word	0x08006c7f
 8006c4c:	08006c7f 	.word	0x08006c7f
 8006c50:	08006c7f 	.word	0x08006c7f
 8006c54:	08006c77 	.word	0x08006c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c58:	f7fd face 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8006c5c:	61b8      	str	r0, [r7, #24]
        break;
 8006c5e:	e013      	b.n	8006c88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c60:	f7fd fade 	bl	8004220 <HAL_RCC_GetPCLK2Freq>
 8006c64:	61b8      	str	r0, [r7, #24]
        break;
 8006c66:	e00f      	b.n	8006c88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c68:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <UART_SetConfig+0x4c0>)
 8006c6a:	61bb      	str	r3, [r7, #24]
        break;
 8006c6c:	e00c      	b.n	8006c88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6e:	f7fd f9d5 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8006c72:	61b8      	str	r0, [r7, #24]
        break;
 8006c74:	e008      	b.n	8006c88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7a:	61bb      	str	r3, [r7, #24]
        break;
 8006c7c:	e004      	b.n	8006c88 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	77bb      	strb	r3, [r7, #30]
        break;
 8006c86:	bf00      	nop
    }

    if (pclk != 0U)
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d018      	beq.n	8006cc0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	085a      	lsrs	r2, r3, #1
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	441a      	add	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d908      	bls.n	8006cbc <UART_SetConfig+0x49c>
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb0:	d204      	bcs.n	8006cbc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	e001      	b.n	8006cc0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ccc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40007c00 	.word	0x40007c00
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	00f42400 	.word	0x00f42400

08006ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de2:	d10a      	bne.n	8006dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e38:	f7fb fcca 	bl	80027d0 <HAL_GetTick>
 8006e3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d10e      	bne.n	8006e6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f82d 	bl	8006eba <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e023      	b.n	8006eb2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d10e      	bne.n	8006e96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f817 	bl	8006eba <UART_WaitOnFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e00d      	b.n	8006eb2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eca:	e05e      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d05a      	beq.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed4:	f7fb fc7c 	bl	80027d0 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d302      	bcc.n	8006eea <UART_WaitOnFlagUntilTimeout+0x30>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d11b      	bne.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ef8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e043      	b.n	8006faa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d02c      	beq.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3e:	d124      	bne.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0201 	bic.w	r2, r2, #1
 8006f68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e00f      	b.n	8006faa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4013      	ands	r3, r2
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	bf0c      	ite	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	2300      	movne	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d091      	beq.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <__errno>:
 8006fb4:	4b01      	ldr	r3, [pc, #4]	; (8006fbc <__errno+0x8>)
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	2000003c 	.word	0x2000003c

08006fc0 <__libc_init_array>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4d0d      	ldr	r5, [pc, #52]	; (8006ff8 <__libc_init_array+0x38>)
 8006fc4:	4c0d      	ldr	r4, [pc, #52]	; (8006ffc <__libc_init_array+0x3c>)
 8006fc6:	1b64      	subs	r4, r4, r5
 8006fc8:	10a4      	asrs	r4, r4, #2
 8006fca:	2600      	movs	r6, #0
 8006fcc:	42a6      	cmp	r6, r4
 8006fce:	d109      	bne.n	8006fe4 <__libc_init_array+0x24>
 8006fd0:	4d0b      	ldr	r5, [pc, #44]	; (8007000 <__libc_init_array+0x40>)
 8006fd2:	4c0c      	ldr	r4, [pc, #48]	; (8007004 <__libc_init_array+0x44>)
 8006fd4:	f002 fe24 	bl	8009c20 <_init>
 8006fd8:	1b64      	subs	r4, r4, r5
 8006fda:	10a4      	asrs	r4, r4, #2
 8006fdc:	2600      	movs	r6, #0
 8006fde:	42a6      	cmp	r6, r4
 8006fe0:	d105      	bne.n	8006fee <__libc_init_array+0x2e>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe8:	4798      	blx	r3
 8006fea:	3601      	adds	r6, #1
 8006fec:	e7ee      	b.n	8006fcc <__libc_init_array+0xc>
 8006fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff2:	4798      	blx	r3
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	e7f2      	b.n	8006fde <__libc_init_array+0x1e>
 8006ff8:	0800a324 	.word	0x0800a324
 8006ffc:	0800a324 	.word	0x0800a324
 8007000:	0800a324 	.word	0x0800a324
 8007004:	0800a328 	.word	0x0800a328

08007008 <memset>:
 8007008:	4402      	add	r2, r0
 800700a:	4603      	mov	r3, r0
 800700c:	4293      	cmp	r3, r2
 800700e:	d100      	bne.n	8007012 <memset+0xa>
 8007010:	4770      	bx	lr
 8007012:	f803 1b01 	strb.w	r1, [r3], #1
 8007016:	e7f9      	b.n	800700c <memset+0x4>

08007018 <__cvt>:
 8007018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800701a:	ed2d 8b02 	vpush	{d8}
 800701e:	eeb0 8b40 	vmov.f64	d8, d0
 8007022:	b085      	sub	sp, #20
 8007024:	4617      	mov	r7, r2
 8007026:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007028:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800702a:	ee18 2a90 	vmov	r2, s17
 800702e:	f025 0520 	bic.w	r5, r5, #32
 8007032:	2a00      	cmp	r2, #0
 8007034:	bfb6      	itet	lt
 8007036:	222d      	movlt	r2, #45	; 0x2d
 8007038:	2200      	movge	r2, #0
 800703a:	eeb1 8b40 	vneglt.f64	d8, d0
 800703e:	2d46      	cmp	r5, #70	; 0x46
 8007040:	460c      	mov	r4, r1
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	d004      	beq.n	8007050 <__cvt+0x38>
 8007046:	2d45      	cmp	r5, #69	; 0x45
 8007048:	d100      	bne.n	800704c <__cvt+0x34>
 800704a:	3401      	adds	r4, #1
 800704c:	2102      	movs	r1, #2
 800704e:	e000      	b.n	8007052 <__cvt+0x3a>
 8007050:	2103      	movs	r1, #3
 8007052:	ab03      	add	r3, sp, #12
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	ab02      	add	r3, sp, #8
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4622      	mov	r2, r4
 800705c:	4633      	mov	r3, r6
 800705e:	eeb0 0b48 	vmov.f64	d0, d8
 8007062:	f000 fcc9 	bl	80079f8 <_dtoa_r>
 8007066:	2d47      	cmp	r5, #71	; 0x47
 8007068:	d109      	bne.n	800707e <__cvt+0x66>
 800706a:	07fb      	lsls	r3, r7, #31
 800706c:	d407      	bmi.n	800707e <__cvt+0x66>
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007072:	1a1b      	subs	r3, r3, r0
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	b005      	add	sp, #20
 8007078:	ecbd 8b02 	vpop	{d8}
 800707c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707e:	2d46      	cmp	r5, #70	; 0x46
 8007080:	eb00 0204 	add.w	r2, r0, r4
 8007084:	d10c      	bne.n	80070a0 <__cvt+0x88>
 8007086:	7803      	ldrb	r3, [r0, #0]
 8007088:	2b30      	cmp	r3, #48	; 0x30
 800708a:	d107      	bne.n	800709c <__cvt+0x84>
 800708c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007094:	bf1c      	itt	ne
 8007096:	f1c4 0401 	rsbne	r4, r4, #1
 800709a:	6034      	strne	r4, [r6, #0]
 800709c:	6833      	ldr	r3, [r6, #0]
 800709e:	441a      	add	r2, r3
 80070a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80070a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a8:	bf08      	it	eq
 80070aa:	9203      	streq	r2, [sp, #12]
 80070ac:	2130      	movs	r1, #48	; 0x30
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d2dc      	bcs.n	800706e <__cvt+0x56>
 80070b4:	1c5c      	adds	r4, r3, #1
 80070b6:	9403      	str	r4, [sp, #12]
 80070b8:	7019      	strb	r1, [r3, #0]
 80070ba:	e7f8      	b.n	80070ae <__cvt+0x96>

080070bc <__exponent>:
 80070bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070be:	4603      	mov	r3, r0
 80070c0:	2900      	cmp	r1, #0
 80070c2:	bfb8      	it	lt
 80070c4:	4249      	neglt	r1, r1
 80070c6:	f803 2b02 	strb.w	r2, [r3], #2
 80070ca:	bfb4      	ite	lt
 80070cc:	222d      	movlt	r2, #45	; 0x2d
 80070ce:	222b      	movge	r2, #43	; 0x2b
 80070d0:	2909      	cmp	r1, #9
 80070d2:	7042      	strb	r2, [r0, #1]
 80070d4:	dd2a      	ble.n	800712c <__exponent+0x70>
 80070d6:	f10d 0407 	add.w	r4, sp, #7
 80070da:	46a4      	mov	ip, r4
 80070dc:	270a      	movs	r7, #10
 80070de:	46a6      	mov	lr, r4
 80070e0:	460a      	mov	r2, r1
 80070e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80070e6:	fb07 1516 	mls	r5, r7, r6, r1
 80070ea:	3530      	adds	r5, #48	; 0x30
 80070ec:	2a63      	cmp	r2, #99	; 0x63
 80070ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80070f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070f6:	4631      	mov	r1, r6
 80070f8:	dcf1      	bgt.n	80070de <__exponent+0x22>
 80070fa:	3130      	adds	r1, #48	; 0x30
 80070fc:	f1ae 0502 	sub.w	r5, lr, #2
 8007100:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007104:	1c44      	adds	r4, r0, #1
 8007106:	4629      	mov	r1, r5
 8007108:	4561      	cmp	r1, ip
 800710a:	d30a      	bcc.n	8007122 <__exponent+0x66>
 800710c:	f10d 0209 	add.w	r2, sp, #9
 8007110:	eba2 020e 	sub.w	r2, r2, lr
 8007114:	4565      	cmp	r5, ip
 8007116:	bf88      	it	hi
 8007118:	2200      	movhi	r2, #0
 800711a:	4413      	add	r3, r2
 800711c:	1a18      	subs	r0, r3, r0
 800711e:	b003      	add	sp, #12
 8007120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800712a:	e7ed      	b.n	8007108 <__exponent+0x4c>
 800712c:	2330      	movs	r3, #48	; 0x30
 800712e:	3130      	adds	r1, #48	; 0x30
 8007130:	7083      	strb	r3, [r0, #2]
 8007132:	70c1      	strb	r1, [r0, #3]
 8007134:	1d03      	adds	r3, r0, #4
 8007136:	e7f1      	b.n	800711c <__exponent+0x60>

08007138 <_printf_float>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	b08b      	sub	sp, #44	; 0x2c
 800713e:	460c      	mov	r4, r1
 8007140:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007144:	4616      	mov	r6, r2
 8007146:	461f      	mov	r7, r3
 8007148:	4605      	mov	r5, r0
 800714a:	f001 f9d7 	bl	80084fc <_localeconv_r>
 800714e:	f8d0 b000 	ldr.w	fp, [r0]
 8007152:	4658      	mov	r0, fp
 8007154:	f7f9 f874 	bl	8000240 <strlen>
 8007158:	2300      	movs	r3, #0
 800715a:	9308      	str	r3, [sp, #32]
 800715c:	f8d8 3000 	ldr.w	r3, [r8]
 8007160:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	3307      	adds	r3, #7
 8007168:	f023 0307 	bic.w	r3, r3, #7
 800716c:	f103 0108 	add.w	r1, r3, #8
 8007170:	f8c8 1000 	str.w	r1, [r8]
 8007174:	4682      	mov	sl, r0
 8007176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800717a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800717e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80073e0 <_printf_float+0x2a8>
 8007182:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007186:	eeb0 6bc0 	vabs.f64	d6, d0
 800718a:	eeb4 6b47 	vcmp.f64	d6, d7
 800718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007192:	dd24      	ble.n	80071de <_printf_float+0xa6>
 8007194:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719c:	d502      	bpl.n	80071a4 <_printf_float+0x6c>
 800719e:	232d      	movs	r3, #45	; 0x2d
 80071a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a4:	4b90      	ldr	r3, [pc, #576]	; (80073e8 <_printf_float+0x2b0>)
 80071a6:	4891      	ldr	r0, [pc, #580]	; (80073ec <_printf_float+0x2b4>)
 80071a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80071ac:	bf94      	ite	ls
 80071ae:	4698      	movls	r8, r3
 80071b0:	4680      	movhi	r8, r0
 80071b2:	2303      	movs	r3, #3
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	f022 0204 	bic.w	r2, r2, #4
 80071ba:	2300      	movs	r3, #0
 80071bc:	6022      	str	r2, [r4, #0]
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	9700      	str	r7, [sp, #0]
 80071c2:	4633      	mov	r3, r6
 80071c4:	aa09      	add	r2, sp, #36	; 0x24
 80071c6:	4621      	mov	r1, r4
 80071c8:	4628      	mov	r0, r5
 80071ca:	f000 f9d3 	bl	8007574 <_printf_common>
 80071ce:	3001      	adds	r0, #1
 80071d0:	f040 808a 	bne.w	80072e8 <_printf_float+0x1b0>
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295
 80071d8:	b00b      	add	sp, #44	; 0x2c
 80071da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071de:	eeb4 0b40 	vcmp.f64	d0, d0
 80071e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e6:	d709      	bvc.n	80071fc <_printf_float+0xc4>
 80071e8:	ee10 3a90 	vmov	r3, s1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bfbc      	itt	lt
 80071f0:	232d      	movlt	r3, #45	; 0x2d
 80071f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071f6:	487e      	ldr	r0, [pc, #504]	; (80073f0 <_printf_float+0x2b8>)
 80071f8:	4b7e      	ldr	r3, [pc, #504]	; (80073f4 <_printf_float+0x2bc>)
 80071fa:	e7d5      	b.n	80071a8 <_printf_float+0x70>
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007202:	9104      	str	r1, [sp, #16]
 8007204:	1c59      	adds	r1, r3, #1
 8007206:	d13c      	bne.n	8007282 <_printf_float+0x14a>
 8007208:	2306      	movs	r3, #6
 800720a:	6063      	str	r3, [r4, #4]
 800720c:	2300      	movs	r3, #0
 800720e:	9303      	str	r3, [sp, #12]
 8007210:	ab08      	add	r3, sp, #32
 8007212:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800721a:	ab07      	add	r3, sp, #28
 800721c:	6861      	ldr	r1, [r4, #4]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	6022      	str	r2, [r4, #0]
 8007222:	f10d 031b 	add.w	r3, sp, #27
 8007226:	4628      	mov	r0, r5
 8007228:	f7ff fef6 	bl	8007018 <__cvt>
 800722c:	9b04      	ldr	r3, [sp, #16]
 800722e:	9907      	ldr	r1, [sp, #28]
 8007230:	2b47      	cmp	r3, #71	; 0x47
 8007232:	4680      	mov	r8, r0
 8007234:	d108      	bne.n	8007248 <_printf_float+0x110>
 8007236:	1cc8      	adds	r0, r1, #3
 8007238:	db02      	blt.n	8007240 <_printf_float+0x108>
 800723a:	6863      	ldr	r3, [r4, #4]
 800723c:	4299      	cmp	r1, r3
 800723e:	dd41      	ble.n	80072c4 <_printf_float+0x18c>
 8007240:	f1a9 0902 	sub.w	r9, r9, #2
 8007244:	fa5f f989 	uxtb.w	r9, r9
 8007248:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800724c:	d820      	bhi.n	8007290 <_printf_float+0x158>
 800724e:	3901      	subs	r1, #1
 8007250:	464a      	mov	r2, r9
 8007252:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007256:	9107      	str	r1, [sp, #28]
 8007258:	f7ff ff30 	bl	80070bc <__exponent>
 800725c:	9a08      	ldr	r2, [sp, #32]
 800725e:	9004      	str	r0, [sp, #16]
 8007260:	1813      	adds	r3, r2, r0
 8007262:	2a01      	cmp	r2, #1
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	dc02      	bgt.n	800726e <_printf_float+0x136>
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	07d2      	lsls	r2, r2, #31
 800726c:	d501      	bpl.n	8007272 <_printf_float+0x13a>
 800726e:	3301      	adds	r3, #1
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0a2      	beq.n	80071c0 <_printf_float+0x88>
 800727a:	232d      	movs	r3, #45	; 0x2d
 800727c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007280:	e79e      	b.n	80071c0 <_printf_float+0x88>
 8007282:	9904      	ldr	r1, [sp, #16]
 8007284:	2947      	cmp	r1, #71	; 0x47
 8007286:	d1c1      	bne.n	800720c <_printf_float+0xd4>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1bf      	bne.n	800720c <_printf_float+0xd4>
 800728c:	2301      	movs	r3, #1
 800728e:	e7bc      	b.n	800720a <_printf_float+0xd2>
 8007290:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007294:	d118      	bne.n	80072c8 <_printf_float+0x190>
 8007296:	2900      	cmp	r1, #0
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	dd0b      	ble.n	80072b4 <_printf_float+0x17c>
 800729c:	6121      	str	r1, [r4, #16]
 800729e:	b913      	cbnz	r3, 80072a6 <_printf_float+0x16e>
 80072a0:	6822      	ldr	r2, [r4, #0]
 80072a2:	07d0      	lsls	r0, r2, #31
 80072a4:	d502      	bpl.n	80072ac <_printf_float+0x174>
 80072a6:	3301      	adds	r3, #1
 80072a8:	440b      	add	r3, r1
 80072aa:	6123      	str	r3, [r4, #16]
 80072ac:	2300      	movs	r3, #0
 80072ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	e7de      	b.n	8007272 <_printf_float+0x13a>
 80072b4:	b913      	cbnz	r3, 80072bc <_printf_float+0x184>
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	07d2      	lsls	r2, r2, #31
 80072ba:	d501      	bpl.n	80072c0 <_printf_float+0x188>
 80072bc:	3302      	adds	r3, #2
 80072be:	e7f4      	b.n	80072aa <_printf_float+0x172>
 80072c0:	2301      	movs	r3, #1
 80072c2:	e7f2      	b.n	80072aa <_printf_float+0x172>
 80072c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80072c8:	9b08      	ldr	r3, [sp, #32]
 80072ca:	4299      	cmp	r1, r3
 80072cc:	db05      	blt.n	80072da <_printf_float+0x1a2>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	6121      	str	r1, [r4, #16]
 80072d2:	07d8      	lsls	r0, r3, #31
 80072d4:	d5ea      	bpl.n	80072ac <_printf_float+0x174>
 80072d6:	1c4b      	adds	r3, r1, #1
 80072d8:	e7e7      	b.n	80072aa <_printf_float+0x172>
 80072da:	2900      	cmp	r1, #0
 80072dc:	bfd4      	ite	le
 80072de:	f1c1 0202 	rsble	r2, r1, #2
 80072e2:	2201      	movgt	r2, #1
 80072e4:	4413      	add	r3, r2
 80072e6:	e7e0      	b.n	80072aa <_printf_float+0x172>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	055a      	lsls	r2, r3, #21
 80072ec:	d407      	bmi.n	80072fe <_printf_float+0x1c6>
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	4642      	mov	r2, r8
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	d12a      	bne.n	8007352 <_printf_float+0x21a>
 80072fc:	e76a      	b.n	80071d4 <_printf_float+0x9c>
 80072fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007302:	f240 80e2 	bls.w	80074ca <_printf_float+0x392>
 8007306:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800730a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800730e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007312:	d133      	bne.n	800737c <_printf_float+0x244>
 8007314:	4a38      	ldr	r2, [pc, #224]	; (80073f8 <_printf_float+0x2c0>)
 8007316:	2301      	movs	r3, #1
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f af58 	beq.w	80071d4 <_printf_float+0x9c>
 8007324:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007328:	429a      	cmp	r2, r3
 800732a:	db02      	blt.n	8007332 <_printf_float+0x1fa>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	07d8      	lsls	r0, r3, #31
 8007330:	d50f      	bpl.n	8007352 <_printf_float+0x21a>
 8007332:	4653      	mov	r3, sl
 8007334:	465a      	mov	r2, fp
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f af49 	beq.w	80071d4 <_printf_float+0x9c>
 8007342:	f04f 0800 	mov.w	r8, #0
 8007346:	f104 091a 	add.w	r9, r4, #26
 800734a:	9b08      	ldr	r3, [sp, #32]
 800734c:	3b01      	subs	r3, #1
 800734e:	4543      	cmp	r3, r8
 8007350:	dc09      	bgt.n	8007366 <_printf_float+0x22e>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	079b      	lsls	r3, r3, #30
 8007356:	f100 8108 	bmi.w	800756a <_printf_float+0x432>
 800735a:	68e0      	ldr	r0, [r4, #12]
 800735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735e:	4298      	cmp	r0, r3
 8007360:	bfb8      	it	lt
 8007362:	4618      	movlt	r0, r3
 8007364:	e738      	b.n	80071d8 <_printf_float+0xa0>
 8007366:	2301      	movs	r3, #1
 8007368:	464a      	mov	r2, r9
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f af2f 	beq.w	80071d4 <_printf_float+0x9c>
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	e7e6      	b.n	800734a <_printf_float+0x212>
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dc3c      	bgt.n	80073fc <_printf_float+0x2c4>
 8007382:	4a1d      	ldr	r2, [pc, #116]	; (80073f8 <_printf_float+0x2c0>)
 8007384:	2301      	movs	r3, #1
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	f43f af21 	beq.w	80071d4 <_printf_float+0x9c>
 8007392:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007396:	4313      	orrs	r3, r2
 8007398:	d102      	bne.n	80073a0 <_printf_float+0x268>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	07d9      	lsls	r1, r3, #31
 800739e:	d5d8      	bpl.n	8007352 <_printf_float+0x21a>
 80073a0:	4653      	mov	r3, sl
 80073a2:	465a      	mov	r2, fp
 80073a4:	4631      	mov	r1, r6
 80073a6:	4628      	mov	r0, r5
 80073a8:	47b8      	blx	r7
 80073aa:	3001      	adds	r0, #1
 80073ac:	f43f af12 	beq.w	80071d4 <_printf_float+0x9c>
 80073b0:	f04f 0900 	mov.w	r9, #0
 80073b4:	f104 0a1a 	add.w	sl, r4, #26
 80073b8:	9b07      	ldr	r3, [sp, #28]
 80073ba:	425b      	negs	r3, r3
 80073bc:	454b      	cmp	r3, r9
 80073be:	dc01      	bgt.n	80073c4 <_printf_float+0x28c>
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	e795      	b.n	80072f0 <_printf_float+0x1b8>
 80073c4:	2301      	movs	r3, #1
 80073c6:	4652      	mov	r2, sl
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	f43f af00 	beq.w	80071d4 <_printf_float+0x9c>
 80073d4:	f109 0901 	add.w	r9, r9, #1
 80073d8:	e7ee      	b.n	80073b8 <_printf_float+0x280>
 80073da:	bf00      	nop
 80073dc:	f3af 8000 	nop.w
 80073e0:	ffffffff 	.word	0xffffffff
 80073e4:	7fefffff 	.word	0x7fefffff
 80073e8:	08009f40 	.word	0x08009f40
 80073ec:	08009f44 	.word	0x08009f44
 80073f0:	08009f4c 	.word	0x08009f4c
 80073f4:	08009f48 	.word	0x08009f48
 80073f8:	08009f50 	.word	0x08009f50
 80073fc:	9a08      	ldr	r2, [sp, #32]
 80073fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007400:	429a      	cmp	r2, r3
 8007402:	bfa8      	it	ge
 8007404:	461a      	movge	r2, r3
 8007406:	2a00      	cmp	r2, #0
 8007408:	4691      	mov	r9, r2
 800740a:	dc38      	bgt.n	800747e <_printf_float+0x346>
 800740c:	2300      	movs	r3, #0
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007414:	f104 021a 	add.w	r2, r4, #26
 8007418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800741a:	9905      	ldr	r1, [sp, #20]
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	eba3 0309 	sub.w	r3, r3, r9
 8007422:	428b      	cmp	r3, r1
 8007424:	dc33      	bgt.n	800748e <_printf_float+0x356>
 8007426:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800742a:	429a      	cmp	r2, r3
 800742c:	db3c      	blt.n	80074a8 <_printf_float+0x370>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	07da      	lsls	r2, r3, #31
 8007432:	d439      	bmi.n	80074a8 <_printf_float+0x370>
 8007434:	9a08      	ldr	r2, [sp, #32]
 8007436:	9b04      	ldr	r3, [sp, #16]
 8007438:	9907      	ldr	r1, [sp, #28]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	eba2 0901 	sub.w	r9, r2, r1
 8007440:	4599      	cmp	r9, r3
 8007442:	bfa8      	it	ge
 8007444:	4699      	movge	r9, r3
 8007446:	f1b9 0f00 	cmp.w	r9, #0
 800744a:	dc35      	bgt.n	80074b8 <_printf_float+0x380>
 800744c:	f04f 0800 	mov.w	r8, #0
 8007450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007454:	f104 0a1a 	add.w	sl, r4, #26
 8007458:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800745c:	1a9b      	subs	r3, r3, r2
 800745e:	eba3 0309 	sub.w	r3, r3, r9
 8007462:	4543      	cmp	r3, r8
 8007464:	f77f af75 	ble.w	8007352 <_printf_float+0x21a>
 8007468:	2301      	movs	r3, #1
 800746a:	4652      	mov	r2, sl
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f aeae 	beq.w	80071d4 <_printf_float+0x9c>
 8007478:	f108 0801 	add.w	r8, r8, #1
 800747c:	e7ec      	b.n	8007458 <_printf_float+0x320>
 800747e:	4613      	mov	r3, r2
 8007480:	4631      	mov	r1, r6
 8007482:	4642      	mov	r2, r8
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d1bf      	bne.n	800740c <_printf_float+0x2d4>
 800748c:	e6a2      	b.n	80071d4 <_printf_float+0x9c>
 800748e:	2301      	movs	r3, #1
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	9204      	str	r2, [sp, #16]
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f ae9b 	beq.w	80071d4 <_printf_float+0x9c>
 800749e:	9b05      	ldr	r3, [sp, #20]
 80074a0:	9a04      	ldr	r2, [sp, #16]
 80074a2:	3301      	adds	r3, #1
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	e7b7      	b.n	8007418 <_printf_float+0x2e0>
 80074a8:	4653      	mov	r3, sl
 80074aa:	465a      	mov	r2, fp
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	d1be      	bne.n	8007434 <_printf_float+0x2fc>
 80074b6:	e68d      	b.n	80071d4 <_printf_float+0x9c>
 80074b8:	9a04      	ldr	r2, [sp, #16]
 80074ba:	464b      	mov	r3, r9
 80074bc:	4442      	add	r2, r8
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	d1c1      	bne.n	800744c <_printf_float+0x314>
 80074c8:	e684      	b.n	80071d4 <_printf_float+0x9c>
 80074ca:	9a08      	ldr	r2, [sp, #32]
 80074cc:	2a01      	cmp	r2, #1
 80074ce:	dc01      	bgt.n	80074d4 <_printf_float+0x39c>
 80074d0:	07db      	lsls	r3, r3, #31
 80074d2:	d537      	bpl.n	8007544 <_printf_float+0x40c>
 80074d4:	2301      	movs	r3, #1
 80074d6:	4642      	mov	r2, r8
 80074d8:	4631      	mov	r1, r6
 80074da:	4628      	mov	r0, r5
 80074dc:	47b8      	blx	r7
 80074de:	3001      	adds	r0, #1
 80074e0:	f43f ae78 	beq.w	80071d4 <_printf_float+0x9c>
 80074e4:	4653      	mov	r3, sl
 80074e6:	465a      	mov	r2, fp
 80074e8:	4631      	mov	r1, r6
 80074ea:	4628      	mov	r0, r5
 80074ec:	47b8      	blx	r7
 80074ee:	3001      	adds	r0, #1
 80074f0:	f43f ae70 	beq.w	80071d4 <_printf_float+0x9c>
 80074f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80074f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007500:	d01b      	beq.n	800753a <_printf_float+0x402>
 8007502:	9b08      	ldr	r3, [sp, #32]
 8007504:	f108 0201 	add.w	r2, r8, #1
 8007508:	3b01      	subs	r3, #1
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	d10e      	bne.n	8007532 <_printf_float+0x3fa>
 8007514:	e65e      	b.n	80071d4 <_printf_float+0x9c>
 8007516:	2301      	movs	r3, #1
 8007518:	464a      	mov	r2, r9
 800751a:	4631      	mov	r1, r6
 800751c:	4628      	mov	r0, r5
 800751e:	47b8      	blx	r7
 8007520:	3001      	adds	r0, #1
 8007522:	f43f ae57 	beq.w	80071d4 <_printf_float+0x9c>
 8007526:	f108 0801 	add.w	r8, r8, #1
 800752a:	9b08      	ldr	r3, [sp, #32]
 800752c:	3b01      	subs	r3, #1
 800752e:	4543      	cmp	r3, r8
 8007530:	dcf1      	bgt.n	8007516 <_printf_float+0x3de>
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007538:	e6db      	b.n	80072f2 <_printf_float+0x1ba>
 800753a:	f04f 0800 	mov.w	r8, #0
 800753e:	f104 091a 	add.w	r9, r4, #26
 8007542:	e7f2      	b.n	800752a <_printf_float+0x3f2>
 8007544:	2301      	movs	r3, #1
 8007546:	4642      	mov	r2, r8
 8007548:	e7df      	b.n	800750a <_printf_float+0x3d2>
 800754a:	2301      	movs	r3, #1
 800754c:	464a      	mov	r2, r9
 800754e:	4631      	mov	r1, r6
 8007550:	4628      	mov	r0, r5
 8007552:	47b8      	blx	r7
 8007554:	3001      	adds	r0, #1
 8007556:	f43f ae3d 	beq.w	80071d4 <_printf_float+0x9c>
 800755a:	f108 0801 	add.w	r8, r8, #1
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007562:	1a5b      	subs	r3, r3, r1
 8007564:	4543      	cmp	r3, r8
 8007566:	dcf0      	bgt.n	800754a <_printf_float+0x412>
 8007568:	e6f7      	b.n	800735a <_printf_float+0x222>
 800756a:	f04f 0800 	mov.w	r8, #0
 800756e:	f104 0919 	add.w	r9, r4, #25
 8007572:	e7f4      	b.n	800755e <_printf_float+0x426>

08007574 <_printf_common>:
 8007574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	4616      	mov	r6, r2
 800757a:	4699      	mov	r9, r3
 800757c:	688a      	ldr	r2, [r1, #8]
 800757e:	690b      	ldr	r3, [r1, #16]
 8007580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007584:	4293      	cmp	r3, r2
 8007586:	bfb8      	it	lt
 8007588:	4613      	movlt	r3, r2
 800758a:	6033      	str	r3, [r6, #0]
 800758c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007590:	4607      	mov	r7, r0
 8007592:	460c      	mov	r4, r1
 8007594:	b10a      	cbz	r2, 800759a <_printf_common+0x26>
 8007596:	3301      	adds	r3, #1
 8007598:	6033      	str	r3, [r6, #0]
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	0699      	lsls	r1, r3, #26
 800759e:	bf42      	ittt	mi
 80075a0:	6833      	ldrmi	r3, [r6, #0]
 80075a2:	3302      	addmi	r3, #2
 80075a4:	6033      	strmi	r3, [r6, #0]
 80075a6:	6825      	ldr	r5, [r4, #0]
 80075a8:	f015 0506 	ands.w	r5, r5, #6
 80075ac:	d106      	bne.n	80075bc <_printf_common+0x48>
 80075ae:	f104 0a19 	add.w	sl, r4, #25
 80075b2:	68e3      	ldr	r3, [r4, #12]
 80075b4:	6832      	ldr	r2, [r6, #0]
 80075b6:	1a9b      	subs	r3, r3, r2
 80075b8:	42ab      	cmp	r3, r5
 80075ba:	dc26      	bgt.n	800760a <_printf_common+0x96>
 80075bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075c0:	1e13      	subs	r3, r2, #0
 80075c2:	6822      	ldr	r2, [r4, #0]
 80075c4:	bf18      	it	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	0692      	lsls	r2, r2, #26
 80075ca:	d42b      	bmi.n	8007624 <_printf_common+0xb0>
 80075cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075d0:	4649      	mov	r1, r9
 80075d2:	4638      	mov	r0, r7
 80075d4:	47c0      	blx	r8
 80075d6:	3001      	adds	r0, #1
 80075d8:	d01e      	beq.n	8007618 <_printf_common+0xa4>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	68e5      	ldr	r5, [r4, #12]
 80075de:	6832      	ldr	r2, [r6, #0]
 80075e0:	f003 0306 	and.w	r3, r3, #6
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	bf08      	it	eq
 80075e8:	1aad      	subeq	r5, r5, r2
 80075ea:	68a3      	ldr	r3, [r4, #8]
 80075ec:	6922      	ldr	r2, [r4, #16]
 80075ee:	bf0c      	ite	eq
 80075f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f4:	2500      	movne	r5, #0
 80075f6:	4293      	cmp	r3, r2
 80075f8:	bfc4      	itt	gt
 80075fa:	1a9b      	subgt	r3, r3, r2
 80075fc:	18ed      	addgt	r5, r5, r3
 80075fe:	2600      	movs	r6, #0
 8007600:	341a      	adds	r4, #26
 8007602:	42b5      	cmp	r5, r6
 8007604:	d11a      	bne.n	800763c <_printf_common+0xc8>
 8007606:	2000      	movs	r0, #0
 8007608:	e008      	b.n	800761c <_printf_common+0xa8>
 800760a:	2301      	movs	r3, #1
 800760c:	4652      	mov	r2, sl
 800760e:	4649      	mov	r1, r9
 8007610:	4638      	mov	r0, r7
 8007612:	47c0      	blx	r8
 8007614:	3001      	adds	r0, #1
 8007616:	d103      	bne.n	8007620 <_printf_common+0xac>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007620:	3501      	adds	r5, #1
 8007622:	e7c6      	b.n	80075b2 <_printf_common+0x3e>
 8007624:	18e1      	adds	r1, r4, r3
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	2030      	movs	r0, #48	; 0x30
 800762a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800762e:	4422      	add	r2, r4
 8007630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007638:	3302      	adds	r3, #2
 800763a:	e7c7      	b.n	80075cc <_printf_common+0x58>
 800763c:	2301      	movs	r3, #1
 800763e:	4622      	mov	r2, r4
 8007640:	4649      	mov	r1, r9
 8007642:	4638      	mov	r0, r7
 8007644:	47c0      	blx	r8
 8007646:	3001      	adds	r0, #1
 8007648:	d0e6      	beq.n	8007618 <_printf_common+0xa4>
 800764a:	3601      	adds	r6, #1
 800764c:	e7d9      	b.n	8007602 <_printf_common+0x8e>
	...

08007650 <_printf_i>:
 8007650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	460c      	mov	r4, r1
 8007656:	4691      	mov	r9, r2
 8007658:	7e27      	ldrb	r7, [r4, #24]
 800765a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800765c:	2f78      	cmp	r7, #120	; 0x78
 800765e:	4680      	mov	r8, r0
 8007660:	469a      	mov	sl, r3
 8007662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007666:	d807      	bhi.n	8007678 <_printf_i+0x28>
 8007668:	2f62      	cmp	r7, #98	; 0x62
 800766a:	d80a      	bhi.n	8007682 <_printf_i+0x32>
 800766c:	2f00      	cmp	r7, #0
 800766e:	f000 80d8 	beq.w	8007822 <_printf_i+0x1d2>
 8007672:	2f58      	cmp	r7, #88	; 0x58
 8007674:	f000 80a3 	beq.w	80077be <_printf_i+0x16e>
 8007678:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800767c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007680:	e03a      	b.n	80076f8 <_printf_i+0xa8>
 8007682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007686:	2b15      	cmp	r3, #21
 8007688:	d8f6      	bhi.n	8007678 <_printf_i+0x28>
 800768a:	a001      	add	r0, pc, #4	; (adr r0, 8007690 <_printf_i+0x40>)
 800768c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007690:	080076e9 	.word	0x080076e9
 8007694:	080076fd 	.word	0x080076fd
 8007698:	08007679 	.word	0x08007679
 800769c:	08007679 	.word	0x08007679
 80076a0:	08007679 	.word	0x08007679
 80076a4:	08007679 	.word	0x08007679
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007679 	.word	0x08007679
 80076b0:	08007679 	.word	0x08007679
 80076b4:	08007679 	.word	0x08007679
 80076b8:	08007679 	.word	0x08007679
 80076bc:	08007809 	.word	0x08007809
 80076c0:	0800772d 	.word	0x0800772d
 80076c4:	080077eb 	.word	0x080077eb
 80076c8:	08007679 	.word	0x08007679
 80076cc:	08007679 	.word	0x08007679
 80076d0:	0800782b 	.word	0x0800782b
 80076d4:	08007679 	.word	0x08007679
 80076d8:	0800772d 	.word	0x0800772d
 80076dc:	08007679 	.word	0x08007679
 80076e0:	08007679 	.word	0x08007679
 80076e4:	080077f3 	.word	0x080077f3
 80076e8:	680b      	ldr	r3, [r1, #0]
 80076ea:	1d1a      	adds	r2, r3, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	600a      	str	r2, [r1, #0]
 80076f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0a3      	b.n	8007844 <_printf_i+0x1f4>
 80076fc:	6825      	ldr	r5, [r4, #0]
 80076fe:	6808      	ldr	r0, [r1, #0]
 8007700:	062e      	lsls	r6, r5, #24
 8007702:	f100 0304 	add.w	r3, r0, #4
 8007706:	d50a      	bpl.n	800771e <_printf_i+0xce>
 8007708:	6805      	ldr	r5, [r0, #0]
 800770a:	600b      	str	r3, [r1, #0]
 800770c:	2d00      	cmp	r5, #0
 800770e:	da03      	bge.n	8007718 <_printf_i+0xc8>
 8007710:	232d      	movs	r3, #45	; 0x2d
 8007712:	426d      	negs	r5, r5
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007718:	485e      	ldr	r0, [pc, #376]	; (8007894 <_printf_i+0x244>)
 800771a:	230a      	movs	r3, #10
 800771c:	e019      	b.n	8007752 <_printf_i+0x102>
 800771e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007722:	6805      	ldr	r5, [r0, #0]
 8007724:	600b      	str	r3, [r1, #0]
 8007726:	bf18      	it	ne
 8007728:	b22d      	sxthne	r5, r5
 800772a:	e7ef      	b.n	800770c <_printf_i+0xbc>
 800772c:	680b      	ldr	r3, [r1, #0]
 800772e:	6825      	ldr	r5, [r4, #0]
 8007730:	1d18      	adds	r0, r3, #4
 8007732:	6008      	str	r0, [r1, #0]
 8007734:	0628      	lsls	r0, r5, #24
 8007736:	d501      	bpl.n	800773c <_printf_i+0xec>
 8007738:	681d      	ldr	r5, [r3, #0]
 800773a:	e002      	b.n	8007742 <_printf_i+0xf2>
 800773c:	0669      	lsls	r1, r5, #25
 800773e:	d5fb      	bpl.n	8007738 <_printf_i+0xe8>
 8007740:	881d      	ldrh	r5, [r3, #0]
 8007742:	4854      	ldr	r0, [pc, #336]	; (8007894 <_printf_i+0x244>)
 8007744:	2f6f      	cmp	r7, #111	; 0x6f
 8007746:	bf0c      	ite	eq
 8007748:	2308      	moveq	r3, #8
 800774a:	230a      	movne	r3, #10
 800774c:	2100      	movs	r1, #0
 800774e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007752:	6866      	ldr	r6, [r4, #4]
 8007754:	60a6      	str	r6, [r4, #8]
 8007756:	2e00      	cmp	r6, #0
 8007758:	bfa2      	ittt	ge
 800775a:	6821      	ldrge	r1, [r4, #0]
 800775c:	f021 0104 	bicge.w	r1, r1, #4
 8007760:	6021      	strge	r1, [r4, #0]
 8007762:	b90d      	cbnz	r5, 8007768 <_printf_i+0x118>
 8007764:	2e00      	cmp	r6, #0
 8007766:	d04d      	beq.n	8007804 <_printf_i+0x1b4>
 8007768:	4616      	mov	r6, r2
 800776a:	fbb5 f1f3 	udiv	r1, r5, r3
 800776e:	fb03 5711 	mls	r7, r3, r1, r5
 8007772:	5dc7      	ldrb	r7, [r0, r7]
 8007774:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007778:	462f      	mov	r7, r5
 800777a:	42bb      	cmp	r3, r7
 800777c:	460d      	mov	r5, r1
 800777e:	d9f4      	bls.n	800776a <_printf_i+0x11a>
 8007780:	2b08      	cmp	r3, #8
 8007782:	d10b      	bne.n	800779c <_printf_i+0x14c>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	07df      	lsls	r7, r3, #31
 8007788:	d508      	bpl.n	800779c <_printf_i+0x14c>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	6861      	ldr	r1, [r4, #4]
 800778e:	4299      	cmp	r1, r3
 8007790:	bfde      	ittt	le
 8007792:	2330      	movle	r3, #48	; 0x30
 8007794:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007798:	f106 36ff 	addle.w	r6, r6, #4294967295
 800779c:	1b92      	subs	r2, r2, r6
 800779e:	6122      	str	r2, [r4, #16]
 80077a0:	f8cd a000 	str.w	sl, [sp]
 80077a4:	464b      	mov	r3, r9
 80077a6:	aa03      	add	r2, sp, #12
 80077a8:	4621      	mov	r1, r4
 80077aa:	4640      	mov	r0, r8
 80077ac:	f7ff fee2 	bl	8007574 <_printf_common>
 80077b0:	3001      	adds	r0, #1
 80077b2:	d14c      	bne.n	800784e <_printf_i+0x1fe>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	b004      	add	sp, #16
 80077ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077be:	4835      	ldr	r0, [pc, #212]	; (8007894 <_printf_i+0x244>)
 80077c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	680e      	ldr	r6, [r1, #0]
 80077c8:	061f      	lsls	r7, r3, #24
 80077ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80077ce:	600e      	str	r6, [r1, #0]
 80077d0:	d514      	bpl.n	80077fc <_printf_i+0x1ac>
 80077d2:	07d9      	lsls	r1, r3, #31
 80077d4:	bf44      	itt	mi
 80077d6:	f043 0320 	orrmi.w	r3, r3, #32
 80077da:	6023      	strmi	r3, [r4, #0]
 80077dc:	b91d      	cbnz	r5, 80077e6 <_printf_i+0x196>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f023 0320 	bic.w	r3, r3, #32
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	2310      	movs	r3, #16
 80077e8:	e7b0      	b.n	800774c <_printf_i+0xfc>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f043 0320 	orr.w	r3, r3, #32
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	2378      	movs	r3, #120	; 0x78
 80077f4:	4828      	ldr	r0, [pc, #160]	; (8007898 <_printf_i+0x248>)
 80077f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077fa:	e7e3      	b.n	80077c4 <_printf_i+0x174>
 80077fc:	065e      	lsls	r6, r3, #25
 80077fe:	bf48      	it	mi
 8007800:	b2ad      	uxthmi	r5, r5
 8007802:	e7e6      	b.n	80077d2 <_printf_i+0x182>
 8007804:	4616      	mov	r6, r2
 8007806:	e7bb      	b.n	8007780 <_printf_i+0x130>
 8007808:	680b      	ldr	r3, [r1, #0]
 800780a:	6826      	ldr	r6, [r4, #0]
 800780c:	6960      	ldr	r0, [r4, #20]
 800780e:	1d1d      	adds	r5, r3, #4
 8007810:	600d      	str	r5, [r1, #0]
 8007812:	0635      	lsls	r5, r6, #24
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	d501      	bpl.n	800781c <_printf_i+0x1cc>
 8007818:	6018      	str	r0, [r3, #0]
 800781a:	e002      	b.n	8007822 <_printf_i+0x1d2>
 800781c:	0671      	lsls	r1, r6, #25
 800781e:	d5fb      	bpl.n	8007818 <_printf_i+0x1c8>
 8007820:	8018      	strh	r0, [r3, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	6123      	str	r3, [r4, #16]
 8007826:	4616      	mov	r6, r2
 8007828:	e7ba      	b.n	80077a0 <_printf_i+0x150>
 800782a:	680b      	ldr	r3, [r1, #0]
 800782c:	1d1a      	adds	r2, r3, #4
 800782e:	600a      	str	r2, [r1, #0]
 8007830:	681e      	ldr	r6, [r3, #0]
 8007832:	6862      	ldr	r2, [r4, #4]
 8007834:	2100      	movs	r1, #0
 8007836:	4630      	mov	r0, r6
 8007838:	f7f8 fd0a 	bl	8000250 <memchr>
 800783c:	b108      	cbz	r0, 8007842 <_printf_i+0x1f2>
 800783e:	1b80      	subs	r0, r0, r6
 8007840:	6060      	str	r0, [r4, #4]
 8007842:	6863      	ldr	r3, [r4, #4]
 8007844:	6123      	str	r3, [r4, #16]
 8007846:	2300      	movs	r3, #0
 8007848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784c:	e7a8      	b.n	80077a0 <_printf_i+0x150>
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	4632      	mov	r2, r6
 8007852:	4649      	mov	r1, r9
 8007854:	4640      	mov	r0, r8
 8007856:	47d0      	blx	sl
 8007858:	3001      	adds	r0, #1
 800785a:	d0ab      	beq.n	80077b4 <_printf_i+0x164>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	079b      	lsls	r3, r3, #30
 8007860:	d413      	bmi.n	800788a <_printf_i+0x23a>
 8007862:	68e0      	ldr	r0, [r4, #12]
 8007864:	9b03      	ldr	r3, [sp, #12]
 8007866:	4298      	cmp	r0, r3
 8007868:	bfb8      	it	lt
 800786a:	4618      	movlt	r0, r3
 800786c:	e7a4      	b.n	80077b8 <_printf_i+0x168>
 800786e:	2301      	movs	r3, #1
 8007870:	4632      	mov	r2, r6
 8007872:	4649      	mov	r1, r9
 8007874:	4640      	mov	r0, r8
 8007876:	47d0      	blx	sl
 8007878:	3001      	adds	r0, #1
 800787a:	d09b      	beq.n	80077b4 <_printf_i+0x164>
 800787c:	3501      	adds	r5, #1
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	9903      	ldr	r1, [sp, #12]
 8007882:	1a5b      	subs	r3, r3, r1
 8007884:	42ab      	cmp	r3, r5
 8007886:	dcf2      	bgt.n	800786e <_printf_i+0x21e>
 8007888:	e7eb      	b.n	8007862 <_printf_i+0x212>
 800788a:	2500      	movs	r5, #0
 800788c:	f104 0619 	add.w	r6, r4, #25
 8007890:	e7f5      	b.n	800787e <_printf_i+0x22e>
 8007892:	bf00      	nop
 8007894:	08009f52 	.word	0x08009f52
 8007898:	08009f63 	.word	0x08009f63

0800789c <siprintf>:
 800789c:	b40e      	push	{r1, r2, r3}
 800789e:	b500      	push	{lr}
 80078a0:	b09c      	sub	sp, #112	; 0x70
 80078a2:	ab1d      	add	r3, sp, #116	; 0x74
 80078a4:	9002      	str	r0, [sp, #8]
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078ac:	4809      	ldr	r0, [pc, #36]	; (80078d4 <siprintf+0x38>)
 80078ae:	9107      	str	r1, [sp, #28]
 80078b0:	9104      	str	r1, [sp, #16]
 80078b2:	4909      	ldr	r1, [pc, #36]	; (80078d8 <siprintf+0x3c>)
 80078b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	a902      	add	r1, sp, #8
 80078c0:	f001 faca 	bl	8008e58 <_svfiprintf_r>
 80078c4:	9b02      	ldr	r3, [sp, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	b01c      	add	sp, #112	; 0x70
 80078cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d0:	b003      	add	sp, #12
 80078d2:	4770      	bx	lr
 80078d4:	2000003c 	.word	0x2000003c
 80078d8:	ffff0208 	.word	0xffff0208

080078dc <quorem>:
 80078dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	6903      	ldr	r3, [r0, #16]
 80078e2:	690c      	ldr	r4, [r1, #16]
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	4607      	mov	r7, r0
 80078e8:	f2c0 8081 	blt.w	80079ee <quorem+0x112>
 80078ec:	3c01      	subs	r4, #1
 80078ee:	f101 0814 	add.w	r8, r1, #20
 80078f2:	f100 0514 	add.w	r5, r0, #20
 80078f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007904:	3301      	adds	r3, #1
 8007906:	429a      	cmp	r2, r3
 8007908:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800790c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007910:	fbb2 f6f3 	udiv	r6, r2, r3
 8007914:	d331      	bcc.n	800797a <quorem+0x9e>
 8007916:	f04f 0e00 	mov.w	lr, #0
 800791a:	4640      	mov	r0, r8
 800791c:	46ac      	mov	ip, r5
 800791e:	46f2      	mov	sl, lr
 8007920:	f850 2b04 	ldr.w	r2, [r0], #4
 8007924:	b293      	uxth	r3, r2
 8007926:	fb06 e303 	mla	r3, r6, r3, lr
 800792a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800792e:	b29b      	uxth	r3, r3
 8007930:	ebaa 0303 	sub.w	r3, sl, r3
 8007934:	0c12      	lsrs	r2, r2, #16
 8007936:	f8dc a000 	ldr.w	sl, [ip]
 800793a:	fb06 e202 	mla	r2, r6, r2, lr
 800793e:	fa13 f38a 	uxtah	r3, r3, sl
 8007942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007946:	fa1f fa82 	uxth.w	sl, r2
 800794a:	f8dc 2000 	ldr.w	r2, [ip]
 800794e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007952:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007956:	b29b      	uxth	r3, r3
 8007958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800795c:	4581      	cmp	r9, r0
 800795e:	f84c 3b04 	str.w	r3, [ip], #4
 8007962:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007966:	d2db      	bcs.n	8007920 <quorem+0x44>
 8007968:	f855 300b 	ldr.w	r3, [r5, fp]
 800796c:	b92b      	cbnz	r3, 800797a <quorem+0x9e>
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	3b04      	subs	r3, #4
 8007972:	429d      	cmp	r5, r3
 8007974:	461a      	mov	r2, r3
 8007976:	d32e      	bcc.n	80079d6 <quorem+0xfa>
 8007978:	613c      	str	r4, [r7, #16]
 800797a:	4638      	mov	r0, r7
 800797c:	f001 f856 	bl	8008a2c <__mcmp>
 8007980:	2800      	cmp	r0, #0
 8007982:	db24      	blt.n	80079ce <quorem+0xf2>
 8007984:	3601      	adds	r6, #1
 8007986:	4628      	mov	r0, r5
 8007988:	f04f 0c00 	mov.w	ip, #0
 800798c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007990:	f8d0 e000 	ldr.w	lr, [r0]
 8007994:	b293      	uxth	r3, r2
 8007996:	ebac 0303 	sub.w	r3, ip, r3
 800799a:	0c12      	lsrs	r2, r2, #16
 800799c:	fa13 f38e 	uxtah	r3, r3, lr
 80079a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ae:	45c1      	cmp	r9, r8
 80079b0:	f840 3b04 	str.w	r3, [r0], #4
 80079b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079b8:	d2e8      	bcs.n	800798c <quorem+0xb0>
 80079ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079c2:	b922      	cbnz	r2, 80079ce <quorem+0xf2>
 80079c4:	3b04      	subs	r3, #4
 80079c6:	429d      	cmp	r5, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	d30a      	bcc.n	80079e2 <quorem+0x106>
 80079cc:	613c      	str	r4, [r7, #16]
 80079ce:	4630      	mov	r0, r6
 80079d0:	b003      	add	sp, #12
 80079d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	3b04      	subs	r3, #4
 80079da:	2a00      	cmp	r2, #0
 80079dc:	d1cc      	bne.n	8007978 <quorem+0x9c>
 80079de:	3c01      	subs	r4, #1
 80079e0:	e7c7      	b.n	8007972 <quorem+0x96>
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	3b04      	subs	r3, #4
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	d1f0      	bne.n	80079cc <quorem+0xf0>
 80079ea:	3c01      	subs	r4, #1
 80079ec:	e7eb      	b.n	80079c6 <quorem+0xea>
 80079ee:	2000      	movs	r0, #0
 80079f0:	e7ee      	b.n	80079d0 <quorem+0xf4>
 80079f2:	0000      	movs	r0, r0
 80079f4:	0000      	movs	r0, r0
	...

080079f8 <_dtoa_r>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	ec59 8b10 	vmov	r8, r9, d0
 8007a00:	b095      	sub	sp, #84	; 0x54
 8007a02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007a06:	9107      	str	r1, [sp, #28]
 8007a08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007a10:	9310      	str	r3, [sp, #64]	; 0x40
 8007a12:	b975      	cbnz	r5, 8007a32 <_dtoa_r+0x3a>
 8007a14:	2010      	movs	r0, #16
 8007a16:	f000 fd75 	bl	8008504 <malloc>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6270      	str	r0, [r6, #36]	; 0x24
 8007a1e:	b920      	cbnz	r0, 8007a2a <_dtoa_r+0x32>
 8007a20:	4bab      	ldr	r3, [pc, #684]	; (8007cd0 <_dtoa_r+0x2d8>)
 8007a22:	21ea      	movs	r1, #234	; 0xea
 8007a24:	48ab      	ldr	r0, [pc, #684]	; (8007cd4 <_dtoa_r+0x2dc>)
 8007a26:	f001 fb27 	bl	8009078 <__assert_func>
 8007a2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a2e:	6005      	str	r5, [r0, #0]
 8007a30:	60c5      	str	r5, [r0, #12]
 8007a32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a34:	6819      	ldr	r1, [r3, #0]
 8007a36:	b151      	cbz	r1, 8007a4e <_dtoa_r+0x56>
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	604a      	str	r2, [r1, #4]
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4093      	lsls	r3, r2
 8007a40:	608b      	str	r3, [r1, #8]
 8007a42:	4630      	mov	r0, r6
 8007a44:	f000 fdb4 	bl	80085b0 <_Bfree>
 8007a48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	f1b9 0300 	subs.w	r3, r9, #0
 8007a52:	bfbb      	ittet	lt
 8007a54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a58:	9303      	strlt	r3, [sp, #12]
 8007a5a:	2300      	movge	r3, #0
 8007a5c:	2201      	movlt	r2, #1
 8007a5e:	bfac      	ite	ge
 8007a60:	6023      	strge	r3, [r4, #0]
 8007a62:	6022      	strlt	r2, [r4, #0]
 8007a64:	4b9c      	ldr	r3, [pc, #624]	; (8007cd8 <_dtoa_r+0x2e0>)
 8007a66:	9c03      	ldr	r4, [sp, #12]
 8007a68:	43a3      	bics	r3, r4
 8007a6a:	d11a      	bne.n	8007aa2 <_dtoa_r+0xaa>
 8007a6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007a78:	ea53 0308 	orrs.w	r3, r3, r8
 8007a7c:	f000 8512 	beq.w	80084a4 <_dtoa_r+0xaac>
 8007a80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a82:	b953      	cbnz	r3, 8007a9a <_dtoa_r+0xa2>
 8007a84:	4b95      	ldr	r3, [pc, #596]	; (8007cdc <_dtoa_r+0x2e4>)
 8007a86:	e01f      	b.n	8007ac8 <_dtoa_r+0xd0>
 8007a88:	4b95      	ldr	r3, [pc, #596]	; (8007ce0 <_dtoa_r+0x2e8>)
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	9800      	ldr	r0, [sp, #0]
 8007a94:	b015      	add	sp, #84	; 0x54
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9a:	4b90      	ldr	r3, [pc, #576]	; (8007cdc <_dtoa_r+0x2e4>)
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	3303      	adds	r3, #3
 8007aa0:	e7f5      	b.n	8007a8e <_dtoa_r+0x96>
 8007aa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007aa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ab2:	d10b      	bne.n	8007acc <_dtoa_r+0xd4>
 8007ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 84ee 	beq.w	800849e <_dtoa_r+0xaa6>
 8007ac2:	4888      	ldr	r0, [pc, #544]	; (8007ce4 <_dtoa_r+0x2ec>)
 8007ac4:	6018      	str	r0, [r3, #0]
 8007ac6:	1e43      	subs	r3, r0, #1
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	e7e2      	b.n	8007a92 <_dtoa_r+0x9a>
 8007acc:	a913      	add	r1, sp, #76	; 0x4c
 8007ace:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007ad2:	aa12      	add	r2, sp, #72	; 0x48
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f001 f84d 	bl	8008b74 <__d2b>
 8007ada:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007ade:	4605      	mov	r5, r0
 8007ae0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	d047      	beq.n	8007b76 <_dtoa_r+0x17e>
 8007ae6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007ae8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007aec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007af0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007af4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007af8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007afc:	2400      	movs	r4, #0
 8007afe:	ec43 2b16 	vmov	d6, r2, r3
 8007b02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007b06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007cb8 <_dtoa_r+0x2c0>
 8007b0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007b0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007cc0 <_dtoa_r+0x2c8>
 8007b12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007b16:	eeb0 7b46 	vmov.f64	d7, d6
 8007b1a:	ee06 1a90 	vmov	s13, r1
 8007b1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007b22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007cc8 <_dtoa_r+0x2d0>
 8007b26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007b2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007b2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b36:	ee16 ba90 	vmov	fp, s13
 8007b3a:	9411      	str	r4, [sp, #68]	; 0x44
 8007b3c:	d508      	bpl.n	8007b50 <_dtoa_r+0x158>
 8007b3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007b42:	eeb4 6b47 	vcmp.f64	d6, d7
 8007b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4a:	bf18      	it	ne
 8007b4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007b50:	f1bb 0f16 	cmp.w	fp, #22
 8007b54:	d832      	bhi.n	8007bbc <_dtoa_r+0x1c4>
 8007b56:	4b64      	ldr	r3, [pc, #400]	; (8007ce8 <_dtoa_r+0x2f0>)
 8007b58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b5c:	ed93 7b00 	vldr	d7, [r3]
 8007b60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007b64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6c:	d501      	bpl.n	8007b72 <_dtoa_r+0x17a>
 8007b6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b72:	2300      	movs	r3, #0
 8007b74:	e023      	b.n	8007bbe <_dtoa_r+0x1c6>
 8007b76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b78:	4401      	add	r1, r0
 8007b7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	bfc3      	ittte	gt
 8007b82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b86:	fa04 f303 	lslgt.w	r3, r4, r3
 8007b8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007b8e:	f1c3 0320 	rsble	r3, r3, #32
 8007b92:	bfc6      	itte	gt
 8007b94:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007b98:	ea43 0308 	orrgt.w	r3, r3, r8
 8007b9c:	fa08 f303 	lslle.w	r3, r8, r3
 8007ba0:	ee07 3a90 	vmov	s15, r3
 8007ba4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007ba8:	3901      	subs	r1, #1
 8007baa:	ed8d 7b00 	vstr	d7, [sp]
 8007bae:	9c01      	ldr	r4, [sp, #4]
 8007bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007bb8:	2401      	movs	r4, #1
 8007bba:	e7a0      	b.n	8007afe <_dtoa_r+0x106>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bc0:	1a43      	subs	r3, r0, r1
 8007bc2:	1e5a      	subs	r2, r3, #1
 8007bc4:	bf45      	ittet	mi
 8007bc6:	f1c3 0301 	rsbmi	r3, r3, #1
 8007bca:	9305      	strmi	r3, [sp, #20]
 8007bcc:	2300      	movpl	r3, #0
 8007bce:	2300      	movmi	r3, #0
 8007bd0:	9206      	str	r2, [sp, #24]
 8007bd2:	bf54      	ite	pl
 8007bd4:	9305      	strpl	r3, [sp, #20]
 8007bd6:	9306      	strmi	r3, [sp, #24]
 8007bd8:	f1bb 0f00 	cmp.w	fp, #0
 8007bdc:	db18      	blt.n	8007c10 <_dtoa_r+0x218>
 8007bde:	9b06      	ldr	r3, [sp, #24]
 8007be0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007be4:	445b      	add	r3, fp
 8007be6:	9306      	str	r3, [sp, #24]
 8007be8:	2300      	movs	r3, #0
 8007bea:	9a07      	ldr	r2, [sp, #28]
 8007bec:	2a09      	cmp	r2, #9
 8007bee:	d849      	bhi.n	8007c84 <_dtoa_r+0x28c>
 8007bf0:	2a05      	cmp	r2, #5
 8007bf2:	bfc4      	itt	gt
 8007bf4:	3a04      	subgt	r2, #4
 8007bf6:	9207      	strgt	r2, [sp, #28]
 8007bf8:	9a07      	ldr	r2, [sp, #28]
 8007bfa:	f1a2 0202 	sub.w	r2, r2, #2
 8007bfe:	bfcc      	ite	gt
 8007c00:	2400      	movgt	r4, #0
 8007c02:	2401      	movle	r4, #1
 8007c04:	2a03      	cmp	r2, #3
 8007c06:	d848      	bhi.n	8007c9a <_dtoa_r+0x2a2>
 8007c08:	e8df f002 	tbb	[pc, r2]
 8007c0c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007c10:	9b05      	ldr	r3, [sp, #20]
 8007c12:	2200      	movs	r2, #0
 8007c14:	eba3 030b 	sub.w	r3, r3, fp
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	920e      	str	r2, [sp, #56]	; 0x38
 8007c1c:	f1cb 0300 	rsb	r3, fp, #0
 8007c20:	e7e3      	b.n	8007bea <_dtoa_r+0x1f2>
 8007c22:	2200      	movs	r2, #0
 8007c24:	9208      	str	r2, [sp, #32]
 8007c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	dc39      	bgt.n	8007ca0 <_dtoa_r+0x2a8>
 8007c2c:	f04f 0a01 	mov.w	sl, #1
 8007c30:	46d1      	mov	r9, sl
 8007c32:	4652      	mov	r2, sl
 8007c34:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007c38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	6079      	str	r1, [r7, #4]
 8007c3e:	2004      	movs	r0, #4
 8007c40:	f100 0c14 	add.w	ip, r0, #20
 8007c44:	4594      	cmp	ip, r2
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	d92f      	bls.n	8007caa <_dtoa_r+0x2b2>
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8007c4e:	f000 fc6f 	bl	8008530 <_Balloc>
 8007c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c54:	9000      	str	r0, [sp, #0]
 8007c56:	4602      	mov	r2, r0
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d149      	bne.n	8007cf0 <_dtoa_r+0x2f8>
 8007c5c:	4b23      	ldr	r3, [pc, #140]	; (8007cec <_dtoa_r+0x2f4>)
 8007c5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c62:	e6df      	b.n	8007a24 <_dtoa_r+0x2c>
 8007c64:	2201      	movs	r2, #1
 8007c66:	e7dd      	b.n	8007c24 <_dtoa_r+0x22c>
 8007c68:	2200      	movs	r2, #0
 8007c6a:	9208      	str	r2, [sp, #32]
 8007c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c6e:	eb0b 0a02 	add.w	sl, fp, r2
 8007c72:	f10a 0901 	add.w	r9, sl, #1
 8007c76:	464a      	mov	r2, r9
 8007c78:	2a01      	cmp	r2, #1
 8007c7a:	bfb8      	it	lt
 8007c7c:	2201      	movlt	r2, #1
 8007c7e:	e7db      	b.n	8007c38 <_dtoa_r+0x240>
 8007c80:	2201      	movs	r2, #1
 8007c82:	e7f2      	b.n	8007c6a <_dtoa_r+0x272>
 8007c84:	2401      	movs	r4, #1
 8007c86:	2200      	movs	r2, #0
 8007c88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007c8c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c90:	2100      	movs	r1, #0
 8007c92:	46d1      	mov	r9, sl
 8007c94:	2212      	movs	r2, #18
 8007c96:	9109      	str	r1, [sp, #36]	; 0x24
 8007c98:	e7ce      	b.n	8007c38 <_dtoa_r+0x240>
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	9208      	str	r2, [sp, #32]
 8007c9e:	e7f5      	b.n	8007c8c <_dtoa_r+0x294>
 8007ca0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007ca4:	46d1      	mov	r9, sl
 8007ca6:	4652      	mov	r2, sl
 8007ca8:	e7c6      	b.n	8007c38 <_dtoa_r+0x240>
 8007caa:	3101      	adds	r1, #1
 8007cac:	6079      	str	r1, [r7, #4]
 8007cae:	0040      	lsls	r0, r0, #1
 8007cb0:	e7c6      	b.n	8007c40 <_dtoa_r+0x248>
 8007cb2:	bf00      	nop
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	636f4361 	.word	0x636f4361
 8007cbc:	3fd287a7 	.word	0x3fd287a7
 8007cc0:	8b60c8b3 	.word	0x8b60c8b3
 8007cc4:	3fc68a28 	.word	0x3fc68a28
 8007cc8:	509f79fb 	.word	0x509f79fb
 8007ccc:	3fd34413 	.word	0x3fd34413
 8007cd0:	08009f81 	.word	0x08009f81
 8007cd4:	08009f98 	.word	0x08009f98
 8007cd8:	7ff00000 	.word	0x7ff00000
 8007cdc:	08009f7d 	.word	0x08009f7d
 8007ce0:	08009f74 	.word	0x08009f74
 8007ce4:	08009f51 	.word	0x08009f51
 8007ce8:	0800a090 	.word	0x0800a090
 8007cec:	08009ff7 	.word	0x08009ff7
 8007cf0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007cf2:	9900      	ldr	r1, [sp, #0]
 8007cf4:	6011      	str	r1, [r2, #0]
 8007cf6:	f1b9 0f0e 	cmp.w	r9, #14
 8007cfa:	d872      	bhi.n	8007de2 <_dtoa_r+0x3ea>
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d070      	beq.n	8007de2 <_dtoa_r+0x3ea>
 8007d00:	f1bb 0f00 	cmp.w	fp, #0
 8007d04:	f340 80a6 	ble.w	8007e54 <_dtoa_r+0x45c>
 8007d08:	49ca      	ldr	r1, [pc, #808]	; (8008034 <_dtoa_r+0x63c>)
 8007d0a:	f00b 020f 	and.w	r2, fp, #15
 8007d0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007d12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d16:	ed92 7b00 	vldr	d7, [r2]
 8007d1a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007d1e:	f000 808d 	beq.w	8007e3c <_dtoa_r+0x444>
 8007d22:	4ac5      	ldr	r2, [pc, #788]	; (8008038 <_dtoa_r+0x640>)
 8007d24:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007d28:	ed92 6b08 	vldr	d6, [r2, #32]
 8007d2c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007d30:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007d34:	f001 010f 	and.w	r1, r1, #15
 8007d38:	2203      	movs	r2, #3
 8007d3a:	48bf      	ldr	r0, [pc, #764]	; (8008038 <_dtoa_r+0x640>)
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d17f      	bne.n	8007e40 <_dtoa_r+0x448>
 8007d40:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d44:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	f000 80b2 	beq.w	8007eb8 <_dtoa_r+0x4c0>
 8007d54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007d58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d64:	f140 80a8 	bpl.w	8007eb8 <_dtoa_r+0x4c0>
 8007d68:	f1b9 0f00 	cmp.w	r9, #0
 8007d6c:	f000 80a4 	beq.w	8007eb8 <_dtoa_r+0x4c0>
 8007d70:	f1ba 0f00 	cmp.w	sl, #0
 8007d74:	dd31      	ble.n	8007dda <_dtoa_r+0x3e2>
 8007d76:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007d7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d82:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007d86:	3201      	adds	r2, #1
 8007d88:	4650      	mov	r0, sl
 8007d8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d8e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007d92:	ee07 2a90 	vmov	s15, r2
 8007d96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007d9e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007da2:	9c03      	ldr	r4, [sp, #12]
 8007da4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007da8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f040 8086 	bne.w	8007ebe <_dtoa_r+0x4c6>
 8007db2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007db6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007dba:	ec42 1b17 	vmov	d7, r1, r2
 8007dbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc6:	f300 8272 	bgt.w	80082ae <_dtoa_r+0x8b6>
 8007dca:	eeb1 7b47 	vneg.f64	d7, d7
 8007dce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd6:	f100 8267 	bmi.w	80082a8 <_dtoa_r+0x8b0>
 8007dda:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007dde:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007de2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007de4:	2a00      	cmp	r2, #0
 8007de6:	f2c0 8129 	blt.w	800803c <_dtoa_r+0x644>
 8007dea:	f1bb 0f0e 	cmp.w	fp, #14
 8007dee:	f300 8125 	bgt.w	800803c <_dtoa_r+0x644>
 8007df2:	4b90      	ldr	r3, [pc, #576]	; (8008034 <_dtoa_r+0x63c>)
 8007df4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007df8:	ed93 6b00 	vldr	d6, [r3]
 8007dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f280 80c3 	bge.w	8007f8a <_dtoa_r+0x592>
 8007e04:	f1b9 0f00 	cmp.w	r9, #0
 8007e08:	f300 80bf 	bgt.w	8007f8a <_dtoa_r+0x592>
 8007e0c:	f040 824c 	bne.w	80082a8 <_dtoa_r+0x8b0>
 8007e10:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007e14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007e18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e24:	464c      	mov	r4, r9
 8007e26:	464f      	mov	r7, r9
 8007e28:	f280 8222 	bge.w	8008270 <_dtoa_r+0x878>
 8007e2c:	f8dd 8000 	ldr.w	r8, [sp]
 8007e30:	2331      	movs	r3, #49	; 0x31
 8007e32:	f808 3b01 	strb.w	r3, [r8], #1
 8007e36:	f10b 0b01 	add.w	fp, fp, #1
 8007e3a:	e21e      	b.n	800827a <_dtoa_r+0x882>
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	e77c      	b.n	8007d3a <_dtoa_r+0x342>
 8007e40:	07cc      	lsls	r4, r1, #31
 8007e42:	d504      	bpl.n	8007e4e <_dtoa_r+0x456>
 8007e44:	ed90 6b00 	vldr	d6, [r0]
 8007e48:	3201      	adds	r2, #1
 8007e4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e4e:	1049      	asrs	r1, r1, #1
 8007e50:	3008      	adds	r0, #8
 8007e52:	e773      	b.n	8007d3c <_dtoa_r+0x344>
 8007e54:	d02e      	beq.n	8007eb4 <_dtoa_r+0x4bc>
 8007e56:	f1cb 0100 	rsb	r1, fp, #0
 8007e5a:	4a76      	ldr	r2, [pc, #472]	; (8008034 <_dtoa_r+0x63c>)
 8007e5c:	f001 000f 	and.w	r0, r1, #15
 8007e60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007e64:	ed92 7b00 	vldr	d7, [r2]
 8007e68:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007e6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e70:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007e74:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007e78:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007e7c:	486e      	ldr	r0, [pc, #440]	; (8008038 <_dtoa_r+0x640>)
 8007e7e:	1109      	asrs	r1, r1, #4
 8007e80:	2400      	movs	r4, #0
 8007e82:	2202      	movs	r2, #2
 8007e84:	b939      	cbnz	r1, 8007e96 <_dtoa_r+0x49e>
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	f43f af60 	beq.w	8007d4c <_dtoa_r+0x354>
 8007e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e94:	e75a      	b.n	8007d4c <_dtoa_r+0x354>
 8007e96:	07cf      	lsls	r7, r1, #31
 8007e98:	d509      	bpl.n	8007eae <_dtoa_r+0x4b6>
 8007e9a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007e9e:	ed90 7b00 	vldr	d7, [r0]
 8007ea2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007ea6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007eaa:	3201      	adds	r2, #1
 8007eac:	2401      	movs	r4, #1
 8007eae:	1049      	asrs	r1, r1, #1
 8007eb0:	3008      	adds	r0, #8
 8007eb2:	e7e7      	b.n	8007e84 <_dtoa_r+0x48c>
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	e749      	b.n	8007d4c <_dtoa_r+0x354>
 8007eb8:	465f      	mov	r7, fp
 8007eba:	4648      	mov	r0, r9
 8007ebc:	e765      	b.n	8007d8a <_dtoa_r+0x392>
 8007ebe:	ec42 1b17 	vmov	d7, r1, r2
 8007ec2:	4a5c      	ldr	r2, [pc, #368]	; (8008034 <_dtoa_r+0x63c>)
 8007ec4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007ec8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007ecc:	9a00      	ldr	r2, [sp, #0]
 8007ece:	1814      	adds	r4, r2, r0
 8007ed0:	9a08      	ldr	r2, [sp, #32]
 8007ed2:	b352      	cbz	r2, 8007f2a <_dtoa_r+0x532>
 8007ed4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007ed8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007edc:	f8dd 8000 	ldr.w	r8, [sp]
 8007ee0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007ee4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007ee8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007eec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ef0:	ee14 2a90 	vmov	r2, s9
 8007ef4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ef8:	3230      	adds	r2, #48	; 0x30
 8007efa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007efe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f06:	f808 2b01 	strb.w	r2, [r8], #1
 8007f0a:	d439      	bmi.n	8007f80 <_dtoa_r+0x588>
 8007f0c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007f10:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f18:	d472      	bmi.n	8008000 <_dtoa_r+0x608>
 8007f1a:	45a0      	cmp	r8, r4
 8007f1c:	f43f af5d 	beq.w	8007dda <_dtoa_r+0x3e2>
 8007f20:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007f24:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007f28:	e7e0      	b.n	8007eec <_dtoa_r+0x4f4>
 8007f2a:	f8dd 8000 	ldr.w	r8, [sp]
 8007f2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007f32:	4621      	mov	r1, r4
 8007f34:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007f38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f3c:	ee14 2a90 	vmov	r2, s9
 8007f40:	3230      	adds	r2, #48	; 0x30
 8007f42:	f808 2b01 	strb.w	r2, [r8], #1
 8007f46:	45a0      	cmp	r8, r4
 8007f48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f50:	d118      	bne.n	8007f84 <_dtoa_r+0x58c>
 8007f52:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007f56:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007f5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f62:	dc4d      	bgt.n	8008000 <_dtoa_r+0x608>
 8007f64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f70:	f57f af33 	bpl.w	8007dda <_dtoa_r+0x3e2>
 8007f74:	4688      	mov	r8, r1
 8007f76:	3901      	subs	r1, #1
 8007f78:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007f7c:	2b30      	cmp	r3, #48	; 0x30
 8007f7e:	d0f9      	beq.n	8007f74 <_dtoa_r+0x57c>
 8007f80:	46bb      	mov	fp, r7
 8007f82:	e02a      	b.n	8007fda <_dtoa_r+0x5e2>
 8007f84:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007f88:	e7d6      	b.n	8007f38 <_dtoa_r+0x540>
 8007f8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f8e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007f92:	f8dd 8000 	ldr.w	r8, [sp]
 8007f96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007f9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007f9e:	ee15 3a10 	vmov	r3, s10
 8007fa2:	3330      	adds	r3, #48	; 0x30
 8007fa4:	f808 3b01 	strb.w	r3, [r8], #1
 8007fa8:	9b00      	ldr	r3, [sp, #0]
 8007faa:	eba8 0303 	sub.w	r3, r8, r3
 8007fae:	4599      	cmp	r9, r3
 8007fb0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007fb4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007fb8:	d133      	bne.n	8008022 <_dtoa_r+0x62a>
 8007fba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007fbe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc6:	dc1a      	bgt.n	8007ffe <_dtoa_r+0x606>
 8007fc8:	eeb4 7b46 	vcmp.f64	d7, d6
 8007fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd0:	d103      	bne.n	8007fda <_dtoa_r+0x5e2>
 8007fd2:	ee15 3a10 	vmov	r3, s10
 8007fd6:	07d9      	lsls	r1, r3, #31
 8007fd8:	d411      	bmi.n	8007ffe <_dtoa_r+0x606>
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f000 fae7 	bl	80085b0 <_Bfree>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fe6:	f888 3000 	strb.w	r3, [r8]
 8007fea:	f10b 0301 	add.w	r3, fp, #1
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f43f ad4d 	beq.w	8007a92 <_dtoa_r+0x9a>
 8007ff8:	f8c3 8000 	str.w	r8, [r3]
 8007ffc:	e549      	b.n	8007a92 <_dtoa_r+0x9a>
 8007ffe:	465f      	mov	r7, fp
 8008000:	4643      	mov	r3, r8
 8008002:	4698      	mov	r8, r3
 8008004:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008008:	2a39      	cmp	r2, #57	; 0x39
 800800a:	d106      	bne.n	800801a <_dtoa_r+0x622>
 800800c:	9a00      	ldr	r2, [sp, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d1f7      	bne.n	8008002 <_dtoa_r+0x60a>
 8008012:	9900      	ldr	r1, [sp, #0]
 8008014:	2230      	movs	r2, #48	; 0x30
 8008016:	3701      	adds	r7, #1
 8008018:	700a      	strb	r2, [r1, #0]
 800801a:	781a      	ldrb	r2, [r3, #0]
 800801c:	3201      	adds	r2, #1
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	e7ae      	b.n	8007f80 <_dtoa_r+0x588>
 8008022:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008026:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800802a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802e:	d1b2      	bne.n	8007f96 <_dtoa_r+0x59e>
 8008030:	e7d3      	b.n	8007fda <_dtoa_r+0x5e2>
 8008032:	bf00      	nop
 8008034:	0800a090 	.word	0x0800a090
 8008038:	0800a068 	.word	0x0800a068
 800803c:	9908      	ldr	r1, [sp, #32]
 800803e:	2900      	cmp	r1, #0
 8008040:	f000 80d1 	beq.w	80081e6 <_dtoa_r+0x7ee>
 8008044:	9907      	ldr	r1, [sp, #28]
 8008046:	2901      	cmp	r1, #1
 8008048:	f300 80b4 	bgt.w	80081b4 <_dtoa_r+0x7bc>
 800804c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800804e:	2900      	cmp	r1, #0
 8008050:	f000 80ac 	beq.w	80081ac <_dtoa_r+0x7b4>
 8008054:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008058:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800805c:	461c      	mov	r4, r3
 800805e:	930a      	str	r3, [sp, #40]	; 0x28
 8008060:	9b05      	ldr	r3, [sp, #20]
 8008062:	4413      	add	r3, r2
 8008064:	9305      	str	r3, [sp, #20]
 8008066:	9b06      	ldr	r3, [sp, #24]
 8008068:	2101      	movs	r1, #1
 800806a:	4413      	add	r3, r2
 800806c:	4630      	mov	r0, r6
 800806e:	9306      	str	r3, [sp, #24]
 8008070:	f000 fb5a 	bl	8008728 <__i2b>
 8008074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008076:	4607      	mov	r7, r0
 8008078:	f1b8 0f00 	cmp.w	r8, #0
 800807c:	dd0d      	ble.n	800809a <_dtoa_r+0x6a2>
 800807e:	9a06      	ldr	r2, [sp, #24]
 8008080:	2a00      	cmp	r2, #0
 8008082:	dd0a      	ble.n	800809a <_dtoa_r+0x6a2>
 8008084:	4542      	cmp	r2, r8
 8008086:	9905      	ldr	r1, [sp, #20]
 8008088:	bfa8      	it	ge
 800808a:	4642      	movge	r2, r8
 800808c:	1a89      	subs	r1, r1, r2
 800808e:	9105      	str	r1, [sp, #20]
 8008090:	9906      	ldr	r1, [sp, #24]
 8008092:	eba8 0802 	sub.w	r8, r8, r2
 8008096:	1a8a      	subs	r2, r1, r2
 8008098:	9206      	str	r2, [sp, #24]
 800809a:	b303      	cbz	r3, 80080de <_dtoa_r+0x6e6>
 800809c:	9a08      	ldr	r2, [sp, #32]
 800809e:	2a00      	cmp	r2, #0
 80080a0:	f000 80a6 	beq.w	80081f0 <_dtoa_r+0x7f8>
 80080a4:	2c00      	cmp	r4, #0
 80080a6:	dd13      	ble.n	80080d0 <_dtoa_r+0x6d8>
 80080a8:	4639      	mov	r1, r7
 80080aa:	4622      	mov	r2, r4
 80080ac:	4630      	mov	r0, r6
 80080ae:	930c      	str	r3, [sp, #48]	; 0x30
 80080b0:	f000 fbf6 	bl	80088a0 <__pow5mult>
 80080b4:	462a      	mov	r2, r5
 80080b6:	4601      	mov	r1, r0
 80080b8:	4607      	mov	r7, r0
 80080ba:	4630      	mov	r0, r6
 80080bc:	f000 fb4a 	bl	8008754 <__multiply>
 80080c0:	4629      	mov	r1, r5
 80080c2:	900a      	str	r0, [sp, #40]	; 0x28
 80080c4:	4630      	mov	r0, r6
 80080c6:	f000 fa73 	bl	80085b0 <_Bfree>
 80080ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080ce:	4615      	mov	r5, r2
 80080d0:	1b1a      	subs	r2, r3, r4
 80080d2:	d004      	beq.n	80080de <_dtoa_r+0x6e6>
 80080d4:	4629      	mov	r1, r5
 80080d6:	4630      	mov	r0, r6
 80080d8:	f000 fbe2 	bl	80088a0 <__pow5mult>
 80080dc:	4605      	mov	r5, r0
 80080de:	2101      	movs	r1, #1
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 fb21 	bl	8008728 <__i2b>
 80080e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	f340 8082 	ble.w	80081f4 <_dtoa_r+0x7fc>
 80080f0:	461a      	mov	r2, r3
 80080f2:	4601      	mov	r1, r0
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 fbd3 	bl	80088a0 <__pow5mult>
 80080fa:	9b07      	ldr	r3, [sp, #28]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	4604      	mov	r4, r0
 8008100:	dd7b      	ble.n	80081fa <_dtoa_r+0x802>
 8008102:	2300      	movs	r3, #0
 8008104:	930a      	str	r3, [sp, #40]	; 0x28
 8008106:	6922      	ldr	r2, [r4, #16]
 8008108:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800810c:	6910      	ldr	r0, [r2, #16]
 800810e:	f000 fabb 	bl	8008688 <__hi0bits>
 8008112:	f1c0 0020 	rsb	r0, r0, #32
 8008116:	9b06      	ldr	r3, [sp, #24]
 8008118:	4418      	add	r0, r3
 800811a:	f010 001f 	ands.w	r0, r0, #31
 800811e:	f000 808d 	beq.w	800823c <_dtoa_r+0x844>
 8008122:	f1c0 0220 	rsb	r2, r0, #32
 8008126:	2a04      	cmp	r2, #4
 8008128:	f340 8086 	ble.w	8008238 <_dtoa_r+0x840>
 800812c:	f1c0 001c 	rsb	r0, r0, #28
 8008130:	9b05      	ldr	r3, [sp, #20]
 8008132:	4403      	add	r3, r0
 8008134:	9305      	str	r3, [sp, #20]
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	4403      	add	r3, r0
 800813a:	4480      	add	r8, r0
 800813c:	9306      	str	r3, [sp, #24]
 800813e:	9b05      	ldr	r3, [sp, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	dd05      	ble.n	8008150 <_dtoa_r+0x758>
 8008144:	4629      	mov	r1, r5
 8008146:	461a      	mov	r2, r3
 8008148:	4630      	mov	r0, r6
 800814a:	f000 fc03 	bl	8008954 <__lshift>
 800814e:	4605      	mov	r5, r0
 8008150:	9b06      	ldr	r3, [sp, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	dd05      	ble.n	8008162 <_dtoa_r+0x76a>
 8008156:	4621      	mov	r1, r4
 8008158:	461a      	mov	r2, r3
 800815a:	4630      	mov	r0, r6
 800815c:	f000 fbfa 	bl	8008954 <__lshift>
 8008160:	4604      	mov	r4, r0
 8008162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d06b      	beq.n	8008240 <_dtoa_r+0x848>
 8008168:	4621      	mov	r1, r4
 800816a:	4628      	mov	r0, r5
 800816c:	f000 fc5e 	bl	8008a2c <__mcmp>
 8008170:	2800      	cmp	r0, #0
 8008172:	da65      	bge.n	8008240 <_dtoa_r+0x848>
 8008174:	2300      	movs	r3, #0
 8008176:	4629      	mov	r1, r5
 8008178:	220a      	movs	r2, #10
 800817a:	4630      	mov	r0, r6
 800817c:	f000 fa3a 	bl	80085f4 <__multadd>
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008186:	4605      	mov	r5, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8192 	beq.w	80084b2 <_dtoa_r+0xaba>
 800818e:	4639      	mov	r1, r7
 8008190:	2300      	movs	r3, #0
 8008192:	220a      	movs	r2, #10
 8008194:	4630      	mov	r0, r6
 8008196:	f000 fa2d 	bl	80085f4 <__multadd>
 800819a:	f1ba 0f00 	cmp.w	sl, #0
 800819e:	4607      	mov	r7, r0
 80081a0:	f300 808e 	bgt.w	80082c0 <_dtoa_r+0x8c8>
 80081a4:	9b07      	ldr	r3, [sp, #28]
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	dc51      	bgt.n	800824e <_dtoa_r+0x856>
 80081aa:	e089      	b.n	80082c0 <_dtoa_r+0x8c8>
 80081ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80081b2:	e751      	b.n	8008058 <_dtoa_r+0x660>
 80081b4:	f109 34ff 	add.w	r4, r9, #4294967295
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	bfbf      	itttt	lt
 80081bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80081be:	1ae3      	sublt	r3, r4, r3
 80081c0:	18d2      	addlt	r2, r2, r3
 80081c2:	4613      	movlt	r3, r2
 80081c4:	bfb7      	itett	lt
 80081c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80081c8:	1b1c      	subge	r4, r3, r4
 80081ca:	4623      	movlt	r3, r4
 80081cc:	2400      	movlt	r4, #0
 80081ce:	f1b9 0f00 	cmp.w	r9, #0
 80081d2:	bfb5      	itete	lt
 80081d4:	9a05      	ldrlt	r2, [sp, #20]
 80081d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80081da:	eba2 0809 	sublt.w	r8, r2, r9
 80081de:	464a      	movge	r2, r9
 80081e0:	bfb8      	it	lt
 80081e2:	2200      	movlt	r2, #0
 80081e4:	e73b      	b.n	800805e <_dtoa_r+0x666>
 80081e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80081ea:	9f08      	ldr	r7, [sp, #32]
 80081ec:	461c      	mov	r4, r3
 80081ee:	e743      	b.n	8008078 <_dtoa_r+0x680>
 80081f0:	461a      	mov	r2, r3
 80081f2:	e76f      	b.n	80080d4 <_dtoa_r+0x6dc>
 80081f4:	9b07      	ldr	r3, [sp, #28]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	dc18      	bgt.n	800822c <_dtoa_r+0x834>
 80081fa:	9b02      	ldr	r3, [sp, #8]
 80081fc:	b9b3      	cbnz	r3, 800822c <_dtoa_r+0x834>
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008204:	b9a2      	cbnz	r2, 8008230 <_dtoa_r+0x838>
 8008206:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800820a:	0d12      	lsrs	r2, r2, #20
 800820c:	0512      	lsls	r2, r2, #20
 800820e:	b18a      	cbz	r2, 8008234 <_dtoa_r+0x83c>
 8008210:	9b05      	ldr	r3, [sp, #20]
 8008212:	3301      	adds	r3, #1
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	9b06      	ldr	r3, [sp, #24]
 8008218:	3301      	adds	r3, #1
 800821a:	9306      	str	r3, [sp, #24]
 800821c:	2301      	movs	r3, #1
 800821e:	930a      	str	r3, [sp, #40]	; 0x28
 8008220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008222:	2b00      	cmp	r3, #0
 8008224:	f47f af6f 	bne.w	8008106 <_dtoa_r+0x70e>
 8008228:	2001      	movs	r0, #1
 800822a:	e774      	b.n	8008116 <_dtoa_r+0x71e>
 800822c:	2300      	movs	r3, #0
 800822e:	e7f6      	b.n	800821e <_dtoa_r+0x826>
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	e7f4      	b.n	800821e <_dtoa_r+0x826>
 8008234:	920a      	str	r2, [sp, #40]	; 0x28
 8008236:	e7f3      	b.n	8008220 <_dtoa_r+0x828>
 8008238:	d081      	beq.n	800813e <_dtoa_r+0x746>
 800823a:	4610      	mov	r0, r2
 800823c:	301c      	adds	r0, #28
 800823e:	e777      	b.n	8008130 <_dtoa_r+0x738>
 8008240:	f1b9 0f00 	cmp.w	r9, #0
 8008244:	dc37      	bgt.n	80082b6 <_dtoa_r+0x8be>
 8008246:	9b07      	ldr	r3, [sp, #28]
 8008248:	2b02      	cmp	r3, #2
 800824a:	dd34      	ble.n	80082b6 <_dtoa_r+0x8be>
 800824c:	46ca      	mov	sl, r9
 800824e:	f1ba 0f00 	cmp.w	sl, #0
 8008252:	d10d      	bne.n	8008270 <_dtoa_r+0x878>
 8008254:	4621      	mov	r1, r4
 8008256:	4653      	mov	r3, sl
 8008258:	2205      	movs	r2, #5
 800825a:	4630      	mov	r0, r6
 800825c:	f000 f9ca 	bl	80085f4 <__multadd>
 8008260:	4601      	mov	r1, r0
 8008262:	4604      	mov	r4, r0
 8008264:	4628      	mov	r0, r5
 8008266:	f000 fbe1 	bl	8008a2c <__mcmp>
 800826a:	2800      	cmp	r0, #0
 800826c:	f73f adde 	bgt.w	8007e2c <_dtoa_r+0x434>
 8008270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008272:	f8dd 8000 	ldr.w	r8, [sp]
 8008276:	ea6f 0b03 	mvn.w	fp, r3
 800827a:	f04f 0900 	mov.w	r9, #0
 800827e:	4621      	mov	r1, r4
 8008280:	4630      	mov	r0, r6
 8008282:	f000 f995 	bl	80085b0 <_Bfree>
 8008286:	2f00      	cmp	r7, #0
 8008288:	f43f aea7 	beq.w	8007fda <_dtoa_r+0x5e2>
 800828c:	f1b9 0f00 	cmp.w	r9, #0
 8008290:	d005      	beq.n	800829e <_dtoa_r+0x8a6>
 8008292:	45b9      	cmp	r9, r7
 8008294:	d003      	beq.n	800829e <_dtoa_r+0x8a6>
 8008296:	4649      	mov	r1, r9
 8008298:	4630      	mov	r0, r6
 800829a:	f000 f989 	bl	80085b0 <_Bfree>
 800829e:	4639      	mov	r1, r7
 80082a0:	4630      	mov	r0, r6
 80082a2:	f000 f985 	bl	80085b0 <_Bfree>
 80082a6:	e698      	b.n	8007fda <_dtoa_r+0x5e2>
 80082a8:	2400      	movs	r4, #0
 80082aa:	4627      	mov	r7, r4
 80082ac:	e7e0      	b.n	8008270 <_dtoa_r+0x878>
 80082ae:	46bb      	mov	fp, r7
 80082b0:	4604      	mov	r4, r0
 80082b2:	4607      	mov	r7, r0
 80082b4:	e5ba      	b.n	8007e2c <_dtoa_r+0x434>
 80082b6:	9b08      	ldr	r3, [sp, #32]
 80082b8:	46ca      	mov	sl, r9
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 8100 	beq.w	80084c0 <_dtoa_r+0xac8>
 80082c0:	f1b8 0f00 	cmp.w	r8, #0
 80082c4:	dd05      	ble.n	80082d2 <_dtoa_r+0x8da>
 80082c6:	4639      	mov	r1, r7
 80082c8:	4642      	mov	r2, r8
 80082ca:	4630      	mov	r0, r6
 80082cc:	f000 fb42 	bl	8008954 <__lshift>
 80082d0:	4607      	mov	r7, r0
 80082d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d05d      	beq.n	8008394 <_dtoa_r+0x99c>
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4630      	mov	r0, r6
 80082dc:	f000 f928 	bl	8008530 <_Balloc>
 80082e0:	4680      	mov	r8, r0
 80082e2:	b928      	cbnz	r0, 80082f0 <_dtoa_r+0x8f8>
 80082e4:	4b82      	ldr	r3, [pc, #520]	; (80084f0 <_dtoa_r+0xaf8>)
 80082e6:	4602      	mov	r2, r0
 80082e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80082ec:	f7ff bb9a 	b.w	8007a24 <_dtoa_r+0x2c>
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	3202      	adds	r2, #2
 80082f4:	0092      	lsls	r2, r2, #2
 80082f6:	f107 010c 	add.w	r1, r7, #12
 80082fa:	300c      	adds	r0, #12
 80082fc:	f000 f90a 	bl	8008514 <memcpy>
 8008300:	2201      	movs	r2, #1
 8008302:	4641      	mov	r1, r8
 8008304:	4630      	mov	r0, r6
 8008306:	f000 fb25 	bl	8008954 <__lshift>
 800830a:	9b00      	ldr	r3, [sp, #0]
 800830c:	3301      	adds	r3, #1
 800830e:	9305      	str	r3, [sp, #20]
 8008310:	9b00      	ldr	r3, [sp, #0]
 8008312:	4453      	add	r3, sl
 8008314:	9309      	str	r3, [sp, #36]	; 0x24
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	46b9      	mov	r9, r7
 800831e:	9308      	str	r3, [sp, #32]
 8008320:	4607      	mov	r7, r0
 8008322:	9b05      	ldr	r3, [sp, #20]
 8008324:	4621      	mov	r1, r4
 8008326:	3b01      	subs	r3, #1
 8008328:	4628      	mov	r0, r5
 800832a:	9302      	str	r3, [sp, #8]
 800832c:	f7ff fad6 	bl	80078dc <quorem>
 8008330:	4603      	mov	r3, r0
 8008332:	3330      	adds	r3, #48	; 0x30
 8008334:	9006      	str	r0, [sp, #24]
 8008336:	4649      	mov	r1, r9
 8008338:	4628      	mov	r0, r5
 800833a:	930a      	str	r3, [sp, #40]	; 0x28
 800833c:	f000 fb76 	bl	8008a2c <__mcmp>
 8008340:	463a      	mov	r2, r7
 8008342:	4682      	mov	sl, r0
 8008344:	4621      	mov	r1, r4
 8008346:	4630      	mov	r0, r6
 8008348:	f000 fb8c 	bl	8008a64 <__mdiff>
 800834c:	68c2      	ldr	r2, [r0, #12]
 800834e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008350:	4680      	mov	r8, r0
 8008352:	bb0a      	cbnz	r2, 8008398 <_dtoa_r+0x9a0>
 8008354:	4601      	mov	r1, r0
 8008356:	4628      	mov	r0, r5
 8008358:	f000 fb68 	bl	8008a2c <__mcmp>
 800835c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835e:	4602      	mov	r2, r0
 8008360:	4641      	mov	r1, r8
 8008362:	4630      	mov	r0, r6
 8008364:	920e      	str	r2, [sp, #56]	; 0x38
 8008366:	930a      	str	r3, [sp, #40]	; 0x28
 8008368:	f000 f922 	bl	80085b0 <_Bfree>
 800836c:	9b07      	ldr	r3, [sp, #28]
 800836e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008370:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008374:	ea43 0102 	orr.w	r1, r3, r2
 8008378:	9b08      	ldr	r3, [sp, #32]
 800837a:	430b      	orrs	r3, r1
 800837c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837e:	d10d      	bne.n	800839c <_dtoa_r+0x9a4>
 8008380:	2b39      	cmp	r3, #57	; 0x39
 8008382:	d029      	beq.n	80083d8 <_dtoa_r+0x9e0>
 8008384:	f1ba 0f00 	cmp.w	sl, #0
 8008388:	dd01      	ble.n	800838e <_dtoa_r+0x996>
 800838a:	9b06      	ldr	r3, [sp, #24]
 800838c:	3331      	adds	r3, #49	; 0x31
 800838e:	9a02      	ldr	r2, [sp, #8]
 8008390:	7013      	strb	r3, [r2, #0]
 8008392:	e774      	b.n	800827e <_dtoa_r+0x886>
 8008394:	4638      	mov	r0, r7
 8008396:	e7b8      	b.n	800830a <_dtoa_r+0x912>
 8008398:	2201      	movs	r2, #1
 800839a:	e7e1      	b.n	8008360 <_dtoa_r+0x968>
 800839c:	f1ba 0f00 	cmp.w	sl, #0
 80083a0:	db06      	blt.n	80083b0 <_dtoa_r+0x9b8>
 80083a2:	9907      	ldr	r1, [sp, #28]
 80083a4:	ea41 0a0a 	orr.w	sl, r1, sl
 80083a8:	9908      	ldr	r1, [sp, #32]
 80083aa:	ea5a 0101 	orrs.w	r1, sl, r1
 80083ae:	d120      	bne.n	80083f2 <_dtoa_r+0x9fa>
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	ddec      	ble.n	800838e <_dtoa_r+0x996>
 80083b4:	4629      	mov	r1, r5
 80083b6:	2201      	movs	r2, #1
 80083b8:	4630      	mov	r0, r6
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	f000 faca 	bl	8008954 <__lshift>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4605      	mov	r5, r0
 80083c4:	f000 fb32 	bl	8008a2c <__mcmp>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	9b05      	ldr	r3, [sp, #20]
 80083cc:	dc02      	bgt.n	80083d4 <_dtoa_r+0x9dc>
 80083ce:	d1de      	bne.n	800838e <_dtoa_r+0x996>
 80083d0:	07da      	lsls	r2, r3, #31
 80083d2:	d5dc      	bpl.n	800838e <_dtoa_r+0x996>
 80083d4:	2b39      	cmp	r3, #57	; 0x39
 80083d6:	d1d8      	bne.n	800838a <_dtoa_r+0x992>
 80083d8:	9a02      	ldr	r2, [sp, #8]
 80083da:	2339      	movs	r3, #57	; 0x39
 80083dc:	7013      	strb	r3, [r2, #0]
 80083de:	4643      	mov	r3, r8
 80083e0:	4698      	mov	r8, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80083e8:	2a39      	cmp	r2, #57	; 0x39
 80083ea:	d051      	beq.n	8008490 <_dtoa_r+0xa98>
 80083ec:	3201      	adds	r2, #1
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	e745      	b.n	800827e <_dtoa_r+0x886>
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	dd03      	ble.n	80083fe <_dtoa_r+0xa06>
 80083f6:	2b39      	cmp	r3, #57	; 0x39
 80083f8:	d0ee      	beq.n	80083d8 <_dtoa_r+0x9e0>
 80083fa:	3301      	adds	r3, #1
 80083fc:	e7c7      	b.n	800838e <_dtoa_r+0x996>
 80083fe:	9a05      	ldr	r2, [sp, #20]
 8008400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008402:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008406:	428a      	cmp	r2, r1
 8008408:	d02b      	beq.n	8008462 <_dtoa_r+0xa6a>
 800840a:	4629      	mov	r1, r5
 800840c:	2300      	movs	r3, #0
 800840e:	220a      	movs	r2, #10
 8008410:	4630      	mov	r0, r6
 8008412:	f000 f8ef 	bl	80085f4 <__multadd>
 8008416:	45b9      	cmp	r9, r7
 8008418:	4605      	mov	r5, r0
 800841a:	f04f 0300 	mov.w	r3, #0
 800841e:	f04f 020a 	mov.w	r2, #10
 8008422:	4649      	mov	r1, r9
 8008424:	4630      	mov	r0, r6
 8008426:	d107      	bne.n	8008438 <_dtoa_r+0xa40>
 8008428:	f000 f8e4 	bl	80085f4 <__multadd>
 800842c:	4681      	mov	r9, r0
 800842e:	4607      	mov	r7, r0
 8008430:	9b05      	ldr	r3, [sp, #20]
 8008432:	3301      	adds	r3, #1
 8008434:	9305      	str	r3, [sp, #20]
 8008436:	e774      	b.n	8008322 <_dtoa_r+0x92a>
 8008438:	f000 f8dc 	bl	80085f4 <__multadd>
 800843c:	4639      	mov	r1, r7
 800843e:	4681      	mov	r9, r0
 8008440:	2300      	movs	r3, #0
 8008442:	220a      	movs	r2, #10
 8008444:	4630      	mov	r0, r6
 8008446:	f000 f8d5 	bl	80085f4 <__multadd>
 800844a:	4607      	mov	r7, r0
 800844c:	e7f0      	b.n	8008430 <_dtoa_r+0xa38>
 800844e:	f1ba 0f00 	cmp.w	sl, #0
 8008452:	9a00      	ldr	r2, [sp, #0]
 8008454:	bfcc      	ite	gt
 8008456:	46d0      	movgt	r8, sl
 8008458:	f04f 0801 	movle.w	r8, #1
 800845c:	4490      	add	r8, r2
 800845e:	f04f 0900 	mov.w	r9, #0
 8008462:	4629      	mov	r1, r5
 8008464:	2201      	movs	r2, #1
 8008466:	4630      	mov	r0, r6
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	f000 fa73 	bl	8008954 <__lshift>
 800846e:	4621      	mov	r1, r4
 8008470:	4605      	mov	r5, r0
 8008472:	f000 fadb 	bl	8008a2c <__mcmp>
 8008476:	2800      	cmp	r0, #0
 8008478:	dcb1      	bgt.n	80083de <_dtoa_r+0x9e6>
 800847a:	d102      	bne.n	8008482 <_dtoa_r+0xa8a>
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	07db      	lsls	r3, r3, #31
 8008480:	d4ad      	bmi.n	80083de <_dtoa_r+0x9e6>
 8008482:	4643      	mov	r3, r8
 8008484:	4698      	mov	r8, r3
 8008486:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800848a:	2a30      	cmp	r2, #48	; 0x30
 800848c:	d0fa      	beq.n	8008484 <_dtoa_r+0xa8c>
 800848e:	e6f6      	b.n	800827e <_dtoa_r+0x886>
 8008490:	9a00      	ldr	r2, [sp, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d1a4      	bne.n	80083e0 <_dtoa_r+0x9e8>
 8008496:	f10b 0b01 	add.w	fp, fp, #1
 800849a:	2331      	movs	r3, #49	; 0x31
 800849c:	e778      	b.n	8008390 <_dtoa_r+0x998>
 800849e:	4b15      	ldr	r3, [pc, #84]	; (80084f4 <_dtoa_r+0xafc>)
 80084a0:	f7ff bb12 	b.w	8007ac8 <_dtoa_r+0xd0>
 80084a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f47f aaee 	bne.w	8007a88 <_dtoa_r+0x90>
 80084ac:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <_dtoa_r+0xb00>)
 80084ae:	f7ff bb0b 	b.w	8007ac8 <_dtoa_r+0xd0>
 80084b2:	f1ba 0f00 	cmp.w	sl, #0
 80084b6:	dc03      	bgt.n	80084c0 <_dtoa_r+0xac8>
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	f73f aec7 	bgt.w	800824e <_dtoa_r+0x856>
 80084c0:	f8dd 8000 	ldr.w	r8, [sp]
 80084c4:	4621      	mov	r1, r4
 80084c6:	4628      	mov	r0, r5
 80084c8:	f7ff fa08 	bl	80078dc <quorem>
 80084cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80084d0:	f808 3b01 	strb.w	r3, [r8], #1
 80084d4:	9a00      	ldr	r2, [sp, #0]
 80084d6:	eba8 0202 	sub.w	r2, r8, r2
 80084da:	4592      	cmp	sl, r2
 80084dc:	ddb7      	ble.n	800844e <_dtoa_r+0xa56>
 80084de:	4629      	mov	r1, r5
 80084e0:	2300      	movs	r3, #0
 80084e2:	220a      	movs	r2, #10
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 f885 	bl	80085f4 <__multadd>
 80084ea:	4605      	mov	r5, r0
 80084ec:	e7ea      	b.n	80084c4 <_dtoa_r+0xacc>
 80084ee:	bf00      	nop
 80084f0:	08009ff7 	.word	0x08009ff7
 80084f4:	08009f50 	.word	0x08009f50
 80084f8:	08009f74 	.word	0x08009f74

080084fc <_localeconv_r>:
 80084fc:	4800      	ldr	r0, [pc, #0]	; (8008500 <_localeconv_r+0x4>)
 80084fe:	4770      	bx	lr
 8008500:	20000190 	.word	0x20000190

08008504 <malloc>:
 8008504:	4b02      	ldr	r3, [pc, #8]	; (8008510 <malloc+0xc>)
 8008506:	4601      	mov	r1, r0
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	f000 bbef 	b.w	8008cec <_malloc_r>
 800850e:	bf00      	nop
 8008510:	2000003c 	.word	0x2000003c

08008514 <memcpy>:
 8008514:	440a      	add	r2, r1
 8008516:	4291      	cmp	r1, r2
 8008518:	f100 33ff 	add.w	r3, r0, #4294967295
 800851c:	d100      	bne.n	8008520 <memcpy+0xc>
 800851e:	4770      	bx	lr
 8008520:	b510      	push	{r4, lr}
 8008522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800852a:	4291      	cmp	r1, r2
 800852c:	d1f9      	bne.n	8008522 <memcpy+0xe>
 800852e:	bd10      	pop	{r4, pc}

08008530 <_Balloc>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008534:	4604      	mov	r4, r0
 8008536:	460d      	mov	r5, r1
 8008538:	b976      	cbnz	r6, 8008558 <_Balloc+0x28>
 800853a:	2010      	movs	r0, #16
 800853c:	f7ff ffe2 	bl	8008504 <malloc>
 8008540:	4602      	mov	r2, r0
 8008542:	6260      	str	r0, [r4, #36]	; 0x24
 8008544:	b920      	cbnz	r0, 8008550 <_Balloc+0x20>
 8008546:	4b18      	ldr	r3, [pc, #96]	; (80085a8 <_Balloc+0x78>)
 8008548:	4818      	ldr	r0, [pc, #96]	; (80085ac <_Balloc+0x7c>)
 800854a:	2166      	movs	r1, #102	; 0x66
 800854c:	f000 fd94 	bl	8009078 <__assert_func>
 8008550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008554:	6006      	str	r6, [r0, #0]
 8008556:	60c6      	str	r6, [r0, #12]
 8008558:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800855a:	68f3      	ldr	r3, [r6, #12]
 800855c:	b183      	cbz	r3, 8008580 <_Balloc+0x50>
 800855e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008566:	b9b8      	cbnz	r0, 8008598 <_Balloc+0x68>
 8008568:	2101      	movs	r1, #1
 800856a:	fa01 f605 	lsl.w	r6, r1, r5
 800856e:	1d72      	adds	r2, r6, #5
 8008570:	0092      	lsls	r2, r2, #2
 8008572:	4620      	mov	r0, r4
 8008574:	f000 fb5a 	bl	8008c2c <_calloc_r>
 8008578:	b160      	cbz	r0, 8008594 <_Balloc+0x64>
 800857a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800857e:	e00e      	b.n	800859e <_Balloc+0x6e>
 8008580:	2221      	movs	r2, #33	; 0x21
 8008582:	2104      	movs	r1, #4
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fb51 	bl	8008c2c <_calloc_r>
 800858a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800858c:	60f0      	str	r0, [r6, #12]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e4      	bne.n	800855e <_Balloc+0x2e>
 8008594:	2000      	movs	r0, #0
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	6802      	ldr	r2, [r0, #0]
 800859a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800859e:	2300      	movs	r3, #0
 80085a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085a4:	e7f7      	b.n	8008596 <_Balloc+0x66>
 80085a6:	bf00      	nop
 80085a8:	08009f81 	.word	0x08009f81
 80085ac:	0800a008 	.word	0x0800a008

080085b0 <_Bfree>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	b976      	cbnz	r6, 80085d8 <_Bfree+0x28>
 80085ba:	2010      	movs	r0, #16
 80085bc:	f7ff ffa2 	bl	8008504 <malloc>
 80085c0:	4602      	mov	r2, r0
 80085c2:	6268      	str	r0, [r5, #36]	; 0x24
 80085c4:	b920      	cbnz	r0, 80085d0 <_Bfree+0x20>
 80085c6:	4b09      	ldr	r3, [pc, #36]	; (80085ec <_Bfree+0x3c>)
 80085c8:	4809      	ldr	r0, [pc, #36]	; (80085f0 <_Bfree+0x40>)
 80085ca:	218a      	movs	r1, #138	; 0x8a
 80085cc:	f000 fd54 	bl	8009078 <__assert_func>
 80085d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085d4:	6006      	str	r6, [r0, #0]
 80085d6:	60c6      	str	r6, [r0, #12]
 80085d8:	b13c      	cbz	r4, 80085ea <_Bfree+0x3a>
 80085da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085dc:	6862      	ldr	r2, [r4, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085e4:	6021      	str	r1, [r4, #0]
 80085e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	08009f81 	.word	0x08009f81
 80085f0:	0800a008 	.word	0x0800a008

080085f4 <__multadd>:
 80085f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f8:	690e      	ldr	r6, [r1, #16]
 80085fa:	4607      	mov	r7, r0
 80085fc:	4698      	mov	r8, r3
 80085fe:	460c      	mov	r4, r1
 8008600:	f101 0014 	add.w	r0, r1, #20
 8008604:	2300      	movs	r3, #0
 8008606:	6805      	ldr	r5, [r0, #0]
 8008608:	b2a9      	uxth	r1, r5
 800860a:	fb02 8101 	mla	r1, r2, r1, r8
 800860e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008612:	0c2d      	lsrs	r5, r5, #16
 8008614:	fb02 c505 	mla	r5, r2, r5, ip
 8008618:	b289      	uxth	r1, r1
 800861a:	3301      	adds	r3, #1
 800861c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008620:	429e      	cmp	r6, r3
 8008622:	f840 1b04 	str.w	r1, [r0], #4
 8008626:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800862a:	dcec      	bgt.n	8008606 <__multadd+0x12>
 800862c:	f1b8 0f00 	cmp.w	r8, #0
 8008630:	d022      	beq.n	8008678 <__multadd+0x84>
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	42b3      	cmp	r3, r6
 8008636:	dc19      	bgt.n	800866c <__multadd+0x78>
 8008638:	6861      	ldr	r1, [r4, #4]
 800863a:	4638      	mov	r0, r7
 800863c:	3101      	adds	r1, #1
 800863e:	f7ff ff77 	bl	8008530 <_Balloc>
 8008642:	4605      	mov	r5, r0
 8008644:	b928      	cbnz	r0, 8008652 <__multadd+0x5e>
 8008646:	4602      	mov	r2, r0
 8008648:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <__multadd+0x8c>)
 800864a:	480e      	ldr	r0, [pc, #56]	; (8008684 <__multadd+0x90>)
 800864c:	21b5      	movs	r1, #181	; 0xb5
 800864e:	f000 fd13 	bl	8009078 <__assert_func>
 8008652:	6922      	ldr	r2, [r4, #16]
 8008654:	3202      	adds	r2, #2
 8008656:	f104 010c 	add.w	r1, r4, #12
 800865a:	0092      	lsls	r2, r2, #2
 800865c:	300c      	adds	r0, #12
 800865e:	f7ff ff59 	bl	8008514 <memcpy>
 8008662:	4621      	mov	r1, r4
 8008664:	4638      	mov	r0, r7
 8008666:	f7ff ffa3 	bl	80085b0 <_Bfree>
 800866a:	462c      	mov	r4, r5
 800866c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008670:	3601      	adds	r6, #1
 8008672:	f8c3 8014 	str.w	r8, [r3, #20]
 8008676:	6126      	str	r6, [r4, #16]
 8008678:	4620      	mov	r0, r4
 800867a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800867e:	bf00      	nop
 8008680:	08009ff7 	.word	0x08009ff7
 8008684:	0800a008 	.word	0x0800a008

08008688 <__hi0bits>:
 8008688:	0c03      	lsrs	r3, r0, #16
 800868a:	041b      	lsls	r3, r3, #16
 800868c:	b9d3      	cbnz	r3, 80086c4 <__hi0bits+0x3c>
 800868e:	0400      	lsls	r0, r0, #16
 8008690:	2310      	movs	r3, #16
 8008692:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008696:	bf04      	itt	eq
 8008698:	0200      	lsleq	r0, r0, #8
 800869a:	3308      	addeq	r3, #8
 800869c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086a0:	bf04      	itt	eq
 80086a2:	0100      	lsleq	r0, r0, #4
 80086a4:	3304      	addeq	r3, #4
 80086a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086aa:	bf04      	itt	eq
 80086ac:	0080      	lsleq	r0, r0, #2
 80086ae:	3302      	addeq	r3, #2
 80086b0:	2800      	cmp	r0, #0
 80086b2:	db05      	blt.n	80086c0 <__hi0bits+0x38>
 80086b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086b8:	f103 0301 	add.w	r3, r3, #1
 80086bc:	bf08      	it	eq
 80086be:	2320      	moveq	r3, #32
 80086c0:	4618      	mov	r0, r3
 80086c2:	4770      	bx	lr
 80086c4:	2300      	movs	r3, #0
 80086c6:	e7e4      	b.n	8008692 <__hi0bits+0xa>

080086c8 <__lo0bits>:
 80086c8:	6803      	ldr	r3, [r0, #0]
 80086ca:	f013 0207 	ands.w	r2, r3, #7
 80086ce:	4601      	mov	r1, r0
 80086d0:	d00b      	beq.n	80086ea <__lo0bits+0x22>
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d424      	bmi.n	8008720 <__lo0bits+0x58>
 80086d6:	0798      	lsls	r0, r3, #30
 80086d8:	bf49      	itett	mi
 80086da:	085b      	lsrmi	r3, r3, #1
 80086dc:	089b      	lsrpl	r3, r3, #2
 80086de:	2001      	movmi	r0, #1
 80086e0:	600b      	strmi	r3, [r1, #0]
 80086e2:	bf5c      	itt	pl
 80086e4:	600b      	strpl	r3, [r1, #0]
 80086e6:	2002      	movpl	r0, #2
 80086e8:	4770      	bx	lr
 80086ea:	b298      	uxth	r0, r3
 80086ec:	b9b0      	cbnz	r0, 800871c <__lo0bits+0x54>
 80086ee:	0c1b      	lsrs	r3, r3, #16
 80086f0:	2010      	movs	r0, #16
 80086f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086f6:	bf04      	itt	eq
 80086f8:	0a1b      	lsreq	r3, r3, #8
 80086fa:	3008      	addeq	r0, #8
 80086fc:	071a      	lsls	r2, r3, #28
 80086fe:	bf04      	itt	eq
 8008700:	091b      	lsreq	r3, r3, #4
 8008702:	3004      	addeq	r0, #4
 8008704:	079a      	lsls	r2, r3, #30
 8008706:	bf04      	itt	eq
 8008708:	089b      	lsreq	r3, r3, #2
 800870a:	3002      	addeq	r0, #2
 800870c:	07da      	lsls	r2, r3, #31
 800870e:	d403      	bmi.n	8008718 <__lo0bits+0x50>
 8008710:	085b      	lsrs	r3, r3, #1
 8008712:	f100 0001 	add.w	r0, r0, #1
 8008716:	d005      	beq.n	8008724 <__lo0bits+0x5c>
 8008718:	600b      	str	r3, [r1, #0]
 800871a:	4770      	bx	lr
 800871c:	4610      	mov	r0, r2
 800871e:	e7e8      	b.n	80086f2 <__lo0bits+0x2a>
 8008720:	2000      	movs	r0, #0
 8008722:	4770      	bx	lr
 8008724:	2020      	movs	r0, #32
 8008726:	4770      	bx	lr

08008728 <__i2b>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	2101      	movs	r1, #1
 800872e:	f7ff feff 	bl	8008530 <_Balloc>
 8008732:	4602      	mov	r2, r0
 8008734:	b928      	cbnz	r0, 8008742 <__i2b+0x1a>
 8008736:	4b05      	ldr	r3, [pc, #20]	; (800874c <__i2b+0x24>)
 8008738:	4805      	ldr	r0, [pc, #20]	; (8008750 <__i2b+0x28>)
 800873a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800873e:	f000 fc9b 	bl	8009078 <__assert_func>
 8008742:	2301      	movs	r3, #1
 8008744:	6144      	str	r4, [r0, #20]
 8008746:	6103      	str	r3, [r0, #16]
 8008748:	bd10      	pop	{r4, pc}
 800874a:	bf00      	nop
 800874c:	08009ff7 	.word	0x08009ff7
 8008750:	0800a008 	.word	0x0800a008

08008754 <__multiply>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	4614      	mov	r4, r2
 800875a:	690a      	ldr	r2, [r1, #16]
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	429a      	cmp	r2, r3
 8008760:	bfb8      	it	lt
 8008762:	460b      	movlt	r3, r1
 8008764:	460d      	mov	r5, r1
 8008766:	bfbc      	itt	lt
 8008768:	4625      	movlt	r5, r4
 800876a:	461c      	movlt	r4, r3
 800876c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008770:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008774:	68ab      	ldr	r3, [r5, #8]
 8008776:	6869      	ldr	r1, [r5, #4]
 8008778:	eb0a 0709 	add.w	r7, sl, r9
 800877c:	42bb      	cmp	r3, r7
 800877e:	b085      	sub	sp, #20
 8008780:	bfb8      	it	lt
 8008782:	3101      	addlt	r1, #1
 8008784:	f7ff fed4 	bl	8008530 <_Balloc>
 8008788:	b930      	cbnz	r0, 8008798 <__multiply+0x44>
 800878a:	4602      	mov	r2, r0
 800878c:	4b42      	ldr	r3, [pc, #264]	; (8008898 <__multiply+0x144>)
 800878e:	4843      	ldr	r0, [pc, #268]	; (800889c <__multiply+0x148>)
 8008790:	f240 115d 	movw	r1, #349	; 0x15d
 8008794:	f000 fc70 	bl	8009078 <__assert_func>
 8008798:	f100 0614 	add.w	r6, r0, #20
 800879c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80087a0:	4633      	mov	r3, r6
 80087a2:	2200      	movs	r2, #0
 80087a4:	4543      	cmp	r3, r8
 80087a6:	d31e      	bcc.n	80087e6 <__multiply+0x92>
 80087a8:	f105 0c14 	add.w	ip, r5, #20
 80087ac:	f104 0314 	add.w	r3, r4, #20
 80087b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80087b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80087b8:	9202      	str	r2, [sp, #8]
 80087ba:	ebac 0205 	sub.w	r2, ip, r5
 80087be:	3a15      	subs	r2, #21
 80087c0:	f022 0203 	bic.w	r2, r2, #3
 80087c4:	3204      	adds	r2, #4
 80087c6:	f105 0115 	add.w	r1, r5, #21
 80087ca:	458c      	cmp	ip, r1
 80087cc:	bf38      	it	cc
 80087ce:	2204      	movcc	r2, #4
 80087d0:	9201      	str	r2, [sp, #4]
 80087d2:	9a02      	ldr	r2, [sp, #8]
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d808      	bhi.n	80087ec <__multiply+0x98>
 80087da:	2f00      	cmp	r7, #0
 80087dc:	dc55      	bgt.n	800888a <__multiply+0x136>
 80087de:	6107      	str	r7, [r0, #16]
 80087e0:	b005      	add	sp, #20
 80087e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e6:	f843 2b04 	str.w	r2, [r3], #4
 80087ea:	e7db      	b.n	80087a4 <__multiply+0x50>
 80087ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80087f0:	f1ba 0f00 	cmp.w	sl, #0
 80087f4:	d020      	beq.n	8008838 <__multiply+0xe4>
 80087f6:	f105 0e14 	add.w	lr, r5, #20
 80087fa:	46b1      	mov	r9, r6
 80087fc:	2200      	movs	r2, #0
 80087fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008802:	f8d9 b000 	ldr.w	fp, [r9]
 8008806:	b2a1      	uxth	r1, r4
 8008808:	fa1f fb8b 	uxth.w	fp, fp
 800880c:	fb0a b101 	mla	r1, sl, r1, fp
 8008810:	4411      	add	r1, r2
 8008812:	f8d9 2000 	ldr.w	r2, [r9]
 8008816:	0c24      	lsrs	r4, r4, #16
 8008818:	0c12      	lsrs	r2, r2, #16
 800881a:	fb0a 2404 	mla	r4, sl, r4, r2
 800881e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008822:	b289      	uxth	r1, r1
 8008824:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008828:	45f4      	cmp	ip, lr
 800882a:	f849 1b04 	str.w	r1, [r9], #4
 800882e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008832:	d8e4      	bhi.n	80087fe <__multiply+0xaa>
 8008834:	9901      	ldr	r1, [sp, #4]
 8008836:	5072      	str	r2, [r6, r1]
 8008838:	9a03      	ldr	r2, [sp, #12]
 800883a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800883e:	3304      	adds	r3, #4
 8008840:	f1b9 0f00 	cmp.w	r9, #0
 8008844:	d01f      	beq.n	8008886 <__multiply+0x132>
 8008846:	6834      	ldr	r4, [r6, #0]
 8008848:	f105 0114 	add.w	r1, r5, #20
 800884c:	46b6      	mov	lr, r6
 800884e:	f04f 0a00 	mov.w	sl, #0
 8008852:	880a      	ldrh	r2, [r1, #0]
 8008854:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008858:	fb09 b202 	mla	r2, r9, r2, fp
 800885c:	4492      	add	sl, r2
 800885e:	b2a4      	uxth	r4, r4
 8008860:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008864:	f84e 4b04 	str.w	r4, [lr], #4
 8008868:	f851 4b04 	ldr.w	r4, [r1], #4
 800886c:	f8be 2000 	ldrh.w	r2, [lr]
 8008870:	0c24      	lsrs	r4, r4, #16
 8008872:	fb09 2404 	mla	r4, r9, r4, r2
 8008876:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800887a:	458c      	cmp	ip, r1
 800887c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008880:	d8e7      	bhi.n	8008852 <__multiply+0xfe>
 8008882:	9a01      	ldr	r2, [sp, #4]
 8008884:	50b4      	str	r4, [r6, r2]
 8008886:	3604      	adds	r6, #4
 8008888:	e7a3      	b.n	80087d2 <__multiply+0x7e>
 800888a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1a5      	bne.n	80087de <__multiply+0x8a>
 8008892:	3f01      	subs	r7, #1
 8008894:	e7a1      	b.n	80087da <__multiply+0x86>
 8008896:	bf00      	nop
 8008898:	08009ff7 	.word	0x08009ff7
 800889c:	0800a008 	.word	0x0800a008

080088a0 <__pow5mult>:
 80088a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a4:	4615      	mov	r5, r2
 80088a6:	f012 0203 	ands.w	r2, r2, #3
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	d007      	beq.n	80088c0 <__pow5mult+0x20>
 80088b0:	4c25      	ldr	r4, [pc, #148]	; (8008948 <__pow5mult+0xa8>)
 80088b2:	3a01      	subs	r2, #1
 80088b4:	2300      	movs	r3, #0
 80088b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ba:	f7ff fe9b 	bl	80085f4 <__multadd>
 80088be:	4607      	mov	r7, r0
 80088c0:	10ad      	asrs	r5, r5, #2
 80088c2:	d03d      	beq.n	8008940 <__pow5mult+0xa0>
 80088c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088c6:	b97c      	cbnz	r4, 80088e8 <__pow5mult+0x48>
 80088c8:	2010      	movs	r0, #16
 80088ca:	f7ff fe1b 	bl	8008504 <malloc>
 80088ce:	4602      	mov	r2, r0
 80088d0:	6270      	str	r0, [r6, #36]	; 0x24
 80088d2:	b928      	cbnz	r0, 80088e0 <__pow5mult+0x40>
 80088d4:	4b1d      	ldr	r3, [pc, #116]	; (800894c <__pow5mult+0xac>)
 80088d6:	481e      	ldr	r0, [pc, #120]	; (8008950 <__pow5mult+0xb0>)
 80088d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088dc:	f000 fbcc 	bl	8009078 <__assert_func>
 80088e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088e4:	6004      	str	r4, [r0, #0]
 80088e6:	60c4      	str	r4, [r0, #12]
 80088e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088f0:	b94c      	cbnz	r4, 8008906 <__pow5mult+0x66>
 80088f2:	f240 2171 	movw	r1, #625	; 0x271
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7ff ff16 	bl	8008728 <__i2b>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008902:	4604      	mov	r4, r0
 8008904:	6003      	str	r3, [r0, #0]
 8008906:	f04f 0900 	mov.w	r9, #0
 800890a:	07eb      	lsls	r3, r5, #31
 800890c:	d50a      	bpl.n	8008924 <__pow5mult+0x84>
 800890e:	4639      	mov	r1, r7
 8008910:	4622      	mov	r2, r4
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ff1e 	bl	8008754 <__multiply>
 8008918:	4639      	mov	r1, r7
 800891a:	4680      	mov	r8, r0
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff fe47 	bl	80085b0 <_Bfree>
 8008922:	4647      	mov	r7, r8
 8008924:	106d      	asrs	r5, r5, #1
 8008926:	d00b      	beq.n	8008940 <__pow5mult+0xa0>
 8008928:	6820      	ldr	r0, [r4, #0]
 800892a:	b938      	cbnz	r0, 800893c <__pow5mult+0x9c>
 800892c:	4622      	mov	r2, r4
 800892e:	4621      	mov	r1, r4
 8008930:	4630      	mov	r0, r6
 8008932:	f7ff ff0f 	bl	8008754 <__multiply>
 8008936:	6020      	str	r0, [r4, #0]
 8008938:	f8c0 9000 	str.w	r9, [r0]
 800893c:	4604      	mov	r4, r0
 800893e:	e7e4      	b.n	800890a <__pow5mult+0x6a>
 8008940:	4638      	mov	r0, r7
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	bf00      	nop
 8008948:	0800a158 	.word	0x0800a158
 800894c:	08009f81 	.word	0x08009f81
 8008950:	0800a008 	.word	0x0800a008

08008954 <__lshift>:
 8008954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	460c      	mov	r4, r1
 800895a:	6849      	ldr	r1, [r1, #4]
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	4607      	mov	r7, r0
 8008966:	4691      	mov	r9, r2
 8008968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800896c:	f108 0601 	add.w	r6, r8, #1
 8008970:	42b3      	cmp	r3, r6
 8008972:	db0b      	blt.n	800898c <__lshift+0x38>
 8008974:	4638      	mov	r0, r7
 8008976:	f7ff fddb 	bl	8008530 <_Balloc>
 800897a:	4605      	mov	r5, r0
 800897c:	b948      	cbnz	r0, 8008992 <__lshift+0x3e>
 800897e:	4602      	mov	r2, r0
 8008980:	4b28      	ldr	r3, [pc, #160]	; (8008a24 <__lshift+0xd0>)
 8008982:	4829      	ldr	r0, [pc, #164]	; (8008a28 <__lshift+0xd4>)
 8008984:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008988:	f000 fb76 	bl	8009078 <__assert_func>
 800898c:	3101      	adds	r1, #1
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	e7ee      	b.n	8008970 <__lshift+0x1c>
 8008992:	2300      	movs	r3, #0
 8008994:	f100 0114 	add.w	r1, r0, #20
 8008998:	f100 0210 	add.w	r2, r0, #16
 800899c:	4618      	mov	r0, r3
 800899e:	4553      	cmp	r3, sl
 80089a0:	db33      	blt.n	8008a0a <__lshift+0xb6>
 80089a2:	6920      	ldr	r0, [r4, #16]
 80089a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089a8:	f104 0314 	add.w	r3, r4, #20
 80089ac:	f019 091f 	ands.w	r9, r9, #31
 80089b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089b8:	d02b      	beq.n	8008a12 <__lshift+0xbe>
 80089ba:	f1c9 0e20 	rsb	lr, r9, #32
 80089be:	468a      	mov	sl, r1
 80089c0:	2200      	movs	r2, #0
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	fa00 f009 	lsl.w	r0, r0, r9
 80089c8:	4302      	orrs	r2, r0
 80089ca:	f84a 2b04 	str.w	r2, [sl], #4
 80089ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d2:	459c      	cmp	ip, r3
 80089d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80089d8:	d8f3      	bhi.n	80089c2 <__lshift+0x6e>
 80089da:	ebac 0304 	sub.w	r3, ip, r4
 80089de:	3b15      	subs	r3, #21
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	3304      	adds	r3, #4
 80089e6:	f104 0015 	add.w	r0, r4, #21
 80089ea:	4584      	cmp	ip, r0
 80089ec:	bf38      	it	cc
 80089ee:	2304      	movcc	r3, #4
 80089f0:	50ca      	str	r2, [r1, r3]
 80089f2:	b10a      	cbz	r2, 80089f8 <__lshift+0xa4>
 80089f4:	f108 0602 	add.w	r6, r8, #2
 80089f8:	3e01      	subs	r6, #1
 80089fa:	4638      	mov	r0, r7
 80089fc:	612e      	str	r6, [r5, #16]
 80089fe:	4621      	mov	r1, r4
 8008a00:	f7ff fdd6 	bl	80085b0 <_Bfree>
 8008a04:	4628      	mov	r0, r5
 8008a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a0e:	3301      	adds	r3, #1
 8008a10:	e7c5      	b.n	800899e <__lshift+0x4a>
 8008a12:	3904      	subs	r1, #4
 8008a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a1c:	459c      	cmp	ip, r3
 8008a1e:	d8f9      	bhi.n	8008a14 <__lshift+0xc0>
 8008a20:	e7ea      	b.n	80089f8 <__lshift+0xa4>
 8008a22:	bf00      	nop
 8008a24:	08009ff7 	.word	0x08009ff7
 8008a28:	0800a008 	.word	0x0800a008

08008a2c <__mcmp>:
 8008a2c:	b530      	push	{r4, r5, lr}
 8008a2e:	6902      	ldr	r2, [r0, #16]
 8008a30:	690c      	ldr	r4, [r1, #16]
 8008a32:	1b12      	subs	r2, r2, r4
 8008a34:	d10e      	bne.n	8008a54 <__mcmp+0x28>
 8008a36:	f100 0314 	add.w	r3, r0, #20
 8008a3a:	3114      	adds	r1, #20
 8008a3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a4c:	42a5      	cmp	r5, r4
 8008a4e:	d003      	beq.n	8008a58 <__mcmp+0x2c>
 8008a50:	d305      	bcc.n	8008a5e <__mcmp+0x32>
 8008a52:	2201      	movs	r2, #1
 8008a54:	4610      	mov	r0, r2
 8008a56:	bd30      	pop	{r4, r5, pc}
 8008a58:	4283      	cmp	r3, r0
 8008a5a:	d3f3      	bcc.n	8008a44 <__mcmp+0x18>
 8008a5c:	e7fa      	b.n	8008a54 <__mcmp+0x28>
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	e7f7      	b.n	8008a54 <__mcmp+0x28>

08008a64 <__mdiff>:
 8008a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	460c      	mov	r4, r1
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4620      	mov	r0, r4
 8008a70:	4617      	mov	r7, r2
 8008a72:	f7ff ffdb 	bl	8008a2c <__mcmp>
 8008a76:	1e05      	subs	r5, r0, #0
 8008a78:	d110      	bne.n	8008a9c <__mdiff+0x38>
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff fd57 	bl	8008530 <_Balloc>
 8008a82:	b930      	cbnz	r0, 8008a92 <__mdiff+0x2e>
 8008a84:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <__mdiff+0x108>)
 8008a86:	4602      	mov	r2, r0
 8008a88:	f240 2132 	movw	r1, #562	; 0x232
 8008a8c:	4838      	ldr	r0, [pc, #224]	; (8008b70 <__mdiff+0x10c>)
 8008a8e:	f000 faf3 	bl	8009078 <__assert_func>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	bfa4      	itt	ge
 8008a9e:	463b      	movge	r3, r7
 8008aa0:	4627      	movge	r7, r4
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	bfa6      	itte	ge
 8008aa8:	461c      	movge	r4, r3
 8008aaa:	2500      	movge	r5, #0
 8008aac:	2501      	movlt	r5, #1
 8008aae:	f7ff fd3f 	bl	8008530 <_Balloc>
 8008ab2:	b920      	cbnz	r0, 8008abe <__mdiff+0x5a>
 8008ab4:	4b2d      	ldr	r3, [pc, #180]	; (8008b6c <__mdiff+0x108>)
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008abc:	e7e6      	b.n	8008a8c <__mdiff+0x28>
 8008abe:	693e      	ldr	r6, [r7, #16]
 8008ac0:	60c5      	str	r5, [r0, #12]
 8008ac2:	6925      	ldr	r5, [r4, #16]
 8008ac4:	f107 0114 	add.w	r1, r7, #20
 8008ac8:	f104 0914 	add.w	r9, r4, #20
 8008acc:	f100 0e14 	add.w	lr, r0, #20
 8008ad0:	f107 0210 	add.w	r2, r7, #16
 8008ad4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008ad8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008adc:	46f2      	mov	sl, lr
 8008ade:	2700      	movs	r7, #0
 8008ae0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ae4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ae8:	fa1f f883 	uxth.w	r8, r3
 8008aec:	fa17 f78b 	uxtah	r7, r7, fp
 8008af0:	0c1b      	lsrs	r3, r3, #16
 8008af2:	eba7 0808 	sub.w	r8, r7, r8
 8008af6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008afa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008afe:	fa1f f888 	uxth.w	r8, r8
 8008b02:	141f      	asrs	r7, r3, #16
 8008b04:	454d      	cmp	r5, r9
 8008b06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b0a:	f84a 3b04 	str.w	r3, [sl], #4
 8008b0e:	d8e7      	bhi.n	8008ae0 <__mdiff+0x7c>
 8008b10:	1b2b      	subs	r3, r5, r4
 8008b12:	3b15      	subs	r3, #21
 8008b14:	f023 0303 	bic.w	r3, r3, #3
 8008b18:	3304      	adds	r3, #4
 8008b1a:	3415      	adds	r4, #21
 8008b1c:	42a5      	cmp	r5, r4
 8008b1e:	bf38      	it	cc
 8008b20:	2304      	movcc	r3, #4
 8008b22:	4419      	add	r1, r3
 8008b24:	4473      	add	r3, lr
 8008b26:	469e      	mov	lr, r3
 8008b28:	460d      	mov	r5, r1
 8008b2a:	4565      	cmp	r5, ip
 8008b2c:	d30e      	bcc.n	8008b4c <__mdiff+0xe8>
 8008b2e:	f10c 0203 	add.w	r2, ip, #3
 8008b32:	1a52      	subs	r2, r2, r1
 8008b34:	f022 0203 	bic.w	r2, r2, #3
 8008b38:	3903      	subs	r1, #3
 8008b3a:	458c      	cmp	ip, r1
 8008b3c:	bf38      	it	cc
 8008b3e:	2200      	movcc	r2, #0
 8008b40:	441a      	add	r2, r3
 8008b42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b46:	b17b      	cbz	r3, 8008b68 <__mdiff+0x104>
 8008b48:	6106      	str	r6, [r0, #16]
 8008b4a:	e7a5      	b.n	8008a98 <__mdiff+0x34>
 8008b4c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b50:	fa17 f488 	uxtah	r4, r7, r8
 8008b54:	1422      	asrs	r2, r4, #16
 8008b56:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008b5a:	b2a4      	uxth	r4, r4
 8008b5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008b60:	f84e 4b04 	str.w	r4, [lr], #4
 8008b64:	1417      	asrs	r7, r2, #16
 8008b66:	e7e0      	b.n	8008b2a <__mdiff+0xc6>
 8008b68:	3e01      	subs	r6, #1
 8008b6a:	e7ea      	b.n	8008b42 <__mdiff+0xde>
 8008b6c:	08009ff7 	.word	0x08009ff7
 8008b70:	0800a008 	.word	0x0800a008

08008b74 <__d2b>:
 8008b74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b78:	4689      	mov	r9, r1
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	ec57 6b10 	vmov	r6, r7, d0
 8008b80:	4690      	mov	r8, r2
 8008b82:	f7ff fcd5 	bl	8008530 <_Balloc>
 8008b86:	4604      	mov	r4, r0
 8008b88:	b930      	cbnz	r0, 8008b98 <__d2b+0x24>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4b25      	ldr	r3, [pc, #148]	; (8008c24 <__d2b+0xb0>)
 8008b8e:	4826      	ldr	r0, [pc, #152]	; (8008c28 <__d2b+0xb4>)
 8008b90:	f240 310a 	movw	r1, #778	; 0x30a
 8008b94:	f000 fa70 	bl	8009078 <__assert_func>
 8008b98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ba0:	bb35      	cbnz	r5, 8008bf0 <__d2b+0x7c>
 8008ba2:	2e00      	cmp	r6, #0
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	d028      	beq.n	8008bfa <__d2b+0x86>
 8008ba8:	4668      	mov	r0, sp
 8008baa:	9600      	str	r6, [sp, #0]
 8008bac:	f7ff fd8c 	bl	80086c8 <__lo0bits>
 8008bb0:	9900      	ldr	r1, [sp, #0]
 8008bb2:	b300      	cbz	r0, 8008bf6 <__d2b+0x82>
 8008bb4:	9a01      	ldr	r2, [sp, #4]
 8008bb6:	f1c0 0320 	rsb	r3, r0, #32
 8008bba:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	40c2      	lsrs	r2, r0
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	9201      	str	r2, [sp, #4]
 8008bc6:	9b01      	ldr	r3, [sp, #4]
 8008bc8:	61a3      	str	r3, [r4, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bf14      	ite	ne
 8008bce:	2202      	movne	r2, #2
 8008bd0:	2201      	moveq	r2, #1
 8008bd2:	6122      	str	r2, [r4, #16]
 8008bd4:	b1d5      	cbz	r5, 8008c0c <__d2b+0x98>
 8008bd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bda:	4405      	add	r5, r0
 8008bdc:	f8c9 5000 	str.w	r5, [r9]
 8008be0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008be4:	f8c8 0000 	str.w	r0, [r8]
 8008be8:	4620      	mov	r0, r4
 8008bea:	b003      	add	sp, #12
 8008bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bf4:	e7d5      	b.n	8008ba2 <__d2b+0x2e>
 8008bf6:	6161      	str	r1, [r4, #20]
 8008bf8:	e7e5      	b.n	8008bc6 <__d2b+0x52>
 8008bfa:	a801      	add	r0, sp, #4
 8008bfc:	f7ff fd64 	bl	80086c8 <__lo0bits>
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	6163      	str	r3, [r4, #20]
 8008c04:	2201      	movs	r2, #1
 8008c06:	6122      	str	r2, [r4, #16]
 8008c08:	3020      	adds	r0, #32
 8008c0a:	e7e3      	b.n	8008bd4 <__d2b+0x60>
 8008c0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c14:	f8c9 0000 	str.w	r0, [r9]
 8008c18:	6918      	ldr	r0, [r3, #16]
 8008c1a:	f7ff fd35 	bl	8008688 <__hi0bits>
 8008c1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c22:	e7df      	b.n	8008be4 <__d2b+0x70>
 8008c24:	08009ff7 	.word	0x08009ff7
 8008c28:	0800a008 	.word	0x0800a008

08008c2c <_calloc_r>:
 8008c2c:	b513      	push	{r0, r1, r4, lr}
 8008c2e:	434a      	muls	r2, r1
 8008c30:	4611      	mov	r1, r2
 8008c32:	9201      	str	r2, [sp, #4]
 8008c34:	f000 f85a 	bl	8008cec <_malloc_r>
 8008c38:	4604      	mov	r4, r0
 8008c3a:	b118      	cbz	r0, 8008c44 <_calloc_r+0x18>
 8008c3c:	9a01      	ldr	r2, [sp, #4]
 8008c3e:	2100      	movs	r1, #0
 8008c40:	f7fe f9e2 	bl	8007008 <memset>
 8008c44:	4620      	mov	r0, r4
 8008c46:	b002      	add	sp, #8
 8008c48:	bd10      	pop	{r4, pc}
	...

08008c4c <_free_r>:
 8008c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	d048      	beq.n	8008ce4 <_free_r+0x98>
 8008c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c56:	9001      	str	r0, [sp, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c5e:	bfb8      	it	lt
 8008c60:	18e4      	addlt	r4, r4, r3
 8008c62:	f000 fa65 	bl	8009130 <__malloc_lock>
 8008c66:	4a20      	ldr	r2, [pc, #128]	; (8008ce8 <_free_r+0x9c>)
 8008c68:	9801      	ldr	r0, [sp, #4]
 8008c6a:	6813      	ldr	r3, [r2, #0]
 8008c6c:	4615      	mov	r5, r2
 8008c6e:	b933      	cbnz	r3, 8008c7e <_free_r+0x32>
 8008c70:	6063      	str	r3, [r4, #4]
 8008c72:	6014      	str	r4, [r2, #0]
 8008c74:	b003      	add	sp, #12
 8008c76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c7a:	f000 ba5f 	b.w	800913c <__malloc_unlock>
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	d90b      	bls.n	8008c9a <_free_r+0x4e>
 8008c82:	6821      	ldr	r1, [r4, #0]
 8008c84:	1862      	adds	r2, r4, r1
 8008c86:	4293      	cmp	r3, r2
 8008c88:	bf04      	itt	eq
 8008c8a:	681a      	ldreq	r2, [r3, #0]
 8008c8c:	685b      	ldreq	r3, [r3, #4]
 8008c8e:	6063      	str	r3, [r4, #4]
 8008c90:	bf04      	itt	eq
 8008c92:	1852      	addeq	r2, r2, r1
 8008c94:	6022      	streq	r2, [r4, #0]
 8008c96:	602c      	str	r4, [r5, #0]
 8008c98:	e7ec      	b.n	8008c74 <_free_r+0x28>
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	b10b      	cbz	r3, 8008ca4 <_free_r+0x58>
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	d9fa      	bls.n	8008c9a <_free_r+0x4e>
 8008ca4:	6811      	ldr	r1, [r2, #0]
 8008ca6:	1855      	adds	r5, r2, r1
 8008ca8:	42a5      	cmp	r5, r4
 8008caa:	d10b      	bne.n	8008cc4 <_free_r+0x78>
 8008cac:	6824      	ldr	r4, [r4, #0]
 8008cae:	4421      	add	r1, r4
 8008cb0:	1854      	adds	r4, r2, r1
 8008cb2:	42a3      	cmp	r3, r4
 8008cb4:	6011      	str	r1, [r2, #0]
 8008cb6:	d1dd      	bne.n	8008c74 <_free_r+0x28>
 8008cb8:	681c      	ldr	r4, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	6053      	str	r3, [r2, #4]
 8008cbe:	4421      	add	r1, r4
 8008cc0:	6011      	str	r1, [r2, #0]
 8008cc2:	e7d7      	b.n	8008c74 <_free_r+0x28>
 8008cc4:	d902      	bls.n	8008ccc <_free_r+0x80>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	e7d3      	b.n	8008c74 <_free_r+0x28>
 8008ccc:	6825      	ldr	r5, [r4, #0]
 8008cce:	1961      	adds	r1, r4, r5
 8008cd0:	428b      	cmp	r3, r1
 8008cd2:	bf04      	itt	eq
 8008cd4:	6819      	ldreq	r1, [r3, #0]
 8008cd6:	685b      	ldreq	r3, [r3, #4]
 8008cd8:	6063      	str	r3, [r4, #4]
 8008cda:	bf04      	itt	eq
 8008cdc:	1949      	addeq	r1, r1, r5
 8008cde:	6021      	streq	r1, [r4, #0]
 8008ce0:	6054      	str	r4, [r2, #4]
 8008ce2:	e7c7      	b.n	8008c74 <_free_r+0x28>
 8008ce4:	b003      	add	sp, #12
 8008ce6:	bd30      	pop	{r4, r5, pc}
 8008ce8:	20000244 	.word	0x20000244

08008cec <_malloc_r>:
 8008cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cee:	1ccd      	adds	r5, r1, #3
 8008cf0:	f025 0503 	bic.w	r5, r5, #3
 8008cf4:	3508      	adds	r5, #8
 8008cf6:	2d0c      	cmp	r5, #12
 8008cf8:	bf38      	it	cc
 8008cfa:	250c      	movcc	r5, #12
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	4606      	mov	r6, r0
 8008d00:	db01      	blt.n	8008d06 <_malloc_r+0x1a>
 8008d02:	42a9      	cmp	r1, r5
 8008d04:	d903      	bls.n	8008d0e <_malloc_r+0x22>
 8008d06:	230c      	movs	r3, #12
 8008d08:	6033      	str	r3, [r6, #0]
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d0e:	f000 fa0f 	bl	8009130 <__malloc_lock>
 8008d12:	4921      	ldr	r1, [pc, #132]	; (8008d98 <_malloc_r+0xac>)
 8008d14:	680a      	ldr	r2, [r1, #0]
 8008d16:	4614      	mov	r4, r2
 8008d18:	b99c      	cbnz	r4, 8008d42 <_malloc_r+0x56>
 8008d1a:	4f20      	ldr	r7, [pc, #128]	; (8008d9c <_malloc_r+0xb0>)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	b923      	cbnz	r3, 8008d2a <_malloc_r+0x3e>
 8008d20:	4621      	mov	r1, r4
 8008d22:	4630      	mov	r0, r6
 8008d24:	f000 f998 	bl	8009058 <_sbrk_r>
 8008d28:	6038      	str	r0, [r7, #0]
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f000 f993 	bl	8009058 <_sbrk_r>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d123      	bne.n	8008d7e <_malloc_r+0x92>
 8008d36:	230c      	movs	r3, #12
 8008d38:	6033      	str	r3, [r6, #0]
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f000 f9fe 	bl	800913c <__malloc_unlock>
 8008d40:	e7e3      	b.n	8008d0a <_malloc_r+0x1e>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	1b5b      	subs	r3, r3, r5
 8008d46:	d417      	bmi.n	8008d78 <_malloc_r+0x8c>
 8008d48:	2b0b      	cmp	r3, #11
 8008d4a:	d903      	bls.n	8008d54 <_malloc_r+0x68>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	441c      	add	r4, r3
 8008d50:	6025      	str	r5, [r4, #0]
 8008d52:	e004      	b.n	8008d5e <_malloc_r+0x72>
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	42a2      	cmp	r2, r4
 8008d58:	bf0c      	ite	eq
 8008d5a:	600b      	streq	r3, [r1, #0]
 8008d5c:	6053      	strne	r3, [r2, #4]
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 f9ec 	bl	800913c <__malloc_unlock>
 8008d64:	f104 000b 	add.w	r0, r4, #11
 8008d68:	1d23      	adds	r3, r4, #4
 8008d6a:	f020 0007 	bic.w	r0, r0, #7
 8008d6e:	1ac2      	subs	r2, r0, r3
 8008d70:	d0cc      	beq.n	8008d0c <_malloc_r+0x20>
 8008d72:	1a1b      	subs	r3, r3, r0
 8008d74:	50a3      	str	r3, [r4, r2]
 8008d76:	e7c9      	b.n	8008d0c <_malloc_r+0x20>
 8008d78:	4622      	mov	r2, r4
 8008d7a:	6864      	ldr	r4, [r4, #4]
 8008d7c:	e7cc      	b.n	8008d18 <_malloc_r+0x2c>
 8008d7e:	1cc4      	adds	r4, r0, #3
 8008d80:	f024 0403 	bic.w	r4, r4, #3
 8008d84:	42a0      	cmp	r0, r4
 8008d86:	d0e3      	beq.n	8008d50 <_malloc_r+0x64>
 8008d88:	1a21      	subs	r1, r4, r0
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f000 f964 	bl	8009058 <_sbrk_r>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d1dd      	bne.n	8008d50 <_malloc_r+0x64>
 8008d94:	e7cf      	b.n	8008d36 <_malloc_r+0x4a>
 8008d96:	bf00      	nop
 8008d98:	20000244 	.word	0x20000244
 8008d9c:	20000248 	.word	0x20000248

08008da0 <__ssputs_r>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	688e      	ldr	r6, [r1, #8]
 8008da6:	429e      	cmp	r6, r3
 8008da8:	4682      	mov	sl, r0
 8008daa:	460c      	mov	r4, r1
 8008dac:	4690      	mov	r8, r2
 8008dae:	461f      	mov	r7, r3
 8008db0:	d838      	bhi.n	8008e24 <__ssputs_r+0x84>
 8008db2:	898a      	ldrh	r2, [r1, #12]
 8008db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008db8:	d032      	beq.n	8008e20 <__ssputs_r+0x80>
 8008dba:	6825      	ldr	r5, [r4, #0]
 8008dbc:	6909      	ldr	r1, [r1, #16]
 8008dbe:	eba5 0901 	sub.w	r9, r5, r1
 8008dc2:	6965      	ldr	r5, [r4, #20]
 8008dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dcc:	3301      	adds	r3, #1
 8008dce:	444b      	add	r3, r9
 8008dd0:	106d      	asrs	r5, r5, #1
 8008dd2:	429d      	cmp	r5, r3
 8008dd4:	bf38      	it	cc
 8008dd6:	461d      	movcc	r5, r3
 8008dd8:	0553      	lsls	r3, r2, #21
 8008dda:	d531      	bpl.n	8008e40 <__ssputs_r+0xa0>
 8008ddc:	4629      	mov	r1, r5
 8008dde:	f7ff ff85 	bl	8008cec <_malloc_r>
 8008de2:	4606      	mov	r6, r0
 8008de4:	b950      	cbnz	r0, 8008dfc <__ssputs_r+0x5c>
 8008de6:	230c      	movs	r3, #12
 8008de8:	f8ca 3000 	str.w	r3, [sl]
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfc:	6921      	ldr	r1, [r4, #16]
 8008dfe:	464a      	mov	r2, r9
 8008e00:	f7ff fb88 	bl	8008514 <memcpy>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	6126      	str	r6, [r4, #16]
 8008e12:	6165      	str	r5, [r4, #20]
 8008e14:	444e      	add	r6, r9
 8008e16:	eba5 0509 	sub.w	r5, r5, r9
 8008e1a:	6026      	str	r6, [r4, #0]
 8008e1c:	60a5      	str	r5, [r4, #8]
 8008e1e:	463e      	mov	r6, r7
 8008e20:	42be      	cmp	r6, r7
 8008e22:	d900      	bls.n	8008e26 <__ssputs_r+0x86>
 8008e24:	463e      	mov	r6, r7
 8008e26:	4632      	mov	r2, r6
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	4641      	mov	r1, r8
 8008e2c:	f000 f966 	bl	80090fc <memmove>
 8008e30:	68a3      	ldr	r3, [r4, #8]
 8008e32:	6822      	ldr	r2, [r4, #0]
 8008e34:	1b9b      	subs	r3, r3, r6
 8008e36:	4432      	add	r2, r6
 8008e38:	60a3      	str	r3, [r4, #8]
 8008e3a:	6022      	str	r2, [r4, #0]
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e7db      	b.n	8008df8 <__ssputs_r+0x58>
 8008e40:	462a      	mov	r2, r5
 8008e42:	f000 f981 	bl	8009148 <_realloc_r>
 8008e46:	4606      	mov	r6, r0
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d1e1      	bne.n	8008e10 <__ssputs_r+0x70>
 8008e4c:	6921      	ldr	r1, [r4, #16]
 8008e4e:	4650      	mov	r0, sl
 8008e50:	f7ff fefc 	bl	8008c4c <_free_r>
 8008e54:	e7c7      	b.n	8008de6 <__ssputs_r+0x46>
	...

08008e58 <_svfiprintf_r>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	4698      	mov	r8, r3
 8008e5e:	898b      	ldrh	r3, [r1, #12]
 8008e60:	061b      	lsls	r3, r3, #24
 8008e62:	b09d      	sub	sp, #116	; 0x74
 8008e64:	4607      	mov	r7, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	d50e      	bpl.n	8008e8a <_svfiprintf_r+0x32>
 8008e6c:	690b      	ldr	r3, [r1, #16]
 8008e6e:	b963      	cbnz	r3, 8008e8a <_svfiprintf_r+0x32>
 8008e70:	2140      	movs	r1, #64	; 0x40
 8008e72:	f7ff ff3b 	bl	8008cec <_malloc_r>
 8008e76:	6028      	str	r0, [r5, #0]
 8008e78:	6128      	str	r0, [r5, #16]
 8008e7a:	b920      	cbnz	r0, 8008e86 <_svfiprintf_r+0x2e>
 8008e7c:	230c      	movs	r3, #12
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	e0d1      	b.n	800902a <_svfiprintf_r+0x1d2>
 8008e86:	2340      	movs	r3, #64	; 0x40
 8008e88:	616b      	str	r3, [r5, #20]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8e:	2320      	movs	r3, #32
 8008e90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e98:	2330      	movs	r3, #48	; 0x30
 8008e9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009044 <_svfiprintf_r+0x1ec>
 8008e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ea2:	f04f 0901 	mov.w	r9, #1
 8008ea6:	4623      	mov	r3, r4
 8008ea8:	469a      	mov	sl, r3
 8008eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eae:	b10a      	cbz	r2, 8008eb4 <_svfiprintf_r+0x5c>
 8008eb0:	2a25      	cmp	r2, #37	; 0x25
 8008eb2:	d1f9      	bne.n	8008ea8 <_svfiprintf_r+0x50>
 8008eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb8:	d00b      	beq.n	8008ed2 <_svfiprintf_r+0x7a>
 8008eba:	465b      	mov	r3, fp
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff ff6d 	bl	8008da0 <__ssputs_r>
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	f000 80aa 	beq.w	8009020 <_svfiprintf_r+0x1c8>
 8008ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ece:	445a      	add	r2, fp
 8008ed0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 80a2 	beq.w	8009020 <_svfiprintf_r+0x1c8>
 8008edc:	2300      	movs	r3, #0
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee6:	f10a 0a01 	add.w	sl, sl, #1
 8008eea:	9304      	str	r3, [sp, #16]
 8008eec:	9307      	str	r3, [sp, #28]
 8008eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef4:	4654      	mov	r4, sl
 8008ef6:	2205      	movs	r2, #5
 8008ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efc:	4851      	ldr	r0, [pc, #324]	; (8009044 <_svfiprintf_r+0x1ec>)
 8008efe:	f7f7 f9a7 	bl	8000250 <memchr>
 8008f02:	9a04      	ldr	r2, [sp, #16]
 8008f04:	b9d8      	cbnz	r0, 8008f3e <_svfiprintf_r+0xe6>
 8008f06:	06d0      	lsls	r0, r2, #27
 8008f08:	bf44      	itt	mi
 8008f0a:	2320      	movmi	r3, #32
 8008f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f10:	0711      	lsls	r1, r2, #28
 8008f12:	bf44      	itt	mi
 8008f14:	232b      	movmi	r3, #43	; 0x2b
 8008f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f20:	d015      	beq.n	8008f4e <_svfiprintf_r+0xf6>
 8008f22:	9a07      	ldr	r2, [sp, #28]
 8008f24:	4654      	mov	r4, sl
 8008f26:	2000      	movs	r0, #0
 8008f28:	f04f 0c0a 	mov.w	ip, #10
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f32:	3b30      	subs	r3, #48	; 0x30
 8008f34:	2b09      	cmp	r3, #9
 8008f36:	d94e      	bls.n	8008fd6 <_svfiprintf_r+0x17e>
 8008f38:	b1b0      	cbz	r0, 8008f68 <_svfiprintf_r+0x110>
 8008f3a:	9207      	str	r2, [sp, #28]
 8008f3c:	e014      	b.n	8008f68 <_svfiprintf_r+0x110>
 8008f3e:	eba0 0308 	sub.w	r3, r0, r8
 8008f42:	fa09 f303 	lsl.w	r3, r9, r3
 8008f46:	4313      	orrs	r3, r2
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	46a2      	mov	sl, r4
 8008f4c:	e7d2      	b.n	8008ef4 <_svfiprintf_r+0x9c>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	1d19      	adds	r1, r3, #4
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	9103      	str	r1, [sp, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bfbb      	ittet	lt
 8008f5a:	425b      	neglt	r3, r3
 8008f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f60:	9307      	strge	r3, [sp, #28]
 8008f62:	9307      	strlt	r3, [sp, #28]
 8008f64:	bfb8      	it	lt
 8008f66:	9204      	strlt	r2, [sp, #16]
 8008f68:	7823      	ldrb	r3, [r4, #0]
 8008f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f6c:	d10c      	bne.n	8008f88 <_svfiprintf_r+0x130>
 8008f6e:	7863      	ldrb	r3, [r4, #1]
 8008f70:	2b2a      	cmp	r3, #42	; 0x2a
 8008f72:	d135      	bne.n	8008fe0 <_svfiprintf_r+0x188>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	1d1a      	adds	r2, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	9203      	str	r2, [sp, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bfb8      	it	lt
 8008f80:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f84:	3402      	adds	r4, #2
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009054 <_svfiprintf_r+0x1fc>
 8008f8c:	7821      	ldrb	r1, [r4, #0]
 8008f8e:	2203      	movs	r2, #3
 8008f90:	4650      	mov	r0, sl
 8008f92:	f7f7 f95d 	bl	8000250 <memchr>
 8008f96:	b140      	cbz	r0, 8008faa <_svfiprintf_r+0x152>
 8008f98:	2340      	movs	r3, #64	; 0x40
 8008f9a:	eba0 000a 	sub.w	r0, r0, sl
 8008f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	4303      	orrs	r3, r0
 8008fa6:	3401      	adds	r4, #1
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fae:	4826      	ldr	r0, [pc, #152]	; (8009048 <_svfiprintf_r+0x1f0>)
 8008fb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb4:	2206      	movs	r2, #6
 8008fb6:	f7f7 f94b 	bl	8000250 <memchr>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d038      	beq.n	8009030 <_svfiprintf_r+0x1d8>
 8008fbe:	4b23      	ldr	r3, [pc, #140]	; (800904c <_svfiprintf_r+0x1f4>)
 8008fc0:	bb1b      	cbnz	r3, 800900a <_svfiprintf_r+0x1b2>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	3307      	adds	r3, #7
 8008fc6:	f023 0307 	bic.w	r3, r3, #7
 8008fca:	3308      	adds	r3, #8
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	4433      	add	r3, r6
 8008fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd4:	e767      	b.n	8008ea6 <_svfiprintf_r+0x4e>
 8008fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fda:	460c      	mov	r4, r1
 8008fdc:	2001      	movs	r0, #1
 8008fde:	e7a5      	b.n	8008f2c <_svfiprintf_r+0xd4>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	3401      	adds	r4, #1
 8008fe4:	9305      	str	r3, [sp, #20]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	f04f 0c0a 	mov.w	ip, #10
 8008fec:	4620      	mov	r0, r4
 8008fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff2:	3a30      	subs	r2, #48	; 0x30
 8008ff4:	2a09      	cmp	r2, #9
 8008ff6:	d903      	bls.n	8009000 <_svfiprintf_r+0x1a8>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0c5      	beq.n	8008f88 <_svfiprintf_r+0x130>
 8008ffc:	9105      	str	r1, [sp, #20]
 8008ffe:	e7c3      	b.n	8008f88 <_svfiprintf_r+0x130>
 8009000:	fb0c 2101 	mla	r1, ip, r1, r2
 8009004:	4604      	mov	r4, r0
 8009006:	2301      	movs	r3, #1
 8009008:	e7f0      	b.n	8008fec <_svfiprintf_r+0x194>
 800900a:	ab03      	add	r3, sp, #12
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	462a      	mov	r2, r5
 8009010:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <_svfiprintf_r+0x1f8>)
 8009012:	a904      	add	r1, sp, #16
 8009014:	4638      	mov	r0, r7
 8009016:	f7fe f88f 	bl	8007138 <_printf_float>
 800901a:	1c42      	adds	r2, r0, #1
 800901c:	4606      	mov	r6, r0
 800901e:	d1d6      	bne.n	8008fce <_svfiprintf_r+0x176>
 8009020:	89ab      	ldrh	r3, [r5, #12]
 8009022:	065b      	lsls	r3, r3, #25
 8009024:	f53f af2c 	bmi.w	8008e80 <_svfiprintf_r+0x28>
 8009028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800902a:	b01d      	add	sp, #116	; 0x74
 800902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009030:	ab03      	add	r3, sp, #12
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	462a      	mov	r2, r5
 8009036:	4b06      	ldr	r3, [pc, #24]	; (8009050 <_svfiprintf_r+0x1f8>)
 8009038:	a904      	add	r1, sp, #16
 800903a:	4638      	mov	r0, r7
 800903c:	f7fe fb08 	bl	8007650 <_printf_i>
 8009040:	e7eb      	b.n	800901a <_svfiprintf_r+0x1c2>
 8009042:	bf00      	nop
 8009044:	0800a164 	.word	0x0800a164
 8009048:	0800a16e 	.word	0x0800a16e
 800904c:	08007139 	.word	0x08007139
 8009050:	08008da1 	.word	0x08008da1
 8009054:	0800a16a 	.word	0x0800a16a

08009058 <_sbrk_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4d06      	ldr	r5, [pc, #24]	; (8009074 <_sbrk_r+0x1c>)
 800905c:	2300      	movs	r3, #0
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	602b      	str	r3, [r5, #0]
 8009064:	f7f8 fb32 	bl	80016cc <_sbrk>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_sbrk_r+0x1a>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_sbrk_r+0x1a>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20000564 	.word	0x20000564

08009078 <__assert_func>:
 8009078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800907a:	4614      	mov	r4, r2
 800907c:	461a      	mov	r2, r3
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <__assert_func+0x2c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4605      	mov	r5, r0
 8009084:	68d8      	ldr	r0, [r3, #12]
 8009086:	b14c      	cbz	r4, 800909c <__assert_func+0x24>
 8009088:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <__assert_func+0x30>)
 800908a:	9100      	str	r1, [sp, #0]
 800908c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009090:	4906      	ldr	r1, [pc, #24]	; (80090ac <__assert_func+0x34>)
 8009092:	462b      	mov	r3, r5
 8009094:	f000 f80e 	bl	80090b4 <fiprintf>
 8009098:	f000 faa4 	bl	80095e4 <abort>
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <__assert_func+0x38>)
 800909e:	461c      	mov	r4, r3
 80090a0:	e7f3      	b.n	800908a <__assert_func+0x12>
 80090a2:	bf00      	nop
 80090a4:	2000003c 	.word	0x2000003c
 80090a8:	0800a175 	.word	0x0800a175
 80090ac:	0800a182 	.word	0x0800a182
 80090b0:	0800a1b0 	.word	0x0800a1b0

080090b4 <fiprintf>:
 80090b4:	b40e      	push	{r1, r2, r3}
 80090b6:	b503      	push	{r0, r1, lr}
 80090b8:	4601      	mov	r1, r0
 80090ba:	ab03      	add	r3, sp, #12
 80090bc:	4805      	ldr	r0, [pc, #20]	; (80090d4 <fiprintf+0x20>)
 80090be:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c2:	6800      	ldr	r0, [r0, #0]
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	f000 f88f 	bl	80091e8 <_vfiprintf_r>
 80090ca:	b002      	add	sp, #8
 80090cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d0:	b003      	add	sp, #12
 80090d2:	4770      	bx	lr
 80090d4:	2000003c 	.word	0x2000003c

080090d8 <__ascii_mbtowc>:
 80090d8:	b082      	sub	sp, #8
 80090da:	b901      	cbnz	r1, 80090de <__ascii_mbtowc+0x6>
 80090dc:	a901      	add	r1, sp, #4
 80090de:	b142      	cbz	r2, 80090f2 <__ascii_mbtowc+0x1a>
 80090e0:	b14b      	cbz	r3, 80090f6 <__ascii_mbtowc+0x1e>
 80090e2:	7813      	ldrb	r3, [r2, #0]
 80090e4:	600b      	str	r3, [r1, #0]
 80090e6:	7812      	ldrb	r2, [r2, #0]
 80090e8:	1e10      	subs	r0, r2, #0
 80090ea:	bf18      	it	ne
 80090ec:	2001      	movne	r0, #1
 80090ee:	b002      	add	sp, #8
 80090f0:	4770      	bx	lr
 80090f2:	4610      	mov	r0, r2
 80090f4:	e7fb      	b.n	80090ee <__ascii_mbtowc+0x16>
 80090f6:	f06f 0001 	mvn.w	r0, #1
 80090fa:	e7f8      	b.n	80090ee <__ascii_mbtowc+0x16>

080090fc <memmove>:
 80090fc:	4288      	cmp	r0, r1
 80090fe:	b510      	push	{r4, lr}
 8009100:	eb01 0402 	add.w	r4, r1, r2
 8009104:	d902      	bls.n	800910c <memmove+0x10>
 8009106:	4284      	cmp	r4, r0
 8009108:	4623      	mov	r3, r4
 800910a:	d807      	bhi.n	800911c <memmove+0x20>
 800910c:	1e43      	subs	r3, r0, #1
 800910e:	42a1      	cmp	r1, r4
 8009110:	d008      	beq.n	8009124 <memmove+0x28>
 8009112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800911a:	e7f8      	b.n	800910e <memmove+0x12>
 800911c:	4402      	add	r2, r0
 800911e:	4601      	mov	r1, r0
 8009120:	428a      	cmp	r2, r1
 8009122:	d100      	bne.n	8009126 <memmove+0x2a>
 8009124:	bd10      	pop	{r4, pc}
 8009126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800912a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800912e:	e7f7      	b.n	8009120 <memmove+0x24>

08009130 <__malloc_lock>:
 8009130:	4801      	ldr	r0, [pc, #4]	; (8009138 <__malloc_lock+0x8>)
 8009132:	f000 bc17 	b.w	8009964 <__retarget_lock_acquire_recursive>
 8009136:	bf00      	nop
 8009138:	2000056c 	.word	0x2000056c

0800913c <__malloc_unlock>:
 800913c:	4801      	ldr	r0, [pc, #4]	; (8009144 <__malloc_unlock+0x8>)
 800913e:	f000 bc12 	b.w	8009966 <__retarget_lock_release_recursive>
 8009142:	bf00      	nop
 8009144:	2000056c 	.word	0x2000056c

08009148 <_realloc_r>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	4607      	mov	r7, r0
 800914c:	4614      	mov	r4, r2
 800914e:	460e      	mov	r6, r1
 8009150:	b921      	cbnz	r1, 800915c <_realloc_r+0x14>
 8009152:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009156:	4611      	mov	r1, r2
 8009158:	f7ff bdc8 	b.w	8008cec <_malloc_r>
 800915c:	b922      	cbnz	r2, 8009168 <_realloc_r+0x20>
 800915e:	f7ff fd75 	bl	8008c4c <_free_r>
 8009162:	4625      	mov	r5, r4
 8009164:	4628      	mov	r0, r5
 8009166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009168:	f000 fc62 	bl	8009a30 <_malloc_usable_size_r>
 800916c:	42a0      	cmp	r0, r4
 800916e:	d20f      	bcs.n	8009190 <_realloc_r+0x48>
 8009170:	4621      	mov	r1, r4
 8009172:	4638      	mov	r0, r7
 8009174:	f7ff fdba 	bl	8008cec <_malloc_r>
 8009178:	4605      	mov	r5, r0
 800917a:	2800      	cmp	r0, #0
 800917c:	d0f2      	beq.n	8009164 <_realloc_r+0x1c>
 800917e:	4631      	mov	r1, r6
 8009180:	4622      	mov	r2, r4
 8009182:	f7ff f9c7 	bl	8008514 <memcpy>
 8009186:	4631      	mov	r1, r6
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff fd5f 	bl	8008c4c <_free_r>
 800918e:	e7e9      	b.n	8009164 <_realloc_r+0x1c>
 8009190:	4635      	mov	r5, r6
 8009192:	e7e7      	b.n	8009164 <_realloc_r+0x1c>

08009194 <__sfputc_r>:
 8009194:	6893      	ldr	r3, [r2, #8]
 8009196:	3b01      	subs	r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	b410      	push	{r4}
 800919c:	6093      	str	r3, [r2, #8]
 800919e:	da08      	bge.n	80091b2 <__sfputc_r+0x1e>
 80091a0:	6994      	ldr	r4, [r2, #24]
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	db01      	blt.n	80091aa <__sfputc_r+0x16>
 80091a6:	290a      	cmp	r1, #10
 80091a8:	d103      	bne.n	80091b2 <__sfputc_r+0x1e>
 80091aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ae:	f000 b94b 	b.w	8009448 <__swbuf_r>
 80091b2:	6813      	ldr	r3, [r2, #0]
 80091b4:	1c58      	adds	r0, r3, #1
 80091b6:	6010      	str	r0, [r2, #0]
 80091b8:	7019      	strb	r1, [r3, #0]
 80091ba:	4608      	mov	r0, r1
 80091bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <__sfputs_r>:
 80091c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c4:	4606      	mov	r6, r0
 80091c6:	460f      	mov	r7, r1
 80091c8:	4614      	mov	r4, r2
 80091ca:	18d5      	adds	r5, r2, r3
 80091cc:	42ac      	cmp	r4, r5
 80091ce:	d101      	bne.n	80091d4 <__sfputs_r+0x12>
 80091d0:	2000      	movs	r0, #0
 80091d2:	e007      	b.n	80091e4 <__sfputs_r+0x22>
 80091d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d8:	463a      	mov	r2, r7
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ffda 	bl	8009194 <__sfputc_r>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d1f3      	bne.n	80091cc <__sfputs_r+0xa>
 80091e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091e8 <_vfiprintf_r>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	460d      	mov	r5, r1
 80091ee:	b09d      	sub	sp, #116	; 0x74
 80091f0:	4614      	mov	r4, r2
 80091f2:	4698      	mov	r8, r3
 80091f4:	4606      	mov	r6, r0
 80091f6:	b118      	cbz	r0, 8009200 <_vfiprintf_r+0x18>
 80091f8:	6983      	ldr	r3, [r0, #24]
 80091fa:	b90b      	cbnz	r3, 8009200 <_vfiprintf_r+0x18>
 80091fc:	f000 fb14 	bl	8009828 <__sinit>
 8009200:	4b89      	ldr	r3, [pc, #548]	; (8009428 <_vfiprintf_r+0x240>)
 8009202:	429d      	cmp	r5, r3
 8009204:	d11b      	bne.n	800923e <_vfiprintf_r+0x56>
 8009206:	6875      	ldr	r5, [r6, #4]
 8009208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800920a:	07d9      	lsls	r1, r3, #31
 800920c:	d405      	bmi.n	800921a <_vfiprintf_r+0x32>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	059a      	lsls	r2, r3, #22
 8009212:	d402      	bmi.n	800921a <_vfiprintf_r+0x32>
 8009214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009216:	f000 fba5 	bl	8009964 <__retarget_lock_acquire_recursive>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	071b      	lsls	r3, r3, #28
 800921e:	d501      	bpl.n	8009224 <_vfiprintf_r+0x3c>
 8009220:	692b      	ldr	r3, [r5, #16]
 8009222:	b9eb      	cbnz	r3, 8009260 <_vfiprintf_r+0x78>
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f000 f96e 	bl	8009508 <__swsetup_r>
 800922c:	b1c0      	cbz	r0, 8009260 <_vfiprintf_r+0x78>
 800922e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009230:	07dc      	lsls	r4, r3, #31
 8009232:	d50e      	bpl.n	8009252 <_vfiprintf_r+0x6a>
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	b01d      	add	sp, #116	; 0x74
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	4b7b      	ldr	r3, [pc, #492]	; (800942c <_vfiprintf_r+0x244>)
 8009240:	429d      	cmp	r5, r3
 8009242:	d101      	bne.n	8009248 <_vfiprintf_r+0x60>
 8009244:	68b5      	ldr	r5, [r6, #8]
 8009246:	e7df      	b.n	8009208 <_vfiprintf_r+0x20>
 8009248:	4b79      	ldr	r3, [pc, #484]	; (8009430 <_vfiprintf_r+0x248>)
 800924a:	429d      	cmp	r5, r3
 800924c:	bf08      	it	eq
 800924e:	68f5      	ldreq	r5, [r6, #12]
 8009250:	e7da      	b.n	8009208 <_vfiprintf_r+0x20>
 8009252:	89ab      	ldrh	r3, [r5, #12]
 8009254:	0598      	lsls	r0, r3, #22
 8009256:	d4ed      	bmi.n	8009234 <_vfiprintf_r+0x4c>
 8009258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800925a:	f000 fb84 	bl	8009966 <__retarget_lock_release_recursive>
 800925e:	e7e9      	b.n	8009234 <_vfiprintf_r+0x4c>
 8009260:	2300      	movs	r3, #0
 8009262:	9309      	str	r3, [sp, #36]	; 0x24
 8009264:	2320      	movs	r3, #32
 8009266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800926a:	f8cd 800c 	str.w	r8, [sp, #12]
 800926e:	2330      	movs	r3, #48	; 0x30
 8009270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009434 <_vfiprintf_r+0x24c>
 8009274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009278:	f04f 0901 	mov.w	r9, #1
 800927c:	4623      	mov	r3, r4
 800927e:	469a      	mov	sl, r3
 8009280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009284:	b10a      	cbz	r2, 800928a <_vfiprintf_r+0xa2>
 8009286:	2a25      	cmp	r2, #37	; 0x25
 8009288:	d1f9      	bne.n	800927e <_vfiprintf_r+0x96>
 800928a:	ebba 0b04 	subs.w	fp, sl, r4
 800928e:	d00b      	beq.n	80092a8 <_vfiprintf_r+0xc0>
 8009290:	465b      	mov	r3, fp
 8009292:	4622      	mov	r2, r4
 8009294:	4629      	mov	r1, r5
 8009296:	4630      	mov	r0, r6
 8009298:	f7ff ff93 	bl	80091c2 <__sfputs_r>
 800929c:	3001      	adds	r0, #1
 800929e:	f000 80aa 	beq.w	80093f6 <_vfiprintf_r+0x20e>
 80092a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a4:	445a      	add	r2, fp
 80092a6:	9209      	str	r2, [sp, #36]	; 0x24
 80092a8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80a2 	beq.w	80093f6 <_vfiprintf_r+0x20e>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f04f 32ff 	mov.w	r2, #4294967295
 80092b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092bc:	f10a 0a01 	add.w	sl, sl, #1
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	9307      	str	r3, [sp, #28]
 80092c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c8:	931a      	str	r3, [sp, #104]	; 0x68
 80092ca:	4654      	mov	r4, sl
 80092cc:	2205      	movs	r2, #5
 80092ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d2:	4858      	ldr	r0, [pc, #352]	; (8009434 <_vfiprintf_r+0x24c>)
 80092d4:	f7f6 ffbc 	bl	8000250 <memchr>
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	b9d8      	cbnz	r0, 8009314 <_vfiprintf_r+0x12c>
 80092dc:	06d1      	lsls	r1, r2, #27
 80092de:	bf44      	itt	mi
 80092e0:	2320      	movmi	r3, #32
 80092e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e6:	0713      	lsls	r3, r2, #28
 80092e8:	bf44      	itt	mi
 80092ea:	232b      	movmi	r3, #43	; 0x2b
 80092ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f0:	f89a 3000 	ldrb.w	r3, [sl]
 80092f4:	2b2a      	cmp	r3, #42	; 0x2a
 80092f6:	d015      	beq.n	8009324 <_vfiprintf_r+0x13c>
 80092f8:	9a07      	ldr	r2, [sp, #28]
 80092fa:	4654      	mov	r4, sl
 80092fc:	2000      	movs	r0, #0
 80092fe:	f04f 0c0a 	mov.w	ip, #10
 8009302:	4621      	mov	r1, r4
 8009304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009308:	3b30      	subs	r3, #48	; 0x30
 800930a:	2b09      	cmp	r3, #9
 800930c:	d94e      	bls.n	80093ac <_vfiprintf_r+0x1c4>
 800930e:	b1b0      	cbz	r0, 800933e <_vfiprintf_r+0x156>
 8009310:	9207      	str	r2, [sp, #28]
 8009312:	e014      	b.n	800933e <_vfiprintf_r+0x156>
 8009314:	eba0 0308 	sub.w	r3, r0, r8
 8009318:	fa09 f303 	lsl.w	r3, r9, r3
 800931c:	4313      	orrs	r3, r2
 800931e:	9304      	str	r3, [sp, #16]
 8009320:	46a2      	mov	sl, r4
 8009322:	e7d2      	b.n	80092ca <_vfiprintf_r+0xe2>
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	1d19      	adds	r1, r3, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	9103      	str	r1, [sp, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	bfbb      	ittet	lt
 8009330:	425b      	neglt	r3, r3
 8009332:	f042 0202 	orrlt.w	r2, r2, #2
 8009336:	9307      	strge	r3, [sp, #28]
 8009338:	9307      	strlt	r3, [sp, #28]
 800933a:	bfb8      	it	lt
 800933c:	9204      	strlt	r2, [sp, #16]
 800933e:	7823      	ldrb	r3, [r4, #0]
 8009340:	2b2e      	cmp	r3, #46	; 0x2e
 8009342:	d10c      	bne.n	800935e <_vfiprintf_r+0x176>
 8009344:	7863      	ldrb	r3, [r4, #1]
 8009346:	2b2a      	cmp	r3, #42	; 0x2a
 8009348:	d135      	bne.n	80093b6 <_vfiprintf_r+0x1ce>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	1d1a      	adds	r2, r3, #4
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	9203      	str	r2, [sp, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfb8      	it	lt
 8009356:	f04f 33ff 	movlt.w	r3, #4294967295
 800935a:	3402      	adds	r4, #2
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009444 <_vfiprintf_r+0x25c>
 8009362:	7821      	ldrb	r1, [r4, #0]
 8009364:	2203      	movs	r2, #3
 8009366:	4650      	mov	r0, sl
 8009368:	f7f6 ff72 	bl	8000250 <memchr>
 800936c:	b140      	cbz	r0, 8009380 <_vfiprintf_r+0x198>
 800936e:	2340      	movs	r3, #64	; 0x40
 8009370:	eba0 000a 	sub.w	r0, r0, sl
 8009374:	fa03 f000 	lsl.w	r0, r3, r0
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	4303      	orrs	r3, r0
 800937c:	3401      	adds	r4, #1
 800937e:	9304      	str	r3, [sp, #16]
 8009380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009384:	482c      	ldr	r0, [pc, #176]	; (8009438 <_vfiprintf_r+0x250>)
 8009386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800938a:	2206      	movs	r2, #6
 800938c:	f7f6 ff60 	bl	8000250 <memchr>
 8009390:	2800      	cmp	r0, #0
 8009392:	d03f      	beq.n	8009414 <_vfiprintf_r+0x22c>
 8009394:	4b29      	ldr	r3, [pc, #164]	; (800943c <_vfiprintf_r+0x254>)
 8009396:	bb1b      	cbnz	r3, 80093e0 <_vfiprintf_r+0x1f8>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	3307      	adds	r3, #7
 800939c:	f023 0307 	bic.w	r3, r3, #7
 80093a0:	3308      	adds	r3, #8
 80093a2:	9303      	str	r3, [sp, #12]
 80093a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a6:	443b      	add	r3, r7
 80093a8:	9309      	str	r3, [sp, #36]	; 0x24
 80093aa:	e767      	b.n	800927c <_vfiprintf_r+0x94>
 80093ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b0:	460c      	mov	r4, r1
 80093b2:	2001      	movs	r0, #1
 80093b4:	e7a5      	b.n	8009302 <_vfiprintf_r+0x11a>
 80093b6:	2300      	movs	r3, #0
 80093b8:	3401      	adds	r4, #1
 80093ba:	9305      	str	r3, [sp, #20]
 80093bc:	4619      	mov	r1, r3
 80093be:	f04f 0c0a 	mov.w	ip, #10
 80093c2:	4620      	mov	r0, r4
 80093c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c8:	3a30      	subs	r2, #48	; 0x30
 80093ca:	2a09      	cmp	r2, #9
 80093cc:	d903      	bls.n	80093d6 <_vfiprintf_r+0x1ee>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0c5      	beq.n	800935e <_vfiprintf_r+0x176>
 80093d2:	9105      	str	r1, [sp, #20]
 80093d4:	e7c3      	b.n	800935e <_vfiprintf_r+0x176>
 80093d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093da:	4604      	mov	r4, r0
 80093dc:	2301      	movs	r3, #1
 80093de:	e7f0      	b.n	80093c2 <_vfiprintf_r+0x1da>
 80093e0:	ab03      	add	r3, sp, #12
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	462a      	mov	r2, r5
 80093e6:	4b16      	ldr	r3, [pc, #88]	; (8009440 <_vfiprintf_r+0x258>)
 80093e8:	a904      	add	r1, sp, #16
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7fd fea4 	bl	8007138 <_printf_float>
 80093f0:	4607      	mov	r7, r0
 80093f2:	1c78      	adds	r0, r7, #1
 80093f4:	d1d6      	bne.n	80093a4 <_vfiprintf_r+0x1bc>
 80093f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f8:	07d9      	lsls	r1, r3, #31
 80093fa:	d405      	bmi.n	8009408 <_vfiprintf_r+0x220>
 80093fc:	89ab      	ldrh	r3, [r5, #12]
 80093fe:	059a      	lsls	r2, r3, #22
 8009400:	d402      	bmi.n	8009408 <_vfiprintf_r+0x220>
 8009402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009404:	f000 faaf 	bl	8009966 <__retarget_lock_release_recursive>
 8009408:	89ab      	ldrh	r3, [r5, #12]
 800940a:	065b      	lsls	r3, r3, #25
 800940c:	f53f af12 	bmi.w	8009234 <_vfiprintf_r+0x4c>
 8009410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009412:	e711      	b.n	8009238 <_vfiprintf_r+0x50>
 8009414:	ab03      	add	r3, sp, #12
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	462a      	mov	r2, r5
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <_vfiprintf_r+0x258>)
 800941c:	a904      	add	r1, sp, #16
 800941e:	4630      	mov	r0, r6
 8009420:	f7fe f916 	bl	8007650 <_printf_i>
 8009424:	e7e4      	b.n	80093f0 <_vfiprintf_r+0x208>
 8009426:	bf00      	nop
 8009428:	0800a2dc 	.word	0x0800a2dc
 800942c:	0800a2fc 	.word	0x0800a2fc
 8009430:	0800a2bc 	.word	0x0800a2bc
 8009434:	0800a164 	.word	0x0800a164
 8009438:	0800a16e 	.word	0x0800a16e
 800943c:	08007139 	.word	0x08007139
 8009440:	080091c3 	.word	0x080091c3
 8009444:	0800a16a 	.word	0x0800a16a

08009448 <__swbuf_r>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	460e      	mov	r6, r1
 800944c:	4614      	mov	r4, r2
 800944e:	4605      	mov	r5, r0
 8009450:	b118      	cbz	r0, 800945a <__swbuf_r+0x12>
 8009452:	6983      	ldr	r3, [r0, #24]
 8009454:	b90b      	cbnz	r3, 800945a <__swbuf_r+0x12>
 8009456:	f000 f9e7 	bl	8009828 <__sinit>
 800945a:	4b21      	ldr	r3, [pc, #132]	; (80094e0 <__swbuf_r+0x98>)
 800945c:	429c      	cmp	r4, r3
 800945e:	d12b      	bne.n	80094b8 <__swbuf_r+0x70>
 8009460:	686c      	ldr	r4, [r5, #4]
 8009462:	69a3      	ldr	r3, [r4, #24]
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	071a      	lsls	r2, r3, #28
 800946a:	d52f      	bpl.n	80094cc <__swbuf_r+0x84>
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	b36b      	cbz	r3, 80094cc <__swbuf_r+0x84>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	1ac0      	subs	r0, r0, r3
 8009476:	6963      	ldr	r3, [r4, #20]
 8009478:	b2f6      	uxtb	r6, r6
 800947a:	4283      	cmp	r3, r0
 800947c:	4637      	mov	r7, r6
 800947e:	dc04      	bgt.n	800948a <__swbuf_r+0x42>
 8009480:	4621      	mov	r1, r4
 8009482:	4628      	mov	r0, r5
 8009484:	f000 f93c 	bl	8009700 <_fflush_r>
 8009488:	bb30      	cbnz	r0, 80094d8 <__swbuf_r+0x90>
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	3b01      	subs	r3, #1
 800948e:	60a3      	str	r3, [r4, #8]
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	6022      	str	r2, [r4, #0]
 8009496:	701e      	strb	r6, [r3, #0]
 8009498:	6963      	ldr	r3, [r4, #20]
 800949a:	3001      	adds	r0, #1
 800949c:	4283      	cmp	r3, r0
 800949e:	d004      	beq.n	80094aa <__swbuf_r+0x62>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	07db      	lsls	r3, r3, #31
 80094a4:	d506      	bpl.n	80094b4 <__swbuf_r+0x6c>
 80094a6:	2e0a      	cmp	r6, #10
 80094a8:	d104      	bne.n	80094b4 <__swbuf_r+0x6c>
 80094aa:	4621      	mov	r1, r4
 80094ac:	4628      	mov	r0, r5
 80094ae:	f000 f927 	bl	8009700 <_fflush_r>
 80094b2:	b988      	cbnz	r0, 80094d8 <__swbuf_r+0x90>
 80094b4:	4638      	mov	r0, r7
 80094b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b8:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <__swbuf_r+0x9c>)
 80094ba:	429c      	cmp	r4, r3
 80094bc:	d101      	bne.n	80094c2 <__swbuf_r+0x7a>
 80094be:	68ac      	ldr	r4, [r5, #8]
 80094c0:	e7cf      	b.n	8009462 <__swbuf_r+0x1a>
 80094c2:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <__swbuf_r+0xa0>)
 80094c4:	429c      	cmp	r4, r3
 80094c6:	bf08      	it	eq
 80094c8:	68ec      	ldreq	r4, [r5, #12]
 80094ca:	e7ca      	b.n	8009462 <__swbuf_r+0x1a>
 80094cc:	4621      	mov	r1, r4
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 f81a 	bl	8009508 <__swsetup_r>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d0cb      	beq.n	8009470 <__swbuf_r+0x28>
 80094d8:	f04f 37ff 	mov.w	r7, #4294967295
 80094dc:	e7ea      	b.n	80094b4 <__swbuf_r+0x6c>
 80094de:	bf00      	nop
 80094e0:	0800a2dc 	.word	0x0800a2dc
 80094e4:	0800a2fc 	.word	0x0800a2fc
 80094e8:	0800a2bc 	.word	0x0800a2bc

080094ec <__ascii_wctomb>:
 80094ec:	b149      	cbz	r1, 8009502 <__ascii_wctomb+0x16>
 80094ee:	2aff      	cmp	r2, #255	; 0xff
 80094f0:	bf85      	ittet	hi
 80094f2:	238a      	movhi	r3, #138	; 0x8a
 80094f4:	6003      	strhi	r3, [r0, #0]
 80094f6:	700a      	strbls	r2, [r1, #0]
 80094f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80094fc:	bf98      	it	ls
 80094fe:	2001      	movls	r0, #1
 8009500:	4770      	bx	lr
 8009502:	4608      	mov	r0, r1
 8009504:	4770      	bx	lr
	...

08009508 <__swsetup_r>:
 8009508:	4b32      	ldr	r3, [pc, #200]	; (80095d4 <__swsetup_r+0xcc>)
 800950a:	b570      	push	{r4, r5, r6, lr}
 800950c:	681d      	ldr	r5, [r3, #0]
 800950e:	4606      	mov	r6, r0
 8009510:	460c      	mov	r4, r1
 8009512:	b125      	cbz	r5, 800951e <__swsetup_r+0x16>
 8009514:	69ab      	ldr	r3, [r5, #24]
 8009516:	b913      	cbnz	r3, 800951e <__swsetup_r+0x16>
 8009518:	4628      	mov	r0, r5
 800951a:	f000 f985 	bl	8009828 <__sinit>
 800951e:	4b2e      	ldr	r3, [pc, #184]	; (80095d8 <__swsetup_r+0xd0>)
 8009520:	429c      	cmp	r4, r3
 8009522:	d10f      	bne.n	8009544 <__swsetup_r+0x3c>
 8009524:	686c      	ldr	r4, [r5, #4]
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800952c:	0719      	lsls	r1, r3, #28
 800952e:	d42c      	bmi.n	800958a <__swsetup_r+0x82>
 8009530:	06dd      	lsls	r5, r3, #27
 8009532:	d411      	bmi.n	8009558 <__swsetup_r+0x50>
 8009534:	2309      	movs	r3, #9
 8009536:	6033      	str	r3, [r6, #0]
 8009538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	f04f 30ff 	mov.w	r0, #4294967295
 8009542:	e03e      	b.n	80095c2 <__swsetup_r+0xba>
 8009544:	4b25      	ldr	r3, [pc, #148]	; (80095dc <__swsetup_r+0xd4>)
 8009546:	429c      	cmp	r4, r3
 8009548:	d101      	bne.n	800954e <__swsetup_r+0x46>
 800954a:	68ac      	ldr	r4, [r5, #8]
 800954c:	e7eb      	b.n	8009526 <__swsetup_r+0x1e>
 800954e:	4b24      	ldr	r3, [pc, #144]	; (80095e0 <__swsetup_r+0xd8>)
 8009550:	429c      	cmp	r4, r3
 8009552:	bf08      	it	eq
 8009554:	68ec      	ldreq	r4, [r5, #12]
 8009556:	e7e6      	b.n	8009526 <__swsetup_r+0x1e>
 8009558:	0758      	lsls	r0, r3, #29
 800955a:	d512      	bpl.n	8009582 <__swsetup_r+0x7a>
 800955c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800955e:	b141      	cbz	r1, 8009572 <__swsetup_r+0x6a>
 8009560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009564:	4299      	cmp	r1, r3
 8009566:	d002      	beq.n	800956e <__swsetup_r+0x66>
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff fb6f 	bl	8008c4c <_free_r>
 800956e:	2300      	movs	r3, #0
 8009570:	6363      	str	r3, [r4, #52]	; 0x34
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	2300      	movs	r3, #0
 800957c:	6063      	str	r3, [r4, #4]
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f043 0308 	orr.w	r3, r3, #8
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	b94b      	cbnz	r3, 80095a2 <__swsetup_r+0x9a>
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009598:	d003      	beq.n	80095a2 <__swsetup_r+0x9a>
 800959a:	4621      	mov	r1, r4
 800959c:	4630      	mov	r0, r6
 800959e:	f000 fa07 	bl	80099b0 <__smakebuf_r>
 80095a2:	89a0      	ldrh	r0, [r4, #12]
 80095a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095a8:	f010 0301 	ands.w	r3, r0, #1
 80095ac:	d00a      	beq.n	80095c4 <__swsetup_r+0xbc>
 80095ae:	2300      	movs	r3, #0
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	6963      	ldr	r3, [r4, #20]
 80095b4:	425b      	negs	r3, r3
 80095b6:	61a3      	str	r3, [r4, #24]
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	b943      	cbnz	r3, 80095ce <__swsetup_r+0xc6>
 80095bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095c0:	d1ba      	bne.n	8009538 <__swsetup_r+0x30>
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
 80095c4:	0781      	lsls	r1, r0, #30
 80095c6:	bf58      	it	pl
 80095c8:	6963      	ldrpl	r3, [r4, #20]
 80095ca:	60a3      	str	r3, [r4, #8]
 80095cc:	e7f4      	b.n	80095b8 <__swsetup_r+0xb0>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e7f7      	b.n	80095c2 <__swsetup_r+0xba>
 80095d2:	bf00      	nop
 80095d4:	2000003c 	.word	0x2000003c
 80095d8:	0800a2dc 	.word	0x0800a2dc
 80095dc:	0800a2fc 	.word	0x0800a2fc
 80095e0:	0800a2bc 	.word	0x0800a2bc

080095e4 <abort>:
 80095e4:	b508      	push	{r3, lr}
 80095e6:	2006      	movs	r0, #6
 80095e8:	f000 fa52 	bl	8009a90 <raise>
 80095ec:	2001      	movs	r0, #1
 80095ee:	f7f7 fff5 	bl	80015dc <_exit>
	...

080095f4 <__sflush_r>:
 80095f4:	898a      	ldrh	r2, [r1, #12]
 80095f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095fa:	4605      	mov	r5, r0
 80095fc:	0710      	lsls	r0, r2, #28
 80095fe:	460c      	mov	r4, r1
 8009600:	d458      	bmi.n	80096b4 <__sflush_r+0xc0>
 8009602:	684b      	ldr	r3, [r1, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	dc05      	bgt.n	8009614 <__sflush_r+0x20>
 8009608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	dc02      	bgt.n	8009614 <__sflush_r+0x20>
 800960e:	2000      	movs	r0, #0
 8009610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009616:	2e00      	cmp	r6, #0
 8009618:	d0f9      	beq.n	800960e <__sflush_r+0x1a>
 800961a:	2300      	movs	r3, #0
 800961c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009620:	682f      	ldr	r7, [r5, #0]
 8009622:	602b      	str	r3, [r5, #0]
 8009624:	d032      	beq.n	800968c <__sflush_r+0x98>
 8009626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	075a      	lsls	r2, r3, #29
 800962c:	d505      	bpl.n	800963a <__sflush_r+0x46>
 800962e:	6863      	ldr	r3, [r4, #4]
 8009630:	1ac0      	subs	r0, r0, r3
 8009632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009634:	b10b      	cbz	r3, 800963a <__sflush_r+0x46>
 8009636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009638:	1ac0      	subs	r0, r0, r3
 800963a:	2300      	movs	r3, #0
 800963c:	4602      	mov	r2, r0
 800963e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009640:	6a21      	ldr	r1, [r4, #32]
 8009642:	4628      	mov	r0, r5
 8009644:	47b0      	blx	r6
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	d106      	bne.n	800965a <__sflush_r+0x66>
 800964c:	6829      	ldr	r1, [r5, #0]
 800964e:	291d      	cmp	r1, #29
 8009650:	d82c      	bhi.n	80096ac <__sflush_r+0xb8>
 8009652:	4a2a      	ldr	r2, [pc, #168]	; (80096fc <__sflush_r+0x108>)
 8009654:	40ca      	lsrs	r2, r1
 8009656:	07d6      	lsls	r6, r2, #31
 8009658:	d528      	bpl.n	80096ac <__sflush_r+0xb8>
 800965a:	2200      	movs	r2, #0
 800965c:	6062      	str	r2, [r4, #4]
 800965e:	04d9      	lsls	r1, r3, #19
 8009660:	6922      	ldr	r2, [r4, #16]
 8009662:	6022      	str	r2, [r4, #0]
 8009664:	d504      	bpl.n	8009670 <__sflush_r+0x7c>
 8009666:	1c42      	adds	r2, r0, #1
 8009668:	d101      	bne.n	800966e <__sflush_r+0x7a>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	b903      	cbnz	r3, 8009670 <__sflush_r+0x7c>
 800966e:	6560      	str	r0, [r4, #84]	; 0x54
 8009670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009672:	602f      	str	r7, [r5, #0]
 8009674:	2900      	cmp	r1, #0
 8009676:	d0ca      	beq.n	800960e <__sflush_r+0x1a>
 8009678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800967c:	4299      	cmp	r1, r3
 800967e:	d002      	beq.n	8009686 <__sflush_r+0x92>
 8009680:	4628      	mov	r0, r5
 8009682:	f7ff fae3 	bl	8008c4c <_free_r>
 8009686:	2000      	movs	r0, #0
 8009688:	6360      	str	r0, [r4, #52]	; 0x34
 800968a:	e7c1      	b.n	8009610 <__sflush_r+0x1c>
 800968c:	6a21      	ldr	r1, [r4, #32]
 800968e:	2301      	movs	r3, #1
 8009690:	4628      	mov	r0, r5
 8009692:	47b0      	blx	r6
 8009694:	1c41      	adds	r1, r0, #1
 8009696:	d1c7      	bne.n	8009628 <__sflush_r+0x34>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0c4      	beq.n	8009628 <__sflush_r+0x34>
 800969e:	2b1d      	cmp	r3, #29
 80096a0:	d001      	beq.n	80096a6 <__sflush_r+0xb2>
 80096a2:	2b16      	cmp	r3, #22
 80096a4:	d101      	bne.n	80096aa <__sflush_r+0xb6>
 80096a6:	602f      	str	r7, [r5, #0]
 80096a8:	e7b1      	b.n	800960e <__sflush_r+0x1a>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b0:	81a3      	strh	r3, [r4, #12]
 80096b2:	e7ad      	b.n	8009610 <__sflush_r+0x1c>
 80096b4:	690f      	ldr	r7, [r1, #16]
 80096b6:	2f00      	cmp	r7, #0
 80096b8:	d0a9      	beq.n	800960e <__sflush_r+0x1a>
 80096ba:	0793      	lsls	r3, r2, #30
 80096bc:	680e      	ldr	r6, [r1, #0]
 80096be:	bf08      	it	eq
 80096c0:	694b      	ldreq	r3, [r1, #20]
 80096c2:	600f      	str	r7, [r1, #0]
 80096c4:	bf18      	it	ne
 80096c6:	2300      	movne	r3, #0
 80096c8:	eba6 0807 	sub.w	r8, r6, r7
 80096cc:	608b      	str	r3, [r1, #8]
 80096ce:	f1b8 0f00 	cmp.w	r8, #0
 80096d2:	dd9c      	ble.n	800960e <__sflush_r+0x1a>
 80096d4:	6a21      	ldr	r1, [r4, #32]
 80096d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096d8:	4643      	mov	r3, r8
 80096da:	463a      	mov	r2, r7
 80096dc:	4628      	mov	r0, r5
 80096de:	47b0      	blx	r6
 80096e0:	2800      	cmp	r0, #0
 80096e2:	dc06      	bgt.n	80096f2 <__sflush_r+0xfe>
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	e78e      	b.n	8009610 <__sflush_r+0x1c>
 80096f2:	4407      	add	r7, r0
 80096f4:	eba8 0800 	sub.w	r8, r8, r0
 80096f8:	e7e9      	b.n	80096ce <__sflush_r+0xda>
 80096fa:	bf00      	nop
 80096fc:	20400001 	.word	0x20400001

08009700 <_fflush_r>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	690b      	ldr	r3, [r1, #16]
 8009704:	4605      	mov	r5, r0
 8009706:	460c      	mov	r4, r1
 8009708:	b913      	cbnz	r3, 8009710 <_fflush_r+0x10>
 800970a:	2500      	movs	r5, #0
 800970c:	4628      	mov	r0, r5
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	b118      	cbz	r0, 800971a <_fflush_r+0x1a>
 8009712:	6983      	ldr	r3, [r0, #24]
 8009714:	b90b      	cbnz	r3, 800971a <_fflush_r+0x1a>
 8009716:	f000 f887 	bl	8009828 <__sinit>
 800971a:	4b14      	ldr	r3, [pc, #80]	; (800976c <_fflush_r+0x6c>)
 800971c:	429c      	cmp	r4, r3
 800971e:	d11b      	bne.n	8009758 <_fflush_r+0x58>
 8009720:	686c      	ldr	r4, [r5, #4]
 8009722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0ef      	beq.n	800970a <_fflush_r+0xa>
 800972a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800972c:	07d0      	lsls	r0, r2, #31
 800972e:	d404      	bmi.n	800973a <_fflush_r+0x3a>
 8009730:	0599      	lsls	r1, r3, #22
 8009732:	d402      	bmi.n	800973a <_fflush_r+0x3a>
 8009734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009736:	f000 f915 	bl	8009964 <__retarget_lock_acquire_recursive>
 800973a:	4628      	mov	r0, r5
 800973c:	4621      	mov	r1, r4
 800973e:	f7ff ff59 	bl	80095f4 <__sflush_r>
 8009742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009744:	07da      	lsls	r2, r3, #31
 8009746:	4605      	mov	r5, r0
 8009748:	d4e0      	bmi.n	800970c <_fflush_r+0xc>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	059b      	lsls	r3, r3, #22
 800974e:	d4dd      	bmi.n	800970c <_fflush_r+0xc>
 8009750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009752:	f000 f908 	bl	8009966 <__retarget_lock_release_recursive>
 8009756:	e7d9      	b.n	800970c <_fflush_r+0xc>
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <_fflush_r+0x70>)
 800975a:	429c      	cmp	r4, r3
 800975c:	d101      	bne.n	8009762 <_fflush_r+0x62>
 800975e:	68ac      	ldr	r4, [r5, #8]
 8009760:	e7df      	b.n	8009722 <_fflush_r+0x22>
 8009762:	4b04      	ldr	r3, [pc, #16]	; (8009774 <_fflush_r+0x74>)
 8009764:	429c      	cmp	r4, r3
 8009766:	bf08      	it	eq
 8009768:	68ec      	ldreq	r4, [r5, #12]
 800976a:	e7da      	b.n	8009722 <_fflush_r+0x22>
 800976c:	0800a2dc 	.word	0x0800a2dc
 8009770:	0800a2fc 	.word	0x0800a2fc
 8009774:	0800a2bc 	.word	0x0800a2bc

08009778 <std>:
 8009778:	2300      	movs	r3, #0
 800977a:	b510      	push	{r4, lr}
 800977c:	4604      	mov	r4, r0
 800977e:	e9c0 3300 	strd	r3, r3, [r0]
 8009782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009786:	6083      	str	r3, [r0, #8]
 8009788:	8181      	strh	r1, [r0, #12]
 800978a:	6643      	str	r3, [r0, #100]	; 0x64
 800978c:	81c2      	strh	r2, [r0, #14]
 800978e:	6183      	str	r3, [r0, #24]
 8009790:	4619      	mov	r1, r3
 8009792:	2208      	movs	r2, #8
 8009794:	305c      	adds	r0, #92	; 0x5c
 8009796:	f7fd fc37 	bl	8007008 <memset>
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <std+0x38>)
 800979c:	6263      	str	r3, [r4, #36]	; 0x24
 800979e:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <std+0x3c>)
 80097a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80097a2:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <std+0x40>)
 80097a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097a6:	4b05      	ldr	r3, [pc, #20]	; (80097bc <std+0x44>)
 80097a8:	6224      	str	r4, [r4, #32]
 80097aa:	6323      	str	r3, [r4, #48]	; 0x30
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	bf00      	nop
 80097b0:	08009ac9 	.word	0x08009ac9
 80097b4:	08009aeb 	.word	0x08009aeb
 80097b8:	08009b23 	.word	0x08009b23
 80097bc:	08009b47 	.word	0x08009b47

080097c0 <_cleanup_r>:
 80097c0:	4901      	ldr	r1, [pc, #4]	; (80097c8 <_cleanup_r+0x8>)
 80097c2:	f000 b8af 	b.w	8009924 <_fwalk_reent>
 80097c6:	bf00      	nop
 80097c8:	08009701 	.word	0x08009701

080097cc <__sfmoreglue>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	1e4a      	subs	r2, r1, #1
 80097d0:	2568      	movs	r5, #104	; 0x68
 80097d2:	4355      	muls	r5, r2
 80097d4:	460e      	mov	r6, r1
 80097d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097da:	f7ff fa87 	bl	8008cec <_malloc_r>
 80097de:	4604      	mov	r4, r0
 80097e0:	b140      	cbz	r0, 80097f4 <__sfmoreglue+0x28>
 80097e2:	2100      	movs	r1, #0
 80097e4:	e9c0 1600 	strd	r1, r6, [r0]
 80097e8:	300c      	adds	r0, #12
 80097ea:	60a0      	str	r0, [r4, #8]
 80097ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097f0:	f7fd fc0a 	bl	8007008 <memset>
 80097f4:	4620      	mov	r0, r4
 80097f6:	bd70      	pop	{r4, r5, r6, pc}

080097f8 <__sfp_lock_acquire>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__sfp_lock_acquire+0x8>)
 80097fa:	f000 b8b3 	b.w	8009964 <__retarget_lock_acquire_recursive>
 80097fe:	bf00      	nop
 8009800:	20000570 	.word	0x20000570

08009804 <__sfp_lock_release>:
 8009804:	4801      	ldr	r0, [pc, #4]	; (800980c <__sfp_lock_release+0x8>)
 8009806:	f000 b8ae 	b.w	8009966 <__retarget_lock_release_recursive>
 800980a:	bf00      	nop
 800980c:	20000570 	.word	0x20000570

08009810 <__sinit_lock_acquire>:
 8009810:	4801      	ldr	r0, [pc, #4]	; (8009818 <__sinit_lock_acquire+0x8>)
 8009812:	f000 b8a7 	b.w	8009964 <__retarget_lock_acquire_recursive>
 8009816:	bf00      	nop
 8009818:	2000056b 	.word	0x2000056b

0800981c <__sinit_lock_release>:
 800981c:	4801      	ldr	r0, [pc, #4]	; (8009824 <__sinit_lock_release+0x8>)
 800981e:	f000 b8a2 	b.w	8009966 <__retarget_lock_release_recursive>
 8009822:	bf00      	nop
 8009824:	2000056b 	.word	0x2000056b

08009828 <__sinit>:
 8009828:	b510      	push	{r4, lr}
 800982a:	4604      	mov	r4, r0
 800982c:	f7ff fff0 	bl	8009810 <__sinit_lock_acquire>
 8009830:	69a3      	ldr	r3, [r4, #24]
 8009832:	b11b      	cbz	r3, 800983c <__sinit+0x14>
 8009834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009838:	f7ff bff0 	b.w	800981c <__sinit_lock_release>
 800983c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009840:	6523      	str	r3, [r4, #80]	; 0x50
 8009842:	4b13      	ldr	r3, [pc, #76]	; (8009890 <__sinit+0x68>)
 8009844:	4a13      	ldr	r2, [pc, #76]	; (8009894 <__sinit+0x6c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	62a2      	str	r2, [r4, #40]	; 0x28
 800984a:	42a3      	cmp	r3, r4
 800984c:	bf04      	itt	eq
 800984e:	2301      	moveq	r3, #1
 8009850:	61a3      	streq	r3, [r4, #24]
 8009852:	4620      	mov	r0, r4
 8009854:	f000 f820 	bl	8009898 <__sfp>
 8009858:	6060      	str	r0, [r4, #4]
 800985a:	4620      	mov	r0, r4
 800985c:	f000 f81c 	bl	8009898 <__sfp>
 8009860:	60a0      	str	r0, [r4, #8]
 8009862:	4620      	mov	r0, r4
 8009864:	f000 f818 	bl	8009898 <__sfp>
 8009868:	2200      	movs	r2, #0
 800986a:	60e0      	str	r0, [r4, #12]
 800986c:	2104      	movs	r1, #4
 800986e:	6860      	ldr	r0, [r4, #4]
 8009870:	f7ff ff82 	bl	8009778 <std>
 8009874:	68a0      	ldr	r0, [r4, #8]
 8009876:	2201      	movs	r2, #1
 8009878:	2109      	movs	r1, #9
 800987a:	f7ff ff7d 	bl	8009778 <std>
 800987e:	68e0      	ldr	r0, [r4, #12]
 8009880:	2202      	movs	r2, #2
 8009882:	2112      	movs	r1, #18
 8009884:	f7ff ff78 	bl	8009778 <std>
 8009888:	2301      	movs	r3, #1
 800988a:	61a3      	str	r3, [r4, #24]
 800988c:	e7d2      	b.n	8009834 <__sinit+0xc>
 800988e:	bf00      	nop
 8009890:	08009f3c 	.word	0x08009f3c
 8009894:	080097c1 	.word	0x080097c1

08009898 <__sfp>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	4607      	mov	r7, r0
 800989c:	f7ff ffac 	bl	80097f8 <__sfp_lock_acquire>
 80098a0:	4b1e      	ldr	r3, [pc, #120]	; (800991c <__sfp+0x84>)
 80098a2:	681e      	ldr	r6, [r3, #0]
 80098a4:	69b3      	ldr	r3, [r6, #24]
 80098a6:	b913      	cbnz	r3, 80098ae <__sfp+0x16>
 80098a8:	4630      	mov	r0, r6
 80098aa:	f7ff ffbd 	bl	8009828 <__sinit>
 80098ae:	3648      	adds	r6, #72	; 0x48
 80098b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	d503      	bpl.n	80098c0 <__sfp+0x28>
 80098b8:	6833      	ldr	r3, [r6, #0]
 80098ba:	b30b      	cbz	r3, 8009900 <__sfp+0x68>
 80098bc:	6836      	ldr	r6, [r6, #0]
 80098be:	e7f7      	b.n	80098b0 <__sfp+0x18>
 80098c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098c4:	b9d5      	cbnz	r5, 80098fc <__sfp+0x64>
 80098c6:	4b16      	ldr	r3, [pc, #88]	; (8009920 <__sfp+0x88>)
 80098c8:	60e3      	str	r3, [r4, #12]
 80098ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098ce:	6665      	str	r5, [r4, #100]	; 0x64
 80098d0:	f000 f847 	bl	8009962 <__retarget_lock_init_recursive>
 80098d4:	f7ff ff96 	bl	8009804 <__sfp_lock_release>
 80098d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098e0:	6025      	str	r5, [r4, #0]
 80098e2:	61a5      	str	r5, [r4, #24]
 80098e4:	2208      	movs	r2, #8
 80098e6:	4629      	mov	r1, r5
 80098e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098ec:	f7fd fb8c 	bl	8007008 <memset>
 80098f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098f8:	4620      	mov	r0, r4
 80098fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098fc:	3468      	adds	r4, #104	; 0x68
 80098fe:	e7d9      	b.n	80098b4 <__sfp+0x1c>
 8009900:	2104      	movs	r1, #4
 8009902:	4638      	mov	r0, r7
 8009904:	f7ff ff62 	bl	80097cc <__sfmoreglue>
 8009908:	4604      	mov	r4, r0
 800990a:	6030      	str	r0, [r6, #0]
 800990c:	2800      	cmp	r0, #0
 800990e:	d1d5      	bne.n	80098bc <__sfp+0x24>
 8009910:	f7ff ff78 	bl	8009804 <__sfp_lock_release>
 8009914:	230c      	movs	r3, #12
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	e7ee      	b.n	80098f8 <__sfp+0x60>
 800991a:	bf00      	nop
 800991c:	08009f3c 	.word	0x08009f3c
 8009920:	ffff0001 	.word	0xffff0001

08009924 <_fwalk_reent>:
 8009924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009928:	4606      	mov	r6, r0
 800992a:	4688      	mov	r8, r1
 800992c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009930:	2700      	movs	r7, #0
 8009932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009936:	f1b9 0901 	subs.w	r9, r9, #1
 800993a:	d505      	bpl.n	8009948 <_fwalk_reent+0x24>
 800993c:	6824      	ldr	r4, [r4, #0]
 800993e:	2c00      	cmp	r4, #0
 8009940:	d1f7      	bne.n	8009932 <_fwalk_reent+0xe>
 8009942:	4638      	mov	r0, r7
 8009944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009948:	89ab      	ldrh	r3, [r5, #12]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d907      	bls.n	800995e <_fwalk_reent+0x3a>
 800994e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009952:	3301      	adds	r3, #1
 8009954:	d003      	beq.n	800995e <_fwalk_reent+0x3a>
 8009956:	4629      	mov	r1, r5
 8009958:	4630      	mov	r0, r6
 800995a:	47c0      	blx	r8
 800995c:	4307      	orrs	r7, r0
 800995e:	3568      	adds	r5, #104	; 0x68
 8009960:	e7e9      	b.n	8009936 <_fwalk_reent+0x12>

08009962 <__retarget_lock_init_recursive>:
 8009962:	4770      	bx	lr

08009964 <__retarget_lock_acquire_recursive>:
 8009964:	4770      	bx	lr

08009966 <__retarget_lock_release_recursive>:
 8009966:	4770      	bx	lr

08009968 <__swhatbuf_r>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	460e      	mov	r6, r1
 800996c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009970:	2900      	cmp	r1, #0
 8009972:	b096      	sub	sp, #88	; 0x58
 8009974:	4614      	mov	r4, r2
 8009976:	461d      	mov	r5, r3
 8009978:	da07      	bge.n	800998a <__swhatbuf_r+0x22>
 800997a:	2300      	movs	r3, #0
 800997c:	602b      	str	r3, [r5, #0]
 800997e:	89b3      	ldrh	r3, [r6, #12]
 8009980:	061a      	lsls	r2, r3, #24
 8009982:	d410      	bmi.n	80099a6 <__swhatbuf_r+0x3e>
 8009984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009988:	e00e      	b.n	80099a8 <__swhatbuf_r+0x40>
 800998a:	466a      	mov	r2, sp
 800998c:	f000 f902 	bl	8009b94 <_fstat_r>
 8009990:	2800      	cmp	r0, #0
 8009992:	dbf2      	blt.n	800997a <__swhatbuf_r+0x12>
 8009994:	9a01      	ldr	r2, [sp, #4]
 8009996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800999a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800999e:	425a      	negs	r2, r3
 80099a0:	415a      	adcs	r2, r3
 80099a2:	602a      	str	r2, [r5, #0]
 80099a4:	e7ee      	b.n	8009984 <__swhatbuf_r+0x1c>
 80099a6:	2340      	movs	r3, #64	; 0x40
 80099a8:	2000      	movs	r0, #0
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	b016      	add	sp, #88	; 0x58
 80099ae:	bd70      	pop	{r4, r5, r6, pc}

080099b0 <__smakebuf_r>:
 80099b0:	898b      	ldrh	r3, [r1, #12]
 80099b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099b4:	079d      	lsls	r5, r3, #30
 80099b6:	4606      	mov	r6, r0
 80099b8:	460c      	mov	r4, r1
 80099ba:	d507      	bpl.n	80099cc <__smakebuf_r+0x1c>
 80099bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	2301      	movs	r3, #1
 80099c6:	6163      	str	r3, [r4, #20]
 80099c8:	b002      	add	sp, #8
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	ab01      	add	r3, sp, #4
 80099ce:	466a      	mov	r2, sp
 80099d0:	f7ff ffca 	bl	8009968 <__swhatbuf_r>
 80099d4:	9900      	ldr	r1, [sp, #0]
 80099d6:	4605      	mov	r5, r0
 80099d8:	4630      	mov	r0, r6
 80099da:	f7ff f987 	bl	8008cec <_malloc_r>
 80099de:	b948      	cbnz	r0, 80099f4 <__smakebuf_r+0x44>
 80099e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e4:	059a      	lsls	r2, r3, #22
 80099e6:	d4ef      	bmi.n	80099c8 <__smakebuf_r+0x18>
 80099e8:	f023 0303 	bic.w	r3, r3, #3
 80099ec:	f043 0302 	orr.w	r3, r3, #2
 80099f0:	81a3      	strh	r3, [r4, #12]
 80099f2:	e7e3      	b.n	80099bc <__smakebuf_r+0xc>
 80099f4:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <__smakebuf_r+0x7c>)
 80099f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	6020      	str	r0, [r4, #0]
 80099fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	6163      	str	r3, [r4, #20]
 8009a06:	9b01      	ldr	r3, [sp, #4]
 8009a08:	6120      	str	r0, [r4, #16]
 8009a0a:	b15b      	cbz	r3, 8009a24 <__smakebuf_r+0x74>
 8009a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 f8d1 	bl	8009bb8 <_isatty_r>
 8009a16:	b128      	cbz	r0, 8009a24 <__smakebuf_r+0x74>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f023 0303 	bic.w	r3, r3, #3
 8009a1e:	f043 0301 	orr.w	r3, r3, #1
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	89a0      	ldrh	r0, [r4, #12]
 8009a26:	4305      	orrs	r5, r0
 8009a28:	81a5      	strh	r5, [r4, #12]
 8009a2a:	e7cd      	b.n	80099c8 <__smakebuf_r+0x18>
 8009a2c:	080097c1 	.word	0x080097c1

08009a30 <_malloc_usable_size_r>:
 8009a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a34:	1f18      	subs	r0, r3, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bfbc      	itt	lt
 8009a3a:	580b      	ldrlt	r3, [r1, r0]
 8009a3c:	18c0      	addlt	r0, r0, r3
 8009a3e:	4770      	bx	lr

08009a40 <_raise_r>:
 8009a40:	291f      	cmp	r1, #31
 8009a42:	b538      	push	{r3, r4, r5, lr}
 8009a44:	4604      	mov	r4, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	d904      	bls.n	8009a54 <_raise_r+0x14>
 8009a4a:	2316      	movs	r3, #22
 8009a4c:	6003      	str	r3, [r0, #0]
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a56:	b112      	cbz	r2, 8009a5e <_raise_r+0x1e>
 8009a58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a5c:	b94b      	cbnz	r3, 8009a72 <_raise_r+0x32>
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 f830 	bl	8009ac4 <_getpid_r>
 8009a64:	462a      	mov	r2, r5
 8009a66:	4601      	mov	r1, r0
 8009a68:	4620      	mov	r0, r4
 8009a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a6e:	f000 b817 	b.w	8009aa0 <_kill_r>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d00a      	beq.n	8009a8c <_raise_r+0x4c>
 8009a76:	1c59      	adds	r1, r3, #1
 8009a78:	d103      	bne.n	8009a82 <_raise_r+0x42>
 8009a7a:	2316      	movs	r3, #22
 8009a7c:	6003      	str	r3, [r0, #0]
 8009a7e:	2001      	movs	r0, #1
 8009a80:	e7e7      	b.n	8009a52 <_raise_r+0x12>
 8009a82:	2400      	movs	r4, #0
 8009a84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a88:	4628      	mov	r0, r5
 8009a8a:	4798      	blx	r3
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e7e0      	b.n	8009a52 <_raise_r+0x12>

08009a90 <raise>:
 8009a90:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <raise+0xc>)
 8009a92:	4601      	mov	r1, r0
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f7ff bfd3 	b.w	8009a40 <_raise_r>
 8009a9a:	bf00      	nop
 8009a9c:	2000003c 	.word	0x2000003c

08009aa0 <_kill_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d07      	ldr	r5, [pc, #28]	; (8009ac0 <_kill_r+0x20>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	4611      	mov	r1, r2
 8009aac:	602b      	str	r3, [r5, #0]
 8009aae:	f7f7 fd85 	bl	80015bc <_kill>
 8009ab2:	1c43      	adds	r3, r0, #1
 8009ab4:	d102      	bne.n	8009abc <_kill_r+0x1c>
 8009ab6:	682b      	ldr	r3, [r5, #0]
 8009ab8:	b103      	cbz	r3, 8009abc <_kill_r+0x1c>
 8009aba:	6023      	str	r3, [r4, #0]
 8009abc:	bd38      	pop	{r3, r4, r5, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000564 	.word	0x20000564

08009ac4 <_getpid_r>:
 8009ac4:	f7f7 bd72 	b.w	80015ac <_getpid>

08009ac8 <__sread>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	460c      	mov	r4, r1
 8009acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad0:	f000 f894 	bl	8009bfc <_read_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	bfab      	itete	ge
 8009ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ada:	89a3      	ldrhlt	r3, [r4, #12]
 8009adc:	181b      	addge	r3, r3, r0
 8009ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ae2:	bfac      	ite	ge
 8009ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ae6:	81a3      	strhlt	r3, [r4, #12]
 8009ae8:	bd10      	pop	{r4, pc}

08009aea <__swrite>:
 8009aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aee:	461f      	mov	r7, r3
 8009af0:	898b      	ldrh	r3, [r1, #12]
 8009af2:	05db      	lsls	r3, r3, #23
 8009af4:	4605      	mov	r5, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	4616      	mov	r6, r2
 8009afa:	d505      	bpl.n	8009b08 <__swrite+0x1e>
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	2302      	movs	r3, #2
 8009b02:	2200      	movs	r2, #0
 8009b04:	f000 f868 	bl	8009bd8 <_lseek_r>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	4632      	mov	r2, r6
 8009b16:	463b      	mov	r3, r7
 8009b18:	4628      	mov	r0, r5
 8009b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	f000 b817 	b.w	8009b50 <_write_r>

08009b22 <__sseek>:
 8009b22:	b510      	push	{r4, lr}
 8009b24:	460c      	mov	r4, r1
 8009b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2a:	f000 f855 	bl	8009bd8 <_lseek_r>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	bf15      	itete	ne
 8009b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b3e:	81a3      	strheq	r3, [r4, #12]
 8009b40:	bf18      	it	ne
 8009b42:	81a3      	strhne	r3, [r4, #12]
 8009b44:	bd10      	pop	{r4, pc}

08009b46 <__sclose>:
 8009b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4a:	f000 b813 	b.w	8009b74 <_close_r>
	...

08009b50 <_write_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	; (8009b70 <_write_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f7 fd63 	bl	800162a <_write>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_write_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_write_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	20000564 	.word	0x20000564

08009b74 <_close_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d06      	ldr	r5, [pc, #24]	; (8009b90 <_close_r+0x1c>)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	602b      	str	r3, [r5, #0]
 8009b80:	f7f7 fd6f 	bl	8001662 <_close>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_close_r+0x1a>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_close_r+0x1a>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	20000564 	.word	0x20000564

08009b94 <_fstat_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d07      	ldr	r5, [pc, #28]	; (8009bb4 <_fstat_r+0x20>)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	f7f7 fd6a 	bl	800167a <_fstat>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	d102      	bne.n	8009bb0 <_fstat_r+0x1c>
 8009baa:	682b      	ldr	r3, [r5, #0]
 8009bac:	b103      	cbz	r3, 8009bb0 <_fstat_r+0x1c>
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	bd38      	pop	{r3, r4, r5, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000564 	.word	0x20000564

08009bb8 <_isatty_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d06      	ldr	r5, [pc, #24]	; (8009bd4 <_isatty_r+0x1c>)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	602b      	str	r3, [r5, #0]
 8009bc4:	f7f7 fd69 	bl	800169a <_isatty>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_isatty_r+0x1a>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_isatty_r+0x1a>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	20000564 	.word	0x20000564

08009bd8 <_lseek_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	; (8009bf8 <_lseek_r+0x20>)
 8009bdc:	4604      	mov	r4, r0
 8009bde:	4608      	mov	r0, r1
 8009be0:	4611      	mov	r1, r2
 8009be2:	2200      	movs	r2, #0
 8009be4:	602a      	str	r2, [r5, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	f7f7 fd62 	bl	80016b0 <_lseek>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_lseek_r+0x1e>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_lseek_r+0x1e>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	20000564 	.word	0x20000564

08009bfc <_read_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d07      	ldr	r5, [pc, #28]	; (8009c1c <_read_r+0x20>)
 8009c00:	4604      	mov	r4, r0
 8009c02:	4608      	mov	r0, r1
 8009c04:	4611      	mov	r1, r2
 8009c06:	2200      	movs	r2, #0
 8009c08:	602a      	str	r2, [r5, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f7f7 fcf0 	bl	80015f0 <_read>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_read_r+0x1e>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_read_r+0x1e>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	20000564 	.word	0x20000564

08009c20 <_init>:
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	bf00      	nop
 8009c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c26:	bc08      	pop	{r3}
 8009c28:	469e      	mov	lr, r3
 8009c2a:	4770      	bx	lr

08009c2c <_fini>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	bf00      	nop
 8009c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c32:	bc08      	pop	{r3}
 8009c34:	469e      	mov	lr, r3
 8009c36:	4770      	bx	lr
